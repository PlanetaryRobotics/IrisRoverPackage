##
# All global status variables:
##
# Connection status:
export dim status__wifi_radio_is_on
export dim status__wifi_connected
export dim status__udp_client_active
export dim status__udp_server_active
# General information and statistics:
export dim status__last_rssi  # most recent rssi reading (polled periodically by heartbeat services)
export dim status__hercules_syntax_err_count  # count of malformed packets (from Hercules)


export procedure INIT_GLOBAL_STATUS()
    status__wifi_radio_is_on = 0
    status__wifi_connected = 0
    status__udp_client_active = 0
    status__udp_server_active = 0
    status__last_rssi = 0
    status__hercules_syntax_err_count = 0
end

# Listen for events that affect any of these statuses and update them:

event sme_wifi_is_on(result)
	# If Wi-Fi is ON
	if result = 0 then
		status__wifi_radio_is_on = 1
    end if
end

event sme_wifi_is_off(result)
	# If Wi-Fi is OFF
	if result = 0 then
		# Update status:
        status__wifi_radio_is_on = 0
        status__wifi_connected = 0
        status__udp_client_active = 0
        status__udp_server_active = 0
	end if
end

# Network status event listener
event sme_interface_status(hw_interface, status)
    if hw_interface = 0 then
        # is wifi radio
        if status = 1 then
            status__wifi_radio_is_on = 1
        else
            status__wifi_radio_is_on = 0
            status__wifi_connected = 0
            status__udp_client_active = 0
            status__udp_server_active = 0
        end if
    end if
end

event sme_connected(status, hw_interface, bssid)
    if hw_interface = 0 then  # interface is WiFi
        if status = 0 then
            status__wifi_connected = 1
        else
            status__wifi_connected = 0
            status__udp_client_active = 0
            status__udp_server_active = 0
        end if
    end if
end

event sme_connect_failed(reason, hw_interface)
    if hw_interface = 0 then  # interface is WiFi
        status__wifi_connected = 0
        status__udp_client_active = 0
        status__udp_server_active = 0
    end if
end

event sme_disconnected(reason, hw_interface)
    if hw_interface = 0 then
        status__wifi_connected = 0
        status__udp_client_active = 0
        status__udp_server_active = 0
    end if
end

event endpoint_status(endpoint, type, streaming, destination, active)
    if endpoint != UDP_NULL_ENDPOINT then
        if endpoint = udp_client_endpoint && type = 16 then # endpoint_udp=16
            status__udp_client_active = active
        end if

        if endpoint = udp_server_endpoint && type = 32 then # endpoint_udp_server=32
            status__udp_server_active = active
        end if
    end if
end

# Listen for UDP closures
event endpoint_closing(reason, endpoint)
    if endpoint != UDP_NULL_ENDPOINT then
        if endpoint = udp_client_endpoint && status__udp_client_active = 1 then
            status__udp_client_active = 0
            call endpoint_close(udp_client_endpoint) # required acknowledgement for the endpoint index to be reused
        end if

        if endpoint = udp_server_endpoint && status__udp_server_active = 1 then
            status__udp_server_active = 0
            call endpoint_close(udp_server_endpoint) # required acknowledgement for the endpoint index to be reused
        end if

        # If a non-NULL endpoint is closing and UDP client/server is listed as
        # NULL, then we've just *intentionally* closed it (likely before
        # opening a new one), so list them as inactive accordingly
        # (they should be inactive if NULL anyway):
        if udp_client_endpoint = UDP_NULL_ENDPOINT then
            status__udp_client_active = 0
        end if
        if udp_server_endpoint = UDP_NULL_ENDPOINT then
            status__udp_server_active = 0
        end if
    end if
end


event sme_signal_quality(rssi, hw_interface)
    status__last_rssi = rssi
end


event endpoint_syntax_error(result, endpoint)
    if endpoint = HERCULES_ENDPOINT then
        status__hercules_syntax_err_count = status__hercules_syntax_err_count + 1
    end if
end