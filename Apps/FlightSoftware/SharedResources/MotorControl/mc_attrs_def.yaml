# --- MotorControl Shared Configurations & Attributes ---
# Notes on formatting of information below:
# // THIS COMMENT FORMAT INDICATES DEPRECATION
# ~~TYPE indicates declaration of a variable without a hard coded
#        initialization value
# [ TYPE ] indicates only used for auto-generation

# -- I2C Register Definitions --
mcRegAttrs:
# Attribute definitions for each register accessible by 
    # NAME            [ STRING ]    ENUM variable name
    # // ADDR         ~~int         Manually defined in ENUM to use as Reg Index
    # //   UNCLEAR VARIABLE NAME & MANUAL DEFINITION
    # ID              ~~int         Reg Index auto generated by ENUM
    # REG_WRITE_FLAG  ~~uint        Permissions for i2c master WRITE to reg (Ground/Herc/F' commands)
    #                               If register is RW, auto generate 2^ID (defined ~ below)
    #                               If register is RO, 0
    # ?                             Used to flag and verify WRITE requests using auto generated SET_REGS_MASK
    # // CMD_SET_VAL     ~~bool        Request for command to set data
    # //   NOT AN ATTRIBUTE OF EACH I2C REGISTER--to be handled elsewhere (TBD)
    # DATA_TYPE       [ string ]    C base type
    # DATA            ~~DATA_TYPE   Declaration for DATA_TYPE data
    # DEPRECATED      [ bool ]      If the register should be ignored

  i2c_addr:
    NAME: "I2C_ADDR"            # I2C HW Address
    ID: 0                       # Always First Reg
    MASTER_WRITE: 0             # Always READ_ONLY
    DATA_TYPE: "uint8_t"        # Specified by i2c interface & dependent on motor
    DATA: ~                     # Motor specific & defined by i2c interface
    DEPRECATED: false

  target_rel_pos:
    NAME: "TARGET_REL_POS"      # Target Relative Position
    ID: ~
    MASTER_WRITE: ~
    DATA_TYPE: "int32_t"        # ticks (fwd>0, rev<0, stop=0)
    DATA: ~
    DEPRECATED: false

  target_speed:                 # ! if OVERRIDE_PROTECTED == true, sets MAX_SPEED <= POWER_BOOST_SPEED
    NAME: "TARGET_SPEED"        # Target Speed
    ID: ~
    MASTER_WRITE: ~
    DATA_TYPE: "uint8_t"        # Percent MAX_SPEED
    DATA: ~
    DEPRECATED: false

  sense_pos:                    # ! Generic Position Reading
    NAME: "SENSE_POS"           # Current internalized position
    ID: ~
    MASTER_WRITE: 0             # no manual adjustment of internalized estimate of sensor readings
    DATA_TYPE: "int32_t"        # ticks
    DATA: ~
    DEPRECATED: false

  delta_pos:
    NAME: "SENSE_DELTA_POS"     # Change in position since last reset (counting encoder ticks)
    ID: ~
    MASTER_WRITE: ~             # Reset when desired (every drive cmd, or after set of smaller drive cmds, etc)
    DATA_TYPE: "int32_t"        # ticks
    DATA: ~
    DEPRECATED: true            # only using sense_pos for now

  sense_rotor_pos:
    NAME: "ROTOR_POS"           # Position reading from rotor
    ID: ~
    MASTER_WRITE: 0             # raw sensor value
    DATA_TYPE: "int32_t"        # maybe ticks
    DATA: ~
    DEPRECATED: true            # only using sense_pos for now

  sense_vel:                    # ? Velocity implies direction, but always defined as speed
    NAME: "SENSE_VEL"           # Current internalized velocity
    ID: ~
    MASTER_WRITE: 0             # no manual adjustment of internalized estimate of sensor readings
    DATA_TYPE: "uint16_t"       # ticks/sec
    DATA: ~
    DEPRECATED: true            # ! Unused

  sense_curr:
    NAME: "SENSE_CURR"          # Current motor current reading
    ID: ~
    MASTER_WRITE: 0             # raw sensor value
    DATA_TYPE: "uint16_t"
    DATA: ~
    DEPRECATED: false

  curr_p_val:
    NAME: "CURR_P_VAL"          # P factor val of Current-based control loop
    ID: ~
    MASTER_WRITE: ~             # Tune P factor
    DATA_TYPE: "int32_t"        # Defined by MSP430's IQmathLib
    DATA: ~
    DEPRECATED: false

  curr_i_val:
    NAME: "CURR_I_VAL"          # I factor val of Current-based control loop
    ID: ~
    MASTER_WRITE: ~             # Tune I factor
    DATA_TYPE: "int32_t"        # Defined by MSP430's IQmathLib
    DATA: ~
    DEPRECATED: false

  vel_p_val:
    NAME: "VEL_P_VAL"          # P factor val of Velocity-based control loop
    ID: ~
    MASTER_WRITE: ~             # Tune P factor
    DATA_TYPE: "int32_t"        # Defined by MSP430's IQmathLib
    DATA: ~
    DEPRECATED: false

  vel_i_val:
    NAME: "CURR_I_VAL"          # I factor val of Velocity-based control loop
    ID: ~
    MASTER_WRITE: ~             # Tune I factor
    DATA_TYPE: "int32_t"        # Defined by MSP430's IQmathLib
    DATA: ~
    DEPRECATED: false

  pos_p_val:
    NAME: "VEL_P_VAL"          # P factor val of Position-based control loop
    ID: ~
    MASTER_WRITE: ~             # Tune P factor
    DATA_TYPE: "int32_t"        # Defined by MSP430's IQmathLib
    DATA: ~
    DEPRECATED: true            # No Position-based PID control option

  pos_i_val:
    NAME: "CURR_I_VAL"          # I factor val of Position-based control loop
    ID: ~
    MASTER_WRITE: ~             # Tune I factor
    DATA_TYPE: "int32_t"        # Defined by MSP430's IQmathLib
    DATA: ~
    DEPRECATED: true            # No Position-based PID control option

  accel_rate:
    NAME: "ACCEL_RATE"          # Rate of acceleration
    ID: ~
    MASTER_WRITE: ~
    DATA_TYPE: "uint16"         # ticks/sec
    DATA: ~
    DEPRECATED: false

  decel_rate:
    NAME: "DECEL_RATE"          # Rate of deceleration
    ID: ~
    MASTER_WRITE: ~
    DATA_TYPE: "uint16"         # ticks/sec
    DATA: ~
    DEPRECATED: false

  pos_sens_curr_combined:
    NAME: "HAL_BIT_REG"         # Bit 0: Hall Sensor 1
                                # Bit 1: Hall Sensor 2
                                # Bit 2: Hall Sensor 3
                                # Bit 3-7: -
    ID: ~
    MASTER_WRITE: 0             # sensor data
    DATA_TYPE: "uint8_t"
    Data: ~
    DEPRECATED: true            # unused

  command_reg:                  # ** Command Register ** 
    NAME: "CMD_REG"             # Bit 0: Execute Command
                                # Bit 1: Enable Driver
                                # Bit 2: Disable Driver
                                # Bit 3: Reset Controller
                                # Bit 4: Clear Faults -- follow-up with custom Fault Bit Mask
                                # Bit 5: OVERRIDE PROTECTED
                                # Bit 6: -
                                # Bit 7: -
    ID: ~
    MASTER_WRITE: ~
    DATA_TYPE: "uint8_t"
    Data: ~
    DEPRECATED: false

  status_reg:                   # ** Status Register **
    NAME: "STATUS_REG"          # Bit 0: Fault
                                # Bit 1: Idle
                                # Bit 2: Armed   (Driver Enabled & Waiting)
                                # Bit 3: Standby (Ready to Run)
                                # Bit 4: Running
                                # Bit 5: Target Reached
                                # Bit 6: -
                                # Bit 7: -
    ID: ~
    MASTER_WRITE: 0
    DATA_TYPE: "uint8_t"
    Data: ~
    DEPRECATED: false

  fault_reg:                    # ** Fault Register **
                                # ! if OVERRIDE_PROTECTED, update internal Fault Bit Mask
    NAME: "FAULT_REG"           # Bit 0: Driver Fault / Overcurrent
                                # Bit 1: Motor Stall (no pos change/timeout)
                                # Bit 2: Unexpected State (did not follow state machine/failed on state's safety check)
                                # Bit 3: Position Sensor Fault
                                # Bit 4: Bad/Unexpected Config Values
                                # Bit 5: Bad/Unexpected i2c message
                                # Bit 6: Watchdog Exception/Error
                                # Bit 7: Other Unexpected/Unknown Error
    ID: ~
    MASTER_WRITE: 0             # Clear through Command "Clear Faults" using a bit-mask
    DATA_TYPE: "uint8_t"
    Data: ~
    DEPRECATED: false
    


# -- Motor Definitions --
motors: # McAttrs[]
  # NAME      - [ STRING ]            Maps to SBC component ID
  # ? I2C_ADDR  - uint8_t               Hardware defined
  #                                   Same as I2C_REGS[I2C_ADDR]
  # ID        ~~int                   Reg Index auto generated by ENUM
  # LOC       - [int, int]            Physical location wrt Rover orientation [Y,Z]
  #                                   [ front:0 | back:1  ,  left:0 | right:1 ]
  #                                   REFERENCE: Antenna is FRONT RIGHT, [0,1]
  # ? LOC_ID    ~~int                   Auto generated based on physical location
  #                                   0xYZ = LOC[0]*2 + LOC[1]
  # I2C_REGS  ~~mcRegAttrs[NUM_REGS]  Array of i2c register data
  # ? SET_REGS_MASK   ~~bool[NUM_REGS] | uint    Mask to verify flags
  # ? CMD_SET_REGS    ~~bool[NUM_REGS] | uint    Flags for ground command SET_VAL requests

  # - Motor A
  motor_A:
    NAME: "MOTOR_A"
    I2C_ADDR: 0x48
    ID: ~
    LOC: [0,0]      # FRONT LEFT
    LOC_ID: ~
    I2C_REGS: ~
    CMD_SET_REGS: ~

  motor_B:
    NAME: "MOTOR_B"
    I2C_ADDR: 0x49
    ID: ~
    LOC: [0,1]      # FRONT RIGHT
    LOC_ID: ~
    I2C_REGS: ~
    CMD_SET_REGS: ~
