Nose Test Suite ReadMe
""""""""""""""""""""""

Test Suite requires:

nose
pexpect

pip install nose
pip install pexpect

nose:    https://nose.readthedocs.org/en/latest/s
pexpect: https://pexpect.readthedocs.org/en/latest/

------------------------------------ Quick Reference  -----------------------------------
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Run the all tests within the test suite:
    - cd to Autocoders/Python/bin
    - run:
        python runNose.py

View supported applications:
    - cd to Autocoders/Python/bin
    - run:
        python runNose.py -h

Run specific test:
    - cd to Autocoders/Python/bin
    - run:
        python runNose.py Async_Input_Test

(This will run all Async_Input_Tests within the test suite

Run app specific test:
    - cd to Autocoders/Python/bin
    - run:
        python runNose.py active_tester.Async_Input_Test

Accumulate tests:
    - cd to Autocoders/Python/bin
    - run:
        python runNose.py Port_Send_Test Sync_Input_Test

(Runs all Port_Send_Test's and all Sync_Input_Test's)

Add an application to the test suite:
    1. Add a test module to an application: (2)
        - Copy TestTemplate.py into the application directory
        - Perform name changes
    2. Implement pexpect_config.xml (3)
    3. Register application in runNose.py (5)

Create a new application:
    -Copy the AppTemplate folder into Autocoders/Python/test
    - Perform name changes:
        1. Root folder name
        3. Makefile
        4. mod.mk files in root AND test/ut
        5. runtest_DARWIN to runtest_LINUX if using linux
        6. Change contents of runtest_DARWIN
    - Implement pexpect_config.xml
    - Add application to mk/configs/modules/modules.mk
    - Copy executable cpp file into test/ut
    - Update test/ut/mod.mk
    NOTE: Only declare executable cpp in test/ut/mod.mk
          Do not declate in root mod.mk
    - Register application in Autocoders/Python/runNose.py


----------------------------------- Detailed Reference -----------------------------------
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Contents
''''''''
(1)  Test Suite Overview
(1b) Test Suite Elements
(2)  Adding a test module to an application
(3)  Implementing the test module with pexpect
(4)  Testing the test module
(5)  Registering the application in runNose


'''''''''''''''''''''''
(1) Test Suite Overview
'''''''''''''''''''''''

A test suite is created when runNose.py is executed. Nose enters each registered application and searches
for modules that ends with '_test'. Matched modules are added to the test suite. After all test modules
are collected the the test suite is run.

Test module structure:

/Autocoders/Python/test
    /active_tester
        active_nose_test.py
    /app1
        app1_nose_test.py
    /app2
        app2_nose_test.py


''''''''''''''''''''''''
(1b) Test Suite Elements
''''''''''''''''''''''''

Test Module:                A nose test module that resides within an application directory.
                            It must end with '_test'

Test Suite:                 All collected test modules

Supported Application:      An application that:
                            1. Has implemented a test module (3)
                            2. Is registered in runNose (5)


runNose:                    Test Suite runner located in Autocoders/Python/bin


''''''''''''''''''''''''''''''''''''''''''
(2) Adding a test module to an application
''''''''''''''''''''''''''''''''''''''''''

- Copy Autocoders/Python/TestTemplate.py into an application.
- Perform the required name changes
- Implement pexpect_config.xml
- Register the application in runNose (4)


'''''''''''''''''''''''''''''''''''''''''''
(3) Implementing a test module with pexpect
'''''''''''''''''''''''''''''''''''''''''''

pexpect can be used to validate runtime outputs of topology executables.
pexpect anticipates and responds to the stdout of the executable.
If output is not recognized pexpect will assert False.

The following is an example from the test module within  Autocoders/Python/test/active_tester/

## test methods are collected alphabetically. When adding new test methods
## define method names according to current order
## Ex:
## a_make_test() <--- Default Test
## b_make_ut()   <--- Default Test
## c_test()
## d_new_test()

def c_Sync_InputPortF32_test():
    ## Set input
    f = "3.14"

    ## Match f with expected output
    expect_string = """.*Comp_A Recieved Input: {num}.*""".format(num=f)
    try:
        ## Spawn executable
        p = pexpect.spawn("make run_ut")
        p.expect(".*Enter g to go or q to quit:.*", timeout=3)
        p.sendline("g")
        p.expect(".*Enter u for unsigned-int and f for float:.*", timeout=3)
        p.sendline("f")
        p.expect(".*Enter a float to send to CompA:.*")
        p.sendline(f)
        p.expect(expect_string, timeout=3)
        p.sendline("q")

        ## If there was no timeout the pexpect test passed
        assert True

        ## A timeout occurs when pexpect cannot match the executable
        ## output with the designated expectation. In this case the
        ## key expectation is p.expect(expect_string, timeout=3)
        ## which tests what the method name describes
    except TIMEOUT as e:
        print "Timeout Error. Expected Value not returned."
        print "-------Program Output-------"
        print p.before
        print "-------Expected Output-------"
        print e.get_trace()
        assert False

*
Implement expects and sends in pexpect_config.xml.
*

''''''''''''''''''''''''''''''''
(4) Testing the test application
''''''''''''''''''''''''''''''''

To test if the test module is running as desired run the command from the application directory:
    nosetests

This will run the test module and let you know if the pexpect test's are functional.

pexpect:
    https://pexpect.readthedocs.org/en/latest/


'''''''''''''''''''''''''''''''''''''''''
(5) Registering an application in runNose
'''''''''''''''''''''''''''''''''''''''''

- Add the appllication's attributes to the getConstants() method in runNose.py:


Line: 9

## Designate test applications here
def generate_constants():
    ## Every application test suite will have these
    base_tests = dict()
    base_tests['Make_Test'] = "a_make_test"
    base_tests['Make_Ut_Test'] = "b_make_ut_test"

    constants_dict = dict()

    ## Define apps here
    ## All supported applications must have the base tests
    constants_dict['active_tester'] = base_tests.copy()
    constants_dict['app1'] = base_tests.copy()
    constants_dict['app2'] = base_tests.copy()
    constants_dict['cnt_only'] = base_tests.copy()


    ## Define test cases and their descriptions here
    ## Define 'test_module' as the module in the application
    ## Define the test type as the method name within the test module
    ## Test type needs to end with '_TEST'
    constants_dict['active_tester']['test_file'] = "active_nose_test.py"
    constants_dict['active_tester']['Sync_Input_Test'] = "c_Sync_InputPortF32_test"
    constants_dict['active_tester']['Async_Input_Test'] = "d_Async_InputPortU32_test"

    constants_dict['app1']['test_file'] = "app1_nose_test.py"
    constants_dict['app1']['Port_Send_Test'] = "c_port_send_test"

    constants_dict['app2']['test_file'] = "app2_nose_test.py"
    constants_dict['app2']['Void_Send_Test'] = "c_void_send_test"
    constants_dict['app2']['Port_Send_Test'] = "d_port_send_test"

    constants_dict['cnt_only']['test_file'] = "cnt_only_nose_test.py"
    constants_dict['cnt_only']['Port_Send_Test'] = "c_port_send_test"


- Registering an application adds the application and it's tests to the supported applications list.

Supported applications:
    1. Are displayed when runNose is run with the help flag.
    2. Can be used as arguments for runNose

