@startuml Iris Fprime WF121 Message Parsing State Machine
' Control flow diagram for passing through the states in `Wf121Parser::Mpsm`:
' Each step through the decision process is taken when the FreeRTOS Queue tells 
' the Task a byte has been received.
' Timeouts proceed directly back to the start (just not a clean way to show that with PlantUML)

!theme crt-amber
(*) --> "Load 1 Byte"
"Load 1 Byte" -up->[bytes_loaded < 4] "Load 1 Byte"

if "bytes_loaded >= 4" then
    note left: Check Header
    if "good header" then
        -->[Valid BGAPI] "Wait for rest of BGAPI"
        "Wait for rest of BGAPI" -up->[bytes_loaded < len] "Wait for rest of BGAPI"
        "Wait for rest of BGAPI" -left->[time_since_hdr > timeout] "Restart_BGP_Timeout"
        
        "Wait for rest of BGAPI"-->[ bytes_loaded = len] "Parse BGAPI"
        -->[Fire BGAPI Callback then...](*)
    else
        -->[Valid DM] "Wait for DM len byte"
        "Wait for DM len byte"-->[ loaded 1 B] "Wait for rest of DM"
        "Wait for DM len byte" -right->[\nlen > max_possible_length] "Restart_Bad_DM_Length"
        "Wait for DM len byte" -right->[time_since_hdr > timeout] "Restart_DML_Timeout"

        "Wait for rest of DM" -up->[bytes_loaded < len] "Wait for rest of DM"
        "Wait for rest of DM" -right->[time_since_hdr > timeout] "Restart_DMP_Timeout"
        "Wait for rest of DM" -->[ bytes_loaded = len] "Parse DM"
        -->[Fire DM Callback then...](*)
        note right: Done. Back to Start
    endif
else
    -up->[ Bad Header] "Dequeue 1 Byte."
    -up->[Proceed immediately\n(don't wait).] "Load 1 Byte"
endif

@enduml