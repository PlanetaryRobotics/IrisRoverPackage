

// Block here if a rx is already underway
while (--tries && !sciIsRxReady(comp->m_sci))
    ;

// Blocking until timeout or data available
stat = sciReceiveWithTimeout(comp->m_sci,
                             buff.getsize(),
                             reinterpret_cast<unsigned char *>(buff.getdata()),
                             0xffffffff); /*Max timeout */

Might have to make sure DMA isn't on for SCI interface (WF121), only SCILIN (WD)

    sciREG->SETINT = (uint32)SCI_RX_INT; (?) from  scilinREG->SETINT = (uint32) SCI_RX_INT;

Check that CTS / RTS lines up correctly in schematic.

                 // How do we handle getting out of sync?

!! Wait for command response before sending anything else. (or wait for timeout -- if we fail to get a response for too many commands in a row, ask WD reset the radio)
// create system for flagginf=g which callback to expect next
// Use this to our advantage to make sure sends go through (keep them around and retry X times if fail)

// Add callbacks to catch exceptions/warnings like `system_sw_exception`

// ! NOTE:
// SCI ISR gets called *AFTER* data has been added to whatever buffer you signaled in sciReceive

// CREATE a separate header + packet scheme for BGScript -> UART comms (since it doesn't seem like there's a way to just pass a BGAPI packet with a message)
// Make sure this header will be mutually exclusive with BGApiHeader (no overlapping bits).

// Test UART sync-loss by having radio send some garbage to the UART endpoint (with `send_endpoint` not `hercules_direct_messge_ascii`) and make sure it still works.

// Allow for querying Herc from ground for all info it has about Radio (e.g. last received error).

// ! TODO: (WORKING-HERE): [CWC] Process callback and dispatch to appropriate NetworkInterface functions. Then:
// - Finish DirectMessageDriver.
// - Update state inside network interface
// - Create callback hooks for BGAPI CBs we care about (incl. Signal Quality)
// - Create Queue to pipe datagrams from callbacks to network manager (or whoever else).
//    https://www.freertos.org/Inter-Task-Communication.html
//    https://www.digikey.com/en/maker/projects/introduction-to-rtos-solution-to-part-5-freertos-queue-example/72d2b361f7b94e0691d947c7c29a03c9
// - Reset radio if no heartbeat for some multiple of expected time?
//
// - Lastly go back and review diffs from checkpoint commit (specifically notifications.c)
//    - Make sure those changes match with the current DMA-ISR system.
// ^ Copy this over to _wifi_todo.md

// ** Check fixed strings in DirectMessageDriver and heartbeatMessage structure

// update transmitCommand
//  - Add timeout to m_processingCmd (also mutex it)
// add mutex for BGAPI information.
// Update RadioDriver callback len (now only needs to be 1 long)

// Look into how NM used to tell WD to reset the Radio (and do that for NM-WD comms)

// ! TODO: (WORKING-HERE) Next thing to do is bring in all the cb_ callbacks from CRNM into NI.