        -:    0:Source:/home/tim/source/isf/Svc/ActiveLogger/ActiveLoggerComponentAc.cpp
        -:    0:Programs:2
        -:    1:// ====================================================================== 
        -:    2:// \title  ActiveLoggerComponentAc.hpp
        -:    3:// \author Auto-generated
        -:    4:// \brief  cpp file for ActiveLogger component base class
        -:    5://
        -:    6:// \copyright
        -:    7:// Copyright 2009-2015, by the California Institute of Technology.
        -:    8:// ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9:// acknowledged.
        -:   11:// 
        -:   18:// ====================================================================== 
        -:   19:
        -:   20:#include <stdio.h>
        -:   21:#include <Fw/Cfg/Config.hpp>
        -:   22:#include <Svc/ActiveLogger/ActiveLoggerComponentAc.hpp>
        -:   23:#include <Fw/Types/Assert.hpp>
        -:   24:#if FW_ENABLE_TEXT_LOGGING
        -:   25:#include <Fw/Types/EightyCharString.hpp>
        -:   26:#endif
        -:   27:
        -:   28:
        -:   29:namespace Svc {
        -:   30:
        -:   31:  // ----------------------------------------------------------------------
        -:   32:  // Anonymous namespace to prevent name collisions
        -:   33:  // ----------------------------------------------------------------------
        -:   34:
        -:   35:  namespace {
        -:   36:
        -:   37:    typedef enum {
        -:   38:      ACTIVELOGGER_COMPONENT_EXIT = Fw::ActiveComponentBase::ACTIVE_COMPONENT_EXIT,
        -:   39:      CMD_ALOG_DUMP_EVENT_LOG,
        -:   40:      CMD_ALOG_SET_ID_FILTER,
        -:   41:      CMD_ALOG_DUMP_FILTER_STATE,
        -:   42:      INT_IF_LOQQUEUE
        -:   43:    } MsgTypeEnum;
        -:   44:
        -:   45:    // Get the max size by doing a union of the input port serialization sizes.
        -:   46:
        -:   47:    typedef union {
        -:   48:      BYTE cmdPort[Fw::InputCmdPort::SERIALIZED_SIZE];
        -:   49:      // Size of loqQueue argument list
        -:   50:      BYTE loqQueueIntIfSize[
        -:   51:        sizeof(FwEventIdType) +
        -:   52:        Fw::Time::SERIALIZED_SIZE +
        -:   53:        sizeof(FwEnumStoreType) +
        -:   54:        Fw::LogBuffer::SERIALIZED_SIZE +
        -:   55:        0
        -:   56:      ];
        -:   57:    } BuffUnion;
        -:   58:
        -:   59:    // Define a message buffer class large enough to handle all the
        -:   60:    // asynchronous inputs to the component
        -:   61:
     1068:   62:    class ComponentIpcSerializableBuffer : 
        -:   63:      public Fw::SerializeBufferBase
        -:   64:    {
        -:   65:
        -:   66:      public:
        -:   67:
        -:   68:        enum {
        -:   69:          // Max. message size = size of data + message id + port
        -:   70:          SERIALIZATION_SIZE =
        -:   71:            sizeof(BuffUnion) +
        -:   72:            sizeof(NATIVE_INT_TYPE) +
        -:   73:            sizeof(NATIVE_INT_TYPE)
        -:   74:        };
        -:   75:
     2640:   76:        NATIVE_UINT_TYPE getBuffCapacity(void) const {
     2640:   77:          return sizeof(m_buff);
        -:   78:        }
        -:   79:
    18657:   80:        U8* getBuffAddr(void) {
    18657:   81:          return m_buff;
        -:   82:        }
        -:   83:
      267:   84:        const U8* getBuffAddr(void) const {
      267:   85:          return m_buff;
        -:   86:        }
        -:   87:
        -:   88:      private:
        -:   89:        // Should be the max of all the input ports serialized sizes...
        -:   90:        U8 m_buff[SERIALIZATION_SIZE];
        -:   91:
        -:   92:    };
        -:   93:
        -:   94:  }
        -:   95:
        -:   96:  // ----------------------------------------------------------------------
        -:   97:  // Getters for numbers of input ports
        -:   98:  // ----------------------------------------------------------------------
        -:   99:
        8:  100:  Fw::InputLogPort *ActiveLoggerComponentBase ::
        -:  101:    get_LogRecv_InputPort(NATIVE_INT_TYPE portNum)
        -:  102:  {
        8:  103:    FW_ASSERT(portNum < this->getNum_LogRecv_InputPorts(),static_cast<AssertArg>(portNum));
        8:  104:    return &this->m_LogRecv_InputPort[portNum];
        -:  105:  }
        -:  106:
        8:  107:  Fw::InputCmdPort *ActiveLoggerComponentBase ::
        -:  108:    get_CmdDisp_InputPort(NATIVE_INT_TYPE portNum)
        -:  109:  {
        8:  110:    FW_ASSERT(portNum < this->getNum_CmdDisp_InputPorts(),static_cast<AssertArg>(portNum));
        8:  111:    return &this->m_CmdDisp_InputPort[portNum];
        -:  112:  }
        -:  113:
        -:  114:  // ----------------------------------------------------------------------
        -:  115:  // Typed connectors for output ports
        -:  116:  // ----------------------------------------------------------------------
        -:  117:
        8:  118:  void ActiveLoggerComponentBase ::
        -:  119:    set_PktSend_OutputPort(
        -:  120:        NATIVE_INT_TYPE portNum,
        -:  121:        Fw::InputComPort* port
        -:  122:    )
        -:  123:  {
        8:  124:    FW_ASSERT(portNum < this->getNum_PktSend_OutputPorts(),static_cast<AssertArg>(portNum));
        8:  125:    this->m_PktSend_OutputPort[portNum].addCallPort(port);
        8:  126:  }
        -:  127:
        8:  128:  void ActiveLoggerComponentBase ::
        -:  129:    set_FatalAnnounce_OutputPort(
        -:  130:        NATIVE_INT_TYPE portNum,
        -:  131:        Svc::InputFatalEventPort* port
        -:  132:    )
        -:  133:  {
        8:  134:    FW_ASSERT(portNum < this->getNum_FatalAnnounce_OutputPorts(),static_cast<AssertArg>(portNum));
        8:  135:    this->m_FatalAnnounce_OutputPort[portNum].addCallPort(port);
        8:  136:  }
        -:  137:
        8:  138:  void ActiveLoggerComponentBase ::
        -:  139:    set_CmdStatus_OutputPort(
        -:  140:        NATIVE_INT_TYPE portNum,
        -:  141:        Fw::InputCmdResponsePort* port
        -:  142:    )
        -:  143:  {
        8:  144:    FW_ASSERT(portNum < this->getNum_CmdStatus_OutputPorts(),static_cast<AssertArg>(portNum));
        8:  145:    this->m_CmdStatus_OutputPort[portNum].addCallPort(port);
        8:  146:  }
        -:  147:
    #####:  148:  void ActiveLoggerComponentBase ::
        -:  149:    set_CmdReg_OutputPort(
        -:  150:        NATIVE_INT_TYPE portNum,
        -:  151:        Fw::InputCmdRegPort* port
        -:  152:    )
        -:  153:  {
    #####:  154:    FW_ASSERT(portNum < this->getNum_CmdReg_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:  155:    this->m_CmdReg_OutputPort[portNum].addCallPort(port);
    #####:  156:  }
        -:  157:
    #####:  158:  void ActiveLoggerComponentBase ::
        -:  159:    set_Time_OutputPort(
        -:  160:        NATIVE_INT_TYPE portNum,
        -:  161:        Fw::InputTimePort* port
        -:  162:    )
        -:  163:  {
    #####:  164:    FW_ASSERT(portNum < this->getNum_Time_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:  165:    this->m_Time_OutputPort[portNum].addCallPort(port);
    #####:  166:  }
        -:  167:
        8:  168:  void ActiveLoggerComponentBase ::
        -:  169:    set_Log_OutputPort(
        -:  170:        NATIVE_INT_TYPE portNum,
        -:  171:        Fw::InputLogPort* port
        -:  172:    )
        -:  173:  {
        8:  174:    FW_ASSERT(portNum < this->getNum_Log_OutputPorts(),static_cast<AssertArg>(portNum));
        8:  175:    this->m_Log_OutputPort[portNum].addCallPort(port);
        8:  176:  }
        -:  177:
        -:  178:#if FW_ENABLE_TEXT_LOGGING == 1
        8:  179:  void ActiveLoggerComponentBase ::
        -:  180:    set_LogText_OutputPort(
        -:  181:        NATIVE_INT_TYPE portNum,
        -:  182:        Fw::InputLogTextPort* port
        -:  183:    )
        -:  184:  {
        8:  185:    FW_ASSERT(portNum < this->getNum_LogText_OutputPorts(),static_cast<AssertArg>(portNum));
        8:  186:    this->m_LogText_OutputPort[portNum].addCallPort(port);
        8:  187:  }
        -:  188:#endif
        -:  189:
        -:  190:  // ----------------------------------------------------------------------
        -:  191:  // Serialization connectors for output ports
        -:  192:  // ----------------------------------------------------------------------
        -:  193:
        -:  194:#if FW_PORT_SERIALIZATION
        -:  195:
    #####:  196:  void ActiveLoggerComponentBase ::
        -:  197:    set_PktSend_OutputPort(
        -:  198:        NATIVE_INT_TYPE portNum,
        -:  199:        Fw::InputSerializePort *port
        -:  200:    )
        -:  201:  {
    #####:  202:    FW_ASSERT(portNum < this->getNum_PktSend_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:  203:    return this->m_PktSend_OutputPort[portNum].registerSerialPort(port);
        -:  204:  }
        -:  205:
    #####:  206:  void ActiveLoggerComponentBase ::
        -:  207:    set_FatalAnnounce_OutputPort(
        -:  208:        NATIVE_INT_TYPE portNum,
        -:  209:        Fw::InputSerializePort *port
        -:  210:    )
        -:  211:  {
    #####:  212:    FW_ASSERT(portNum < this->getNum_FatalAnnounce_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:  213:    return this->m_FatalAnnounce_OutputPort[portNum].registerSerialPort(port);
        -:  214:  }
        -:  215:
    #####:  216:  void ActiveLoggerComponentBase ::
        -:  217:    set_CmdStatus_OutputPort(
        -:  218:        NATIVE_INT_TYPE portNum,
        -:  219:        Fw::InputSerializePort *port
        -:  220:    )
        -:  221:  {
    #####:  222:    FW_ASSERT(portNum < this->getNum_CmdStatus_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:  223:    return this->m_CmdStatus_OutputPort[portNum].registerSerialPort(port);
        -:  224:  }
        -:  225:
    #####:  226:  void ActiveLoggerComponentBase ::
        -:  227:    set_CmdReg_OutputPort(
        -:  228:        NATIVE_INT_TYPE portNum,
        -:  229:        Fw::InputSerializePort *port
        -:  230:    )
        -:  231:  {
    #####:  232:    FW_ASSERT(portNum < this->getNum_CmdReg_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:  233:    return this->m_CmdReg_OutputPort[portNum].registerSerialPort(port);
        -:  234:  }
        -:  235:
    #####:  236:  void ActiveLoggerComponentBase ::
        -:  237:    set_Time_OutputPort(
        -:  238:        NATIVE_INT_TYPE portNum,
        -:  239:        Fw::InputSerializePort *port
        -:  240:    )
        -:  241:  {
    #####:  242:    FW_ASSERT(portNum < this->getNum_Time_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:  243:    return this->m_Time_OutputPort[portNum].registerSerialPort(port);
        -:  244:  }
        -:  245:
    #####:  246:  void ActiveLoggerComponentBase ::
        -:  247:    set_Log_OutputPort(
        -:  248:        NATIVE_INT_TYPE portNum,
        -:  249:        Fw::InputSerializePort *port
        -:  250:    )
        -:  251:  {
    #####:  252:    FW_ASSERT(portNum < this->getNum_Log_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:  253:    return this->m_Log_OutputPort[portNum].registerSerialPort(port);
        -:  254:  }
        -:  255:
        -:  256:#if FW_ENABLE_TEXT_LOGGING == 1
    #####:  257:  void ActiveLoggerComponentBase ::
        -:  258:    set_LogText_OutputPort(
        -:  259:        NATIVE_INT_TYPE portNum,
        -:  260:        Fw::InputSerializePort *port
        -:  261:    )
        -:  262:  {
    #####:  263:    FW_ASSERT(portNum < this->getNum_LogText_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:  264:    return this->m_LogText_OutputPort[portNum].registerSerialPort(port);
        -:  265:  }
        -:  266:#endif
        -:  267:
        -:  268:#endif
        -:  269:
        -:  270:  // ----------------------------------------------------------------------
        -:  271:  // Command registration
        -:  272:  // ----------------------------------------------------------------------
        -:  273:
    #####:  274:  void ActiveLoggerComponentBase ::
        -:  275:    regCommands(void)
        -:  276:  {
    #####:  277:    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    #####:  278:    this->m_CmdReg_OutputPort[0].invoke(OPCODE_ALOG_SET_EVENT_REPORT_FILTER);
    #####:  279:    this->m_CmdReg_OutputPort[0].invoke(OPCODE_ALOG_SET_EVENT_SEND_FILTER);
    #####:  280:    this->m_CmdReg_OutputPort[0].invoke(OPCODE_ALOG_DUMP_EVENT_LOG);
    #####:  281:    this->m_CmdReg_OutputPort[0].invoke(OPCODE_ALOG_SET_ID_FILTER);
    #####:  282:    this->m_CmdReg_OutputPort[0].invoke(OPCODE_ALOG_DUMP_FILTER_STATE);
    #####:  283:  }
        -:  284:
        -:  285:  // ----------------------------------------------------------------------
        -:  286:  // Component construction, initialization, and destruction
        -:  287:  // ----------------------------------------------------------------------
        -:  288:
        8:  289:  ActiveLoggerComponentBase ::
        -:  290:#if FW_OBJECT_NAMES == 1
        -:  291:    ActiveLoggerComponentBase(const char* compName) :
        8:  292:      Fw::ActiveComponentBase(compName)
        -:  293:#else
        -:  294:    ActiveLoggerComponentBase() :
        -:  295:      Fw::ActiveComponentBase()
        -:  296:#endif
        -:  297:  {
        -:  298:
        8:  299:  }
        -:  300:
        8:  301:  void ActiveLoggerComponentBase ::
        -:  302:    init(
        -:  303:        NATIVE_INT_TYPE queueDepth,
        -:  304:        NATIVE_INT_TYPE instance
        -:  305:    )
        -:  306:  {
        -:  307:
        -:  308:    // Initialize base class
        8:  309:    Fw::ActiveComponentBase::init(instance);
        -:  310:
        -:  311:    // Connect input port LogRecv
       32:  312:    for (
        8:  313:        NATIVE_INT_TYPE port = 0;
       16:  314:        port < this->getNum_LogRecv_InputPorts();
        -:  315:        port++
        -:  316:    ) {
        -:  317:
        8:  318:      this->m_LogRecv_InputPort[port].init();
        -:  319:      this->m_LogRecv_InputPort[port].addCallComp(
        -:  320:          this,
        -:  321:          m_p_LogRecv_in
        8:  322:      );
        8:  323:      this->m_LogRecv_InputPort[port].setPortNum(port);
        -:  324:
        -:  325:#if FW_OBJECT_NAMES == 1
        -:  326:      char portName[80];
        -:  327:      (void) snprintf(
        -:  328:          portName,
        -:  329:          sizeof(portName),
        -:  330:          "%s_LogRecv_InputPort[%d]",
        -:  331:          this->m_objName,
        -:  332:          port
        8:  333:      );
        8:  334:      this->m_LogRecv_InputPort[port].setObjName(portName);
        -:  335:#endif
        -:  336:
        -:  337:    }
        -:  338:
        -:  339:    // Connect input port CmdDisp
       32:  340:    for (
        8:  341:        NATIVE_INT_TYPE port = 0;
       16:  342:        port < this->getNum_CmdDisp_InputPorts();
        -:  343:        port++
        -:  344:    ) {
        -:  345:
        8:  346:      this->m_CmdDisp_InputPort[port].init();
        -:  347:      this->m_CmdDisp_InputPort[port].addCallComp(
        -:  348:          this,
        -:  349:          m_p_CmdDisp_in
        8:  350:      );
        8:  351:      this->m_CmdDisp_InputPort[port].setPortNum(port);
        -:  352:
        -:  353:#if FW_OBJECT_NAMES == 1
        -:  354:      char portName[80];
        -:  355:      (void) snprintf(
        -:  356:          portName,
        -:  357:          sizeof(portName),
        -:  358:          "%s_CmdDisp_InputPort[%d]",
        -:  359:          this->m_objName,
        -:  360:          port
        8:  361:      );
        8:  362:      this->m_CmdDisp_InputPort[port].setObjName(portName);
        -:  363:#endif
        -:  364:
        -:  365:    }
        -:  366:
        -:  367:    // Initialize output port PktSend
       32:  368:    for (
        8:  369:        NATIVE_INT_TYPE port = 0;
       16:  370:        port < this->getNum_PktSend_OutputPorts();
        -:  371:        port++
        -:  372:    ) {
        8:  373:      this->m_PktSend_OutputPort[port].init();
        -:  374:
        -:  375:#if FW_OBJECT_NAMES == 1
        -:  376:      char portName[80];
        -:  377:      (void) snprintf(
        -:  378:          portName,
        -:  379:          sizeof(portName),
        -:  380:          "%s_PktSend_OutputPort[%d]",
        -:  381:          this->m_objName,
        -:  382:          port
        8:  383:      );
        8:  384:      this->m_PktSend_OutputPort[port].setObjName(portName);
        -:  385:#endif
        -:  386:
        -:  387:    }
        -:  388:
        -:  389:    // Initialize output port FatalAnnounce
       32:  390:    for (
        8:  391:        NATIVE_INT_TYPE port = 0;
       16:  392:        port < this->getNum_FatalAnnounce_OutputPorts();
        -:  393:        port++
        -:  394:    ) {
        8:  395:      this->m_FatalAnnounce_OutputPort[port].init();
        -:  396:
        -:  397:#if FW_OBJECT_NAMES == 1
        -:  398:      char portName[80];
        -:  399:      (void) snprintf(
        -:  400:          portName,
        -:  401:          sizeof(portName),
        -:  402:          "%s_FatalAnnounce_OutputPort[%d]",
        -:  403:          this->m_objName,
        -:  404:          port
        8:  405:      );
        8:  406:      this->m_FatalAnnounce_OutputPort[port].setObjName(portName);
        -:  407:#endif
        -:  408:
        -:  409:    }
        -:  410:
        -:  411:    // Initialize output port CmdStatus
       32:  412:    for (
        8:  413:        NATIVE_INT_TYPE port = 0;
       16:  414:        port < this->getNum_CmdStatus_OutputPorts();
        -:  415:        port++
        -:  416:    ) {
        8:  417:      this->m_CmdStatus_OutputPort[port].init();
        -:  418:
        -:  419:#if FW_OBJECT_NAMES == 1
        -:  420:      char portName[80];
        -:  421:      (void) snprintf(
        -:  422:          portName,
        -:  423:          sizeof(portName),
        -:  424:          "%s_CmdStatus_OutputPort[%d]",
        -:  425:          this->m_objName,
        -:  426:          port
        8:  427:      );
        8:  428:      this->m_CmdStatus_OutputPort[port].setObjName(portName);
        -:  429:#endif
        -:  430:
        -:  431:    }
        -:  432:
        -:  433:    // Initialize output port CmdReg
       32:  434:    for (
        8:  435:        NATIVE_INT_TYPE port = 0;
       16:  436:        port < this->getNum_CmdReg_OutputPorts();
        -:  437:        port++
        -:  438:    ) {
        8:  439:      this->m_CmdReg_OutputPort[port].init();
        -:  440:
        -:  441:#if FW_OBJECT_NAMES == 1
        -:  442:      char portName[80];
        -:  443:      (void) snprintf(
        -:  444:          portName,
        -:  445:          sizeof(portName),
        -:  446:          "%s_CmdReg_OutputPort[%d]",
        -:  447:          this->m_objName,
        -:  448:          port
        8:  449:      );
        8:  450:      this->m_CmdReg_OutputPort[port].setObjName(portName);
        -:  451:#endif
        -:  452:
        -:  453:    }
        -:  454:
        -:  455:    // Initialize output port Time
       32:  456:    for (
        8:  457:        NATIVE_INT_TYPE port = 0;
       16:  458:        port < this->getNum_Time_OutputPorts();
        -:  459:        port++
        -:  460:    ) {
        8:  461:      this->m_Time_OutputPort[port].init();
        -:  462:
        -:  463:#if FW_OBJECT_NAMES == 1
        -:  464:      char portName[80];
        -:  465:      (void) snprintf(
        -:  466:          portName,
        -:  467:          sizeof(portName),
        -:  468:          "%s_Time_OutputPort[%d]",
        -:  469:          this->m_objName,
        -:  470:          port
        8:  471:      );
        8:  472:      this->m_Time_OutputPort[port].setObjName(portName);
        -:  473:#endif
        -:  474:
        -:  475:    }
        -:  476:
        -:  477:    // Initialize output port Log
       32:  478:    for (
        8:  479:        NATIVE_INT_TYPE port = 0;
       16:  480:        port < this->getNum_Log_OutputPorts();
        -:  481:        port++
        -:  482:    ) {
        8:  483:      this->m_Log_OutputPort[port].init();
        -:  484:
        -:  485:#if FW_OBJECT_NAMES == 1
        -:  486:      char portName[80];
        -:  487:      (void) snprintf(
        -:  488:          portName,
        -:  489:          sizeof(portName),
        -:  490:          "%s_Log_OutputPort[%d]",
        -:  491:          this->m_objName,
        -:  492:          port
        8:  493:      );
        8:  494:      this->m_Log_OutputPort[port].setObjName(portName);
        -:  495:#endif
        -:  496:
        -:  497:    }
        -:  498:
        -:  499:    // Initialize output port LogText
        -:  500:#if FW_ENABLE_TEXT_LOGGING == 1
       32:  501:    for (
        8:  502:        NATIVE_INT_TYPE port = 0;
       16:  503:        port < this->getNum_LogText_OutputPorts();
        -:  504:        port++
        -:  505:    ) {
        8:  506:      this->m_LogText_OutputPort[port].init();
        -:  507:
        -:  508:#if FW_OBJECT_NAMES == 1
        -:  509:      char portName[80];
        -:  510:      (void) snprintf(
        -:  511:          portName,
        -:  512:          sizeof(portName),
        -:  513:          "%s_LogText_OutputPort[%d]",
        -:  514:          this->m_objName,
        -:  515:          port
        8:  516:      );
        8:  517:      this->m_LogText_OutputPort[port].setObjName(portName);
        -:  518:#endif
        -:  519:
        -:  520:    }
        -:  521:#endif
        -:  522:
        -:  523:    Os::Queue::QueueStatus qStat =
        -:  524:    this->createQueue(
        -:  525:        queueDepth,
        -:  526:        ComponentIpcSerializableBuffer::SERIALIZATION_SIZE
        8:  527:    );
        -:  528:    FW_ASSERT(
        -:  529:        Os::Queue::QUEUE_OK == qStat,
        -:  530:        static_cast<AssertArg>(qStat)
        8:  531:    );
        -:  532:
        8:  533:  }
        -:  534:
        8:  535:  ActiveLoggerComponentBase::
        8:  536:    ~ActiveLoggerComponentBase() {
        -:  537:
        8:  538:  }
        -:  539:
        -:  540:  // ----------------------------------------------------------------------
        -:  541:  // Invocation functions for output ports
        -:  542:  // ----------------------------------------------------------------------
        -:  543:
      162:  544:  void ActiveLoggerComponentBase ::
        -:  545:    PktSend_out(
        -:  546:        NATIVE_INT_TYPE portNum,
        -:  547:        Fw::ComBuffer &data, U32 context
        -:  548:    )
        -:  549:  {
      162:  550:    FW_ASSERT(portNum < this->getNum_PktSend_OutputPorts(),static_cast<AssertArg>(portNum));
      162:  551:    m_PktSend_OutputPort[portNum].invoke(data, context);
      162:  552:  }
        -:  553:
        9:  554:  void ActiveLoggerComponentBase ::
        -:  555:    FatalAnnounce_out(
        -:  556:        NATIVE_INT_TYPE portNum,
        -:  557:        FwEventIdType Id
        -:  558:    )
        -:  559:  {
        9:  560:    FW_ASSERT(portNum < this->getNum_FatalAnnounce_OutputPorts(),static_cast<AssertArg>(portNum));
        9:  561:    m_FatalAnnounce_OutputPort[portNum].invoke(Id);
        9:  562:  }
        -:  563:
        -:  564:  // ----------------------------------------------------------------------
        -:  565:  // Getters for numbers of ports
        -:  566:  // ----------------------------------------------------------------------
        -:  567:
      223:  568:  NATIVE_INT_TYPE ActiveLoggerComponentBase ::
        -:  569:    getNum_LogRecv_InputPorts(void)
        -:  570:  {
      223:  571:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  572:        this->m_LogRecv_InputPort
        -:  573:    );
        -:  574:  }
        -:  575:
      348:  576:  NATIVE_INT_TYPE ActiveLoggerComponentBase ::
        -:  577:    getNum_PktSend_OutputPorts(void)
        -:  578:  {
      348:  579:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  580:        this->m_PktSend_OutputPort
        -:  581:    );
        -:  582:  }
        -:  583:
       42:  584:  NATIVE_INT_TYPE ActiveLoggerComponentBase ::
        -:  585:    getNum_FatalAnnounce_OutputPorts(void)
        -:  586:  {
       42:  587:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  588:        this->m_FatalAnnounce_OutputPort
        -:  589:    );
        -:  590:  }
        -:  591:
       24:  592:  NATIVE_INT_TYPE ActiveLoggerComponentBase ::
        -:  593:    getNum_CmdDisp_InputPorts(void)
        -:  594:  {
       24:  595:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  596:        this->m_CmdDisp_InputPort
        -:  597:    );
        -:  598:  }
        -:  599:
       24:  600:  NATIVE_INT_TYPE ActiveLoggerComponentBase ::
        -:  601:    getNum_CmdStatus_OutputPorts(void)
        -:  602:  {
       24:  603:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  604:        this->m_CmdStatus_OutputPort
        -:  605:    );
        -:  606:  }
        -:  607:
       16:  608:  NATIVE_INT_TYPE ActiveLoggerComponentBase ::
        -:  609:    getNum_CmdReg_OutputPorts(void)
        -:  610:  {
       16:  611:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  612:        this->m_CmdReg_OutputPort
        -:  613:    );
        -:  614:  }
        -:  615:
       16:  616:  NATIVE_INT_TYPE ActiveLoggerComponentBase ::
        -:  617:    getNum_Time_OutputPorts(void)
        -:  618:  {
       16:  619:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  620:        this->m_Time_OutputPort
        -:  621:    );
        -:  622:  }
        -:  623:
       24:  624:  NATIVE_INT_TYPE ActiveLoggerComponentBase ::
        -:  625:    getNum_Log_OutputPorts(void)
        -:  626:  {
       24:  627:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  628:        this->m_Log_OutputPort
        -:  629:    );
        -:  630:  }
        -:  631:
        -:  632:#if FW_ENABLE_TEXT_LOGGING == 1
       24:  633:  NATIVE_INT_TYPE ActiveLoggerComponentBase ::
        -:  634:    getNum_LogText_OutputPorts(void)
        -:  635:  {
       24:  636:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  637:        this->m_LogText_OutputPort
        -:  638:    );
        -:  639:  }
        -:  640:#endif
        -:  641:
        -:  642:  // ----------------------------------------------------------------------
        -:  643:  // Port connection status queries
        -:  644:  // ----------------------------------------------------------------------
        -:  645:
      162:  646:  bool ActiveLoggerComponentBase ::
        -:  647:    isConnected_PktSend_OutputPort(NATIVE_INT_TYPE portNum)
        -:  648:  {
      162:  649:     FW_ASSERT(
        -:  650:        portNum < this->getNum_PktSend_OutputPorts(),
        -:  651:        static_cast<AssertArg>(portNum)
      162:  652:     );
      162:  653:     return this->m_PktSend_OutputPort[portNum].isConnected();
        -:  654:  }
        -:  655:
        9:  656:  bool ActiveLoggerComponentBase ::
        -:  657:    isConnected_FatalAnnounce_OutputPort(NATIVE_INT_TYPE portNum)
        -:  658:  {
        9:  659:     FW_ASSERT(
        -:  660:        portNum < this->getNum_FatalAnnounce_OutputPorts(),
        -:  661:        static_cast<AssertArg>(portNum)
        9:  662:     );
        9:  663:     return this->m_FatalAnnounce_OutputPort[portNum].isConnected();
        -:  664:  }
        -:  665:
    #####:  666:  bool ActiveLoggerComponentBase ::
        -:  667:    isConnected_CmdStatus_OutputPort(NATIVE_INT_TYPE portNum)
        -:  668:  {
    #####:  669:     FW_ASSERT(
        -:  670:        portNum < this->getNum_CmdStatus_OutputPorts(),
        -:  671:        static_cast<AssertArg>(portNum)
    #####:  672:     );
    #####:  673:     return this->m_CmdStatus_OutputPort[portNum].isConnected();
        -:  674:  }
        -:  675:
    #####:  676:  bool ActiveLoggerComponentBase ::
        -:  677:    isConnected_CmdReg_OutputPort(NATIVE_INT_TYPE portNum)
        -:  678:  {
    #####:  679:     FW_ASSERT(
        -:  680:        portNum < this->getNum_CmdReg_OutputPorts(),
        -:  681:        static_cast<AssertArg>(portNum)
    #####:  682:     );
    #####:  683:     return this->m_CmdReg_OutputPort[portNum].isConnected();
        -:  684:  }
        -:  685:
    #####:  686:  bool ActiveLoggerComponentBase ::
        -:  687:    isConnected_Time_OutputPort(NATIVE_INT_TYPE portNum)
        -:  688:  {
    #####:  689:     FW_ASSERT(
        -:  690:        portNum < this->getNum_Time_OutputPorts(),
        -:  691:        static_cast<AssertArg>(portNum)
    #####:  692:     );
    #####:  693:     return this->m_Time_OutputPort[portNum].isConnected();
        -:  694:  }
        -:  695:
    #####:  696:  bool ActiveLoggerComponentBase ::
        -:  697:    isConnected_Log_OutputPort(NATIVE_INT_TYPE portNum)
        -:  698:  {
    #####:  699:     FW_ASSERT(
        -:  700:        portNum < this->getNum_Log_OutputPorts(),
        -:  701:        static_cast<AssertArg>(portNum)
    #####:  702:     );
    #####:  703:     return this->m_Log_OutputPort[portNum].isConnected();
        -:  704:  }
        -:  705:
        -:  706:#if FW_ENABLE_TEXT_LOGGING == 1
    #####:  707:  bool ActiveLoggerComponentBase ::
        -:  708:    isConnected_LogText_OutputPort(NATIVE_INT_TYPE portNum)
        -:  709:  {
    #####:  710:     FW_ASSERT(
        -:  711:        portNum < this->getNum_LogText_OutputPorts(),
        -:  712:        static_cast<AssertArg>(portNum)
    #####:  713:     );
    #####:  714:     return this->m_LogText_OutputPort[portNum].isConnected();
        -:  715:  }
        -:  716:#endif
        -:  717:
        -:  718:  // ----------------------------------------------------------------------
        -:  719:  // Calls for messages received on typed input ports
        -:  720:  // ----------------------------------------------------------------------
        -:  721:
      203:  722:  void ActiveLoggerComponentBase ::
        -:  723:    m_p_CmdDisp_in(
        -:  724:        Fw::PassiveComponentBase* callComp,
        -:  725:        NATIVE_INT_TYPE portNum,
        -:  726:        FwOpcodeType opCode,
        -:  727:        U32 cmdSeq,
        -:  728:        Fw::CmdArgBuffer &args
        -:  729:    )
        -:  730:  {
        -:  731:
        -:  732:    // Select base class function based on opcode
      203:  733:    FW_ASSERT(callComp);
        -:  734:    ActiveLoggerComponentBase* compPtr =
      203:  735:      (ActiveLoggerComponentBase*) callComp;
        -:  736:
      203:  737:    switch (opCode) {
        -:  738:
        -:  739:      case OPCODE_ALOG_SET_EVENT_REPORT_FILTER:
        -:  740:        compPtr->ALOG_SET_EVENT_REPORT_FILTER_cmdHandlerBase(
        -:  741:            opCode,
        -:  742:            cmdSeq,
        -:  743:            args
       52:  744:        );
       52:  745:        break;
        -:  746:        
        -:  747:      case OPCODE_ALOG_SET_EVENT_SEND_FILTER:
        -:  748:        compPtr->ALOG_SET_EVENT_SEND_FILTER_cmdHandlerBase(
        -:  749:            opCode,
        -:  750:            cmdSeq,
        -:  751:            args
       52:  752:        );
       52:  753:        break;
        -:  754:        
        -:  755:      case OPCODE_ALOG_DUMP_EVENT_LOG:
        -:  756:        compPtr->ALOG_DUMP_EVENT_LOG_cmdHandlerBase(
        -:  757:            opCode,
        -:  758:            cmdSeq,
        -:  759:            args
       17:  760:        );
       17:  761:        break;
        -:  762:        
        -:  763:      case OPCODE_ALOG_SET_ID_FILTER:
        -:  764:        compPtr->ALOG_SET_ID_FILTER_cmdHandlerBase(
        -:  765:            opCode,
        -:  766:            cmdSeq,
        -:  767:            args
       81:  768:        );
       81:  769:        break;
        -:  770:        
        -:  771:      case OPCODE_ALOG_DUMP_FILTER_STATE:
        -:  772:        compPtr->ALOG_DUMP_FILTER_STATE_cmdHandlerBase(
        -:  773:            opCode,
        -:  774:            cmdSeq,
        -:  775:            args
        1:  776:        );
        1:  777:        break;
        -:  778:        
        -:  779:      default: {
        -:  780:        compPtr->cmdResponse_out(
        -:  781:            opCode,cmdSeq,
        -:  782:            Fw::COMMAND_INVALID_OPCODE
    #####:  783:        );
    #####:  784:        break;
        -:  785:      }
        -:  786:
        -:  787:    }
        -:  788:
      203:  789:  }
        -:  790:
      203:  791:  void ActiveLoggerComponentBase ::
        -:  792:    cmdResponse_out(
        -:  793:        FwOpcodeType opCode,
        -:  794:        U32 cmdSeq,
        -:  795:        Fw::CommandResponse response
        -:  796:    )
        -:  797:  {
      203:  798:    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
      203:  799:    this->m_CmdStatus_OutputPort[0].invoke(opCode,cmdSeq,response);
      203:  800:  }
        -:  801:
        -:  802:  // ----------------------------------------------------------------------
        -:  803:  // Base class command functions
        -:  804:  // ----------------------------------------------------------------------
        -:  805:
       52:  806:  void ActiveLoggerComponentBase ::
        -:  807:    ALOG_SET_EVENT_REPORT_FILTER_cmdHandlerBase(
        -:  808:        FwOpcodeType opCode,
        -:  809:        U32 cmdSeq,
        -:  810:        Fw::CmdArgBuffer &args
        -:  811:    )
        -:  812:  {
        -:  813:
        -:  814:    // Deserialize the arguments
        -:  815:    Fw::SerializeStatus _status;
        -:  816:
        -:  817:    // Reset the buffer
       52:  818:    args.resetDeser();
        -:  819:
        -:  820:    InputFilterLevel FilterLevel;
        -:  821:    FwEnumStoreType FilterLevelInt;
       52:  822:    _status = args.deserialize(FilterLevelInt);
       52:  823:    FilterLevel = (InputFilterLevel)FilterLevelInt;
       52:  824:    if (_status != Fw::FW_SERIALIZE_OK) {
    #####:  825:      if (this->m_CmdStatus_OutputPort[0].isConnected()) {
        -:  826:        this->m_CmdStatus_OutputPort[0].invoke(
        -:  827:            opCode,
        -:  828:            cmdSeq,Fw::COMMAND_FORMAT_ERROR
    #####:  829:        );
        -:  830:      }
    #####:  831:      return;
        -:  832:    }
        -:  833:
        -:  834:    InputFilterEnabled FilterEnable;
        -:  835:    FwEnumStoreType FilterEnableInt;
       52:  836:    _status = args.deserialize(FilterEnableInt);
       52:  837:    FilterEnable = (InputFilterEnabled)FilterEnableInt;
       52:  838:    if (_status != Fw::FW_SERIALIZE_OK) {
    #####:  839:      if (this->m_CmdStatus_OutputPort[0].isConnected()) {
        -:  840:        this->m_CmdStatus_OutputPort[0].invoke(
        -:  841:            opCode,
        -:  842:            cmdSeq,Fw::COMMAND_FORMAT_ERROR
    #####:  843:        );
        -:  844:      }
    #####:  845:      return;
        -:  846:    }
        -:  847:
        -:  848:    // Make sure there was no data left over.
        -:  849:    // That means the argument buffer size was incorrect.
       52:  850:    if (args.getBuffLeft() != 0) {
    #####:  851:      if (this->m_CmdStatus_OutputPort[0].isConnected()) {
        -:  852:        this->m_CmdStatus_OutputPort[0].invoke(
        -:  853:            opCode,
        -:  854:            cmdSeq,Fw::COMMAND_FORMAT_ERROR
    #####:  855:        );
        -:  856:      }
    #####:  857:      return;
        -:  858:    }
        -:  859:    this->ALOG_SET_EVENT_REPORT_FILTER_cmdHandler(
        -:  860:        opCode,
        -:  861:        cmdSeq,
        -:  862:        FilterLevel, FilterEnable
       52:  863:    );
        -:  864:
        -:  865:  }
        -:  866:
       52:  867:  void ActiveLoggerComponentBase ::
        -:  868:    ALOG_SET_EVENT_SEND_FILTER_cmdHandlerBase(
        -:  869:        FwOpcodeType opCode,
        -:  870:        U32 cmdSeq,
        -:  871:        Fw::CmdArgBuffer &args
        -:  872:    )
        -:  873:  {
        -:  874:
        -:  875:    // Deserialize the arguments
        -:  876:    Fw::SerializeStatus _status;
        -:  877:
        -:  878:    // Reset the buffer
       52:  879:    args.resetDeser();
        -:  880:
        -:  881:    SendFilterLevel FilterLevel;
        -:  882:    FwEnumStoreType FilterLevelInt;
       52:  883:    _status = args.deserialize(FilterLevelInt);
       52:  884:    FilterLevel = (SendFilterLevel)FilterLevelInt;
       52:  885:    if (_status != Fw::FW_SERIALIZE_OK) {
    #####:  886:      if (this->m_CmdStatus_OutputPort[0].isConnected()) {
        -:  887:        this->m_CmdStatus_OutputPort[0].invoke(
        -:  888:            opCode,
        -:  889:            cmdSeq,Fw::COMMAND_FORMAT_ERROR
    #####:  890:        );
        -:  891:      }
    #####:  892:      return;
        -:  893:    }
        -:  894:
        -:  895:    SendFilterEnabled FilterEnable;
        -:  896:    FwEnumStoreType FilterEnableInt;
       52:  897:    _status = args.deserialize(FilterEnableInt);
       52:  898:    FilterEnable = (SendFilterEnabled)FilterEnableInt;
       52:  899:    if (_status != Fw::FW_SERIALIZE_OK) {
    #####:  900:      if (this->m_CmdStatus_OutputPort[0].isConnected()) {
        -:  901:        this->m_CmdStatus_OutputPort[0].invoke(
        -:  902:            opCode,
        -:  903:            cmdSeq,Fw::COMMAND_FORMAT_ERROR
    #####:  904:        );
        -:  905:      }
    #####:  906:      return;
        -:  907:    }
        -:  908:
        -:  909:    // Make sure there was no data left over.
        -:  910:    // That means the argument buffer size was incorrect.
       52:  911:    if (args.getBuffLeft() != 0) {
    #####:  912:      if (this->m_CmdStatus_OutputPort[0].isConnected()) {
        -:  913:        this->m_CmdStatus_OutputPort[0].invoke(
        -:  914:            opCode,
        -:  915:            cmdSeq,Fw::COMMAND_FORMAT_ERROR
    #####:  916:        );
        -:  917:      }
    #####:  918:      return;
        -:  919:    }
        -:  920:    this->ALOG_SET_EVENT_SEND_FILTER_cmdHandler(
        -:  921:        opCode,
        -:  922:        cmdSeq,
        -:  923:        FilterLevel, FilterEnable
       52:  924:    );
        -:  925:
        -:  926:  }
        -:  927:
       17:  928:  void ActiveLoggerComponentBase ::
        -:  929:    ALOG_DUMP_EVENT_LOG_cmdHandlerBase(
        -:  930:        FwOpcodeType opCode,
        -:  931:        U32 cmdSeq,
        -:  932:        Fw::CmdArgBuffer &args
        -:  933:    )
        -:  934:  {
        -:  935:
        -:  936:    // Call pre-message hook
       17:  937:    this->ALOG_DUMP_EVENT_LOG_preMsgHook(opCode,cmdSeq);
        -:  938:
        -:  939:    // Defer deserializing arguments to the message dispatcher
        -:  940:    // to avoid deserializing and reserializing just for IPC
       17:  941:    ComponentIpcSerializableBuffer msg;
        -:  942:    Fw::SerializeStatus _status;
        -:  943:
        -:  944:    // Serialize for IPC
       17:  945:    _status = msg.serialize((NATIVE_INT_TYPE)CMD_ALOG_DUMP_EVENT_LOG);
        -:  946:    FW_ASSERT (
        -:  947:        _status == Fw::FW_SERIALIZE_OK,
        -:  948:        static_cast<AssertArg>(_status)
       17:  949:        );
        -:  950:
        -:  951:    // Fake port number to make message dequeue work
       17:  952:    NATIVE_INT_TYPE port = 0;
       17:  953:    _status = msg.serialize(port);
        -:  954:    FW_ASSERT (
        -:  955:        _status == Fw::FW_SERIALIZE_OK,
        -:  956:        static_cast<AssertArg>(_status)
       17:  957:    );
        -:  958:
       17:  959:    _status = msg.serialize(opCode);
        -:  960:    FW_ASSERT (
        -:  961:        _status == Fw::FW_SERIALIZE_OK,
        -:  962:        static_cast<AssertArg>(_status)
       17:  963:    );
        -:  964:
       17:  965:    _status = msg.serialize(cmdSeq);
        -:  966:    FW_ASSERT (
        -:  967:        _status == Fw::FW_SERIALIZE_OK,
        -:  968:        static_cast<AssertArg>(_status)
       17:  969:    );
        -:  970:
       17:  971:    _status = msg.serialize(args);
        -:  972:    FW_ASSERT (
        -:  973:        _status == Fw::FW_SERIALIZE_OK,
        -:  974:        static_cast<AssertArg>(_status)
       17:  975:    );
        -:  976:
       17:  977:    Os::Queue::QueueStatus qStatus = this->m_queue.send(msg,0);
        -:  978:
        -:  979:    FW_ASSERT(
        -:  980:        qStatus == Os::Queue::QUEUE_OK,
        -:  981:        static_cast<AssertArg>(qStatus)
       17:  982:    );
        -:  983:
       17:  984:  }
        -:  985:
       17:  986:  void ActiveLoggerComponentBase::
        -:  987:    ALOG_DUMP_EVENT_LOG_preMsgHook(
        -:  988:        FwOpcodeType opCode,
        -:  989:        U32 cmdSeq
        -:  990:    )
        -:  991:  {
        -:  992:    // Defaults to no-op; can be overridden
       17:  993:  }
        -:  994:
       81:  995:  void ActiveLoggerComponentBase ::
        -:  996:    ALOG_SET_ID_FILTER_cmdHandlerBase(
        -:  997:        FwOpcodeType opCode,
        -:  998:        U32 cmdSeq,
        -:  999:        Fw::CmdArgBuffer &args
        -: 1000:    )
        -: 1001:  {
        -: 1002:
        -: 1003:    // Call pre-message hook
       81: 1004:    this->ALOG_SET_ID_FILTER_preMsgHook(opCode,cmdSeq);
        -: 1005:
        -: 1006:    // Defer deserializing arguments to the message dispatcher
        -: 1007:    // to avoid deserializing and reserializing just for IPC
       81: 1008:    ComponentIpcSerializableBuffer msg;
        -: 1009:    Fw::SerializeStatus _status;
        -: 1010:
        -: 1011:    // Serialize for IPC
       81: 1012:    _status = msg.serialize((NATIVE_INT_TYPE)CMD_ALOG_SET_ID_FILTER);
        -: 1013:    FW_ASSERT (
        -: 1014:        _status == Fw::FW_SERIALIZE_OK,
        -: 1015:        static_cast<AssertArg>(_status)
       81: 1016:        );
        -: 1017:
        -: 1018:    // Fake port number to make message dequeue work
       81: 1019:    NATIVE_INT_TYPE port = 0;
       81: 1020:    _status = msg.serialize(port);
        -: 1021:    FW_ASSERT (
        -: 1022:        _status == Fw::FW_SERIALIZE_OK,
        -: 1023:        static_cast<AssertArg>(_status)
       81: 1024:    );
        -: 1025:
       81: 1026:    _status = msg.serialize(opCode);
        -: 1027:    FW_ASSERT (
        -: 1028:        _status == Fw::FW_SERIALIZE_OK,
        -: 1029:        static_cast<AssertArg>(_status)
       81: 1030:    );
        -: 1031:
       81: 1032:    _status = msg.serialize(cmdSeq);
        -: 1033:    FW_ASSERT (
        -: 1034:        _status == Fw::FW_SERIALIZE_OK,
        -: 1035:        static_cast<AssertArg>(_status)
       81: 1036:    );
        -: 1037:
       81: 1038:    _status = msg.serialize(args);
        -: 1039:    FW_ASSERT (
        -: 1040:        _status == Fw::FW_SERIALIZE_OK,
        -: 1041:        static_cast<AssertArg>(_status)
       81: 1042:    );
        -: 1043:
       81: 1044:    Os::Queue::QueueStatus qStatus = this->m_queue.send(msg,0);
        -: 1045:
        -: 1046:    FW_ASSERT(
        -: 1047:        qStatus == Os::Queue::QUEUE_OK,
        -: 1048:        static_cast<AssertArg>(qStatus)
       81: 1049:    );
        -: 1050:
       81: 1051:  }
        -: 1052:
       81: 1053:  void ActiveLoggerComponentBase::
        -: 1054:    ALOG_SET_ID_FILTER_preMsgHook(
        -: 1055:        FwOpcodeType opCode,
        -: 1056:        U32 cmdSeq
        -: 1057:    )
        -: 1058:  {
        -: 1059:    // Defaults to no-op; can be overridden
       81: 1060:  }
        -: 1061:
        1: 1062:  void ActiveLoggerComponentBase ::
        -: 1063:    ALOG_DUMP_FILTER_STATE_cmdHandlerBase(
        -: 1064:        FwOpcodeType opCode,
        -: 1065:        U32 cmdSeq,
        -: 1066:        Fw::CmdArgBuffer &args
        -: 1067:    )
        -: 1068:  {
        -: 1069:
        -: 1070:    // Call pre-message hook
        1: 1071:    this->ALOG_DUMP_FILTER_STATE_preMsgHook(opCode,cmdSeq);
        -: 1072:
        -: 1073:    // Defer deserializing arguments to the message dispatcher
        -: 1074:    // to avoid deserializing and reserializing just for IPC
        1: 1075:    ComponentIpcSerializableBuffer msg;
        -: 1076:    Fw::SerializeStatus _status;
        -: 1077:
        -: 1078:    // Serialize for IPC
        1: 1079:    _status = msg.serialize((NATIVE_INT_TYPE)CMD_ALOG_DUMP_FILTER_STATE);
        -: 1080:    FW_ASSERT (
        -: 1081:        _status == Fw::FW_SERIALIZE_OK,
        -: 1082:        static_cast<AssertArg>(_status)
        1: 1083:        );
        -: 1084:
        -: 1085:    // Fake port number to make message dequeue work
        1: 1086:    NATIVE_INT_TYPE port = 0;
        1: 1087:    _status = msg.serialize(port);
        -: 1088:    FW_ASSERT (
        -: 1089:        _status == Fw::FW_SERIALIZE_OK,
        -: 1090:        static_cast<AssertArg>(_status)
        1: 1091:    );
        -: 1092:
        1: 1093:    _status = msg.serialize(opCode);
        -: 1094:    FW_ASSERT (
        -: 1095:        _status == Fw::FW_SERIALIZE_OK,
        -: 1096:        static_cast<AssertArg>(_status)
        1: 1097:    );
        -: 1098:
        1: 1099:    _status = msg.serialize(cmdSeq);
        -: 1100:    FW_ASSERT (
        -: 1101:        _status == Fw::FW_SERIALIZE_OK,
        -: 1102:        static_cast<AssertArg>(_status)
        1: 1103:    );
        -: 1104:
        1: 1105:    _status = msg.serialize(args);
        -: 1106:    FW_ASSERT (
        -: 1107:        _status == Fw::FW_SERIALIZE_OK,
        -: 1108:        static_cast<AssertArg>(_status)
        1: 1109:    );
        -: 1110:
        1: 1111:    Os::Queue::QueueStatus qStatus = this->m_queue.send(msg,0);
        -: 1112:
        -: 1113:    FW_ASSERT(
        -: 1114:        qStatus == Os::Queue::QUEUE_OK,
        -: 1115:        static_cast<AssertArg>(qStatus)
        1: 1116:    );
        -: 1117:
        1: 1118:  }
        -: 1119:
        1: 1120:  void ActiveLoggerComponentBase::
        -: 1121:    ALOG_DUMP_FILTER_STATE_preMsgHook(
        -: 1122:        FwOpcodeType opCode,
        -: 1123:        U32 cmdSeq
        -: 1124:    )
        -: 1125:  {
        -: 1126:    // Defaults to no-op; can be overridden
        1: 1127:  }
        -: 1128:
        -: 1129:  // ----------------------------------------------------------------------
        -: 1130:  // Time
        -: 1131:  // ----------------------------------------------------------------------
        -: 1132:
    #####: 1133:  Fw::Time ActiveLoggerComponentBase ::
        -: 1134:    getTime(void) 
        -: 1135:  {
    #####: 1136:    if (this->m_Time_OutputPort[0].isConnected()) {
    #####: 1137:      return this->m_Time_OutputPort[0].invoke();
        -: 1138:    } else {
    #####: 1139:      return Fw::Time(TB_NONE,0,0);
        -: 1140:    }
        -: 1141:  }
        -: 1142:
        -: 1143:  // ----------------------------------------------------------------------
        -: 1144:  // Event handling functions
        -: 1145:  // ----------------------------------------------------------------------
        -: 1146:
       15: 1147:  void ActiveLoggerComponentBase ::
        -: 1148:    log_WARNING_HI_ALOG_FILE_WRITE_ERR(
        -: 1149:        LogWriteError stage, I32 error
        -: 1150:    )
        -: 1151:  {
        -: 1152:
        -: 1153:    // Get the time
       15: 1154:    Fw::Time _logTime;
       15: 1155:    if (this->m_Time_OutputPort[0].isConnected()) {
    #####: 1156:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1157:    }
        -: 1158:    
       15: 1159:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1160:    
       15: 1161:    _id = EVENTID_ALOG_FILE_WRITE_ERR;
        -: 1162:
        -: 1163:    // Emit the event on the log port
       15: 1164:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1165:
       15: 1166:      Fw::LogBuffer _logBuff;
        -: 1167:      Fw::SerializeStatus _status;
        -: 1168:
        -: 1169:#if FW_AMPCS_COMPATIBLE
        -: 1170:      // Serialize the number of arguments
        -: 1171:      _status = _logBuff.serialize(static_cast<U8>(2));
        -: 1172:      FW_ASSERT(
        -: 1173:          _status == Fw::FW_SERIALIZE_OK,
        -: 1174:          static_cast<AssertArg>(_status)
        -: 1175:      );
        -: 1176:#endif
        -: 1177:
        -: 1178:#if FW_AMPCS_COMPATIBLE
        -: 1179:      // Serialize the argument size
        -: 1180:      _status = _logBuff.serialize(static_cast<U8>(sizeof(FwEnumStoreType)));
        -: 1181:      FW_ASSERT(
        -: 1182:          _status == Fw::FW_SERIALIZE_OK,
        -: 1183:          static_cast<AssertArg>(_status)
        -: 1184:      );
        -: 1185:#endif
        -: 1186:
        -: 1187:      _status = _logBuff.serialize(
        -: 1188:          static_cast<FwEnumStoreType>(stage)
       15: 1189:      );
        -: 1190:      FW_ASSERT(
        -: 1191:          _status == Fw::FW_SERIALIZE_OK,
        -: 1192:          static_cast<AssertArg>(_status)
       15: 1193:      );
        -: 1194:
        -: 1195:#if FW_AMPCS_COMPATIBLE
        -: 1196:      // Serialize the argument size
        -: 1197:      _status = _logBuff.serialize(
        -: 1198:          static_cast<U8>(sizeof(error))
        -: 1199:      );
        -: 1200:      FW_ASSERT(
        -: 1201:          _status == Fw::FW_SERIALIZE_OK,
        -: 1202:          static_cast<AssertArg>(_status)
        -: 1203:      );
        -: 1204:#endif
        -: 1205:
       15: 1206:      _status = _logBuff.serialize(error);
        -: 1207:      FW_ASSERT(
        -: 1208:          _status == Fw::FW_SERIALIZE_OK,
        -: 1209:          static_cast<AssertArg>(_status)
       15: 1210:      );
        -: 1211:
        -: 1212:
        -: 1213:      this->m_Log_OutputPort[0].invoke(
        -: 1214:          _id,
        -: 1215:          _logTime,Fw::LOG_WARNING_HI,
        -: 1216:          _logBuff
       15: 1217:      );
        -: 1218:
        -: 1219:    }
        -: 1220:
        -: 1221:    // Emit the event on the text log port
        -: 1222:#if FW_ENABLE_TEXT_LOGGING
       15: 1223:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1224:
        -: 1225:#if FW_OBJECT_NAMES == 1
        -: 1226:      const char* _formatString =
       15: 1227:        "(%s) %s: Event buffer write failed in stage %d with error %d";
        -: 1228:#else
        -: 1229:      const char* _formatString =
        -: 1230:        "%s: Event buffer write failed in stage %d with error %d";
        -: 1231:#endif
        -: 1232:
        -: 1233:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1234:
        -: 1235:      (void) snprintf(
        -: 1236:          _textBuffer,
        -: 1237:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1238:          _formatString,
        -: 1239:#if FW_OBJECT_NAMES == 1
        -: 1240:          this->m_objName,
        -: 1241:#endif
        -: 1242:          "ALOG_FILE_WRITE_ERR "
        -: 1243:        , stage
        -: 1244:        , error
       15: 1245:      );
        -: 1246:
        -: 1247:      // Null terminate
       15: 1248:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
       15: 1249:      Fw::TextLogString _logString = _textBuffer;
        -: 1250:      this->m_LogText_OutputPort[0].invoke(
        -: 1251:          _id,
        -: 1252:          _logTime,Fw::TEXT_LOG_WARNING_HI,
        -: 1253:          _logString
       15: 1254:      );
        -: 1255:
       15: 1256:    }
        -: 1257:#endif
        -: 1258:
       15: 1259:  }
        -: 1260:
        2: 1261:  void ActiveLoggerComponentBase ::
        -: 1262:    log_ACTIVITY_HI_ALOG_FILE_WRITE_COMPLETE(
        -: 1263:        U32 records
        -: 1264:    )
        -: 1265:  {
        -: 1266:
        -: 1267:    // Get the time
        2: 1268:    Fw::Time _logTime;
        2: 1269:    if (this->m_Time_OutputPort[0].isConnected()) {
    #####: 1270:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1271:    }
        -: 1272:    
        2: 1273:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1274:    
        2: 1275:    _id = EVENTID_ALOG_FILE_WRITE_COMPLETE;
        -: 1276:
        -: 1277:    // Emit the event on the log port
        2: 1278:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1279:
        2: 1280:      Fw::LogBuffer _logBuff;
        -: 1281:      Fw::SerializeStatus _status;
        -: 1282:
        -: 1283:#if FW_AMPCS_COMPATIBLE
        -: 1284:      // Serialize the number of arguments
        -: 1285:      _status = _logBuff.serialize(static_cast<U8>(1));
        -: 1286:      FW_ASSERT(
        -: 1287:          _status == Fw::FW_SERIALIZE_OK,
        -: 1288:          static_cast<AssertArg>(_status)
        -: 1289:      );
        -: 1290:#endif
        -: 1291:
        -: 1292:#if FW_AMPCS_COMPATIBLE
        -: 1293:      // Serialize the argument size
        -: 1294:      _status = _logBuff.serialize(
        -: 1295:          static_cast<U8>(sizeof(records))
        -: 1296:      );
        -: 1297:      FW_ASSERT(
        -: 1298:          _status == Fw::FW_SERIALIZE_OK,
        -: 1299:          static_cast<AssertArg>(_status)
        -: 1300:      );
        -: 1301:#endif
        -: 1302:
        2: 1303:      _status = _logBuff.serialize(records);
        -: 1304:      FW_ASSERT(
        -: 1305:          _status == Fw::FW_SERIALIZE_OK,
        -: 1306:          static_cast<AssertArg>(_status)
        2: 1307:      );
        -: 1308:
        -: 1309:
        -: 1310:      this->m_Log_OutputPort[0].invoke(
        -: 1311:          _id,
        -: 1312:          _logTime,Fw::LOG_ACTIVITY_HI,
        -: 1313:          _logBuff
        2: 1314:      );
        -: 1315:
        -: 1316:    }
        -: 1317:
        -: 1318:    // Emit the event on the text log port
        -: 1319:#if FW_ENABLE_TEXT_LOGGING
        2: 1320:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1321:
        -: 1322:#if FW_OBJECT_NAMES == 1
        -: 1323:      const char* _formatString =
        2: 1324:        "(%s) %s: Event buffer write complete. Wrote %d records.";
        -: 1325:#else
        -: 1326:      const char* _formatString =
        -: 1327:        "%s: Event buffer write complete. Wrote %d records.";
        -: 1328:#endif
        -: 1329:
        -: 1330:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1331:
        -: 1332:      (void) snprintf(
        -: 1333:          _textBuffer,
        -: 1334:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1335:          _formatString,
        -: 1336:#if FW_OBJECT_NAMES == 1
        -: 1337:          this->m_objName,
        -: 1338:#endif
        -: 1339:          "ALOG_FILE_WRITE_COMPLETE "
        -: 1340:        , records
        2: 1341:      );
        -: 1342:
        -: 1343:      // Null terminate
        2: 1344:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        2: 1345:      Fw::TextLogString _logString = _textBuffer;
        -: 1346:      this->m_LogText_OutputPort[0].invoke(
        -: 1347:          _id,
        -: 1348:          _logTime,Fw::TEXT_LOG_ACTIVITY_HI,
        -: 1349:          _logString
        2: 1350:      );
        -: 1351:
        2: 1352:    }
        -: 1353:#endif
        -: 1354:
        2: 1355:  }
        -: 1356:
        6: 1357:  void ActiveLoggerComponentBase ::
        -: 1358:    log_ACTIVITY_LO_ALOG_SEVERITY_FILTER_STATE(
        -: 1359:        EventFilterState severity, bool recvEnabled, bool sendEnabled
        -: 1360:    )
        -: 1361:  {
        -: 1362:
        -: 1363:    // Get the time
        6: 1364:    Fw::Time _logTime;
        6: 1365:    if (this->m_Time_OutputPort[0].isConnected()) {
    #####: 1366:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1367:    }
        -: 1368:    
        6: 1369:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1370:    
        6: 1371:    _id = EVENTID_ALOG_SEVERITY_FILTER_STATE;
        -: 1372:
        -: 1373:    // Emit the event on the log port
        6: 1374:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1375:
        6: 1376:      Fw::LogBuffer _logBuff;
        -: 1377:      Fw::SerializeStatus _status;
        -: 1378:
        -: 1379:#if FW_AMPCS_COMPATIBLE
        -: 1380:      // Serialize the number of arguments
        -: 1381:      _status = _logBuff.serialize(static_cast<U8>(3));
        -: 1382:      FW_ASSERT(
        -: 1383:          _status == Fw::FW_SERIALIZE_OK,
        -: 1384:          static_cast<AssertArg>(_status)
        -: 1385:      );
        -: 1386:#endif
        -: 1387:
        -: 1388:#if FW_AMPCS_COMPATIBLE
        -: 1389:      // Serialize the argument size
        -: 1390:      _status = _logBuff.serialize(static_cast<U8>(sizeof(FwEnumStoreType)));
        -: 1391:      FW_ASSERT(
        -: 1392:          _status == Fw::FW_SERIALIZE_OK,
        -: 1393:          static_cast<AssertArg>(_status)
        -: 1394:      );
        -: 1395:#endif
        -: 1396:
        -: 1397:      _status = _logBuff.serialize(
        -: 1398:          static_cast<FwEnumStoreType>(severity)
        6: 1399:      );
        -: 1400:      FW_ASSERT(
        -: 1401:          _status == Fw::FW_SERIALIZE_OK,
        -: 1402:          static_cast<AssertArg>(_status)
        6: 1403:      );
        -: 1404:
        -: 1405:#if FW_AMPCS_COMPATIBLE
        -: 1406:      // Serialize the argument size
        -: 1407:      _status = _logBuff.serialize(
        -: 1408:          static_cast<U8>(sizeof(recvEnabled))
        -: 1409:      );
        -: 1410:      FW_ASSERT(
        -: 1411:          _status == Fw::FW_SERIALIZE_OK,
        -: 1412:          static_cast<AssertArg>(_status)
        -: 1413:      );
        -: 1414:#endif
        -: 1415:
        6: 1416:      _status = _logBuff.serialize(recvEnabled);
        -: 1417:      FW_ASSERT(
        -: 1418:          _status == Fw::FW_SERIALIZE_OK,
        -: 1419:          static_cast<AssertArg>(_status)
        6: 1420:      );
        -: 1421:
        -: 1422:#if FW_AMPCS_COMPATIBLE
        -: 1423:      // Serialize the argument size
        -: 1424:      _status = _logBuff.serialize(
        -: 1425:          static_cast<U8>(sizeof(sendEnabled))
        -: 1426:      );
        -: 1427:      FW_ASSERT(
        -: 1428:          _status == Fw::FW_SERIALIZE_OK,
        -: 1429:          static_cast<AssertArg>(_status)
        -: 1430:      );
        -: 1431:#endif
        -: 1432:
        6: 1433:      _status = _logBuff.serialize(sendEnabled);
        -: 1434:      FW_ASSERT(
        -: 1435:          _status == Fw::FW_SERIALIZE_OK,
        -: 1436:          static_cast<AssertArg>(_status)
        6: 1437:      );
        -: 1438:
        -: 1439:
        -: 1440:      this->m_Log_OutputPort[0].invoke(
        -: 1441:          _id,
        -: 1442:          _logTime,Fw::LOG_ACTIVITY_LO,
        -: 1443:          _logBuff
        6: 1444:      );
        -: 1445:
        -: 1446:    }
        -: 1447:
        -: 1448:    // Emit the event on the text log port
        -: 1449:#if FW_ENABLE_TEXT_LOGGING
        6: 1450:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1451:
        -: 1452:#if FW_OBJECT_NAMES == 1
        -: 1453:      const char* _formatString =
        6: 1454:        "(%s) %s: %d filter state. Recv: %d Send: %d";
        -: 1455:#else
        -: 1456:      const char* _formatString =
        -: 1457:        "%s: %d filter state. Recv: %d Send: %d";
        -: 1458:#endif
        -: 1459:
        -: 1460:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1461:
        -: 1462:      (void) snprintf(
        -: 1463:          _textBuffer,
        -: 1464:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1465:          _formatString,
        -: 1466:#if FW_OBJECT_NAMES == 1
        -: 1467:          this->m_objName,
        -: 1468:#endif
        -: 1469:          "ALOG_SEVERITY_FILTER_STATE "
        -: 1470:        , severity
        -: 1471:        , recvEnabled
        -: 1472:        , sendEnabled
        6: 1473:      );
        -: 1474:
        -: 1475:      // Null terminate
        6: 1476:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        6: 1477:      Fw::TextLogString _logString = _textBuffer;
        -: 1478:      this->m_LogText_OutputPort[0].invoke(
        -: 1479:          _id,
        -: 1480:          _logTime,Fw::TEXT_LOG_ACTIVITY_LO,
        -: 1481:          _logString
        6: 1482:      );
        -: 1483:
        6: 1484:    }
        -: 1485:#endif
        -: 1486:
        6: 1487:  }
        -: 1488:
       56: 1489:  void ActiveLoggerComponentBase ::
        -: 1490:    log_ACTIVITY_HI_ALOG_ID_FILTER_ENABLED(
        -: 1491:        U32 ID
        -: 1492:    )
        -: 1493:  {
        -: 1494:
        -: 1495:    // Get the time
       56: 1496:    Fw::Time _logTime;
       56: 1497:    if (this->m_Time_OutputPort[0].isConnected()) {
    #####: 1498:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1499:    }
        -: 1500:    
       56: 1501:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1502:    
       56: 1503:    _id = EVENTID_ALOG_ID_FILTER_ENABLED;
        -: 1504:
        -: 1505:    // Emit the event on the log port
       56: 1506:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1507:
       56: 1508:      Fw::LogBuffer _logBuff;
        -: 1509:      Fw::SerializeStatus _status;
        -: 1510:
        -: 1511:#if FW_AMPCS_COMPATIBLE
        -: 1512:      // Serialize the number of arguments
        -: 1513:      _status = _logBuff.serialize(static_cast<U8>(1));
        -: 1514:      FW_ASSERT(
        -: 1515:          _status == Fw::FW_SERIALIZE_OK,
        -: 1516:          static_cast<AssertArg>(_status)
        -: 1517:      );
        -: 1518:#endif
        -: 1519:
        -: 1520:#if FW_AMPCS_COMPATIBLE
        -: 1521:      // Serialize the argument size
        -: 1522:      _status = _logBuff.serialize(
        -: 1523:          static_cast<U8>(sizeof(ID))
        -: 1524:      );
        -: 1525:      FW_ASSERT(
        -: 1526:          _status == Fw::FW_SERIALIZE_OK,
        -: 1527:          static_cast<AssertArg>(_status)
        -: 1528:      );
        -: 1529:#endif
        -: 1530:
       56: 1531:      _status = _logBuff.serialize(ID);
        -: 1532:      FW_ASSERT(
        -: 1533:          _status == Fw::FW_SERIALIZE_OK,
        -: 1534:          static_cast<AssertArg>(_status)
       56: 1535:      );
        -: 1536:
        -: 1537:
        -: 1538:      this->m_Log_OutputPort[0].invoke(
        -: 1539:          _id,
        -: 1540:          _logTime,Fw::LOG_ACTIVITY_HI,
        -: 1541:          _logBuff
       56: 1542:      );
        -: 1543:
        -: 1544:    }
        -: 1545:
        -: 1546:    // Emit the event on the text log port
        -: 1547:#if FW_ENABLE_TEXT_LOGGING
       56: 1548:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1549:
        -: 1550:#if FW_OBJECT_NAMES == 1
        -: 1551:      const char* _formatString =
       56: 1552:        "(%s) %s: ID %d is filtered.";
        -: 1553:#else
        -: 1554:      const char* _formatString =
        -: 1555:        "%s: ID %d is filtered.";
        -: 1556:#endif
        -: 1557:
        -: 1558:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1559:
        -: 1560:      (void) snprintf(
        -: 1561:          _textBuffer,
        -: 1562:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1563:          _formatString,
        -: 1564:#if FW_OBJECT_NAMES == 1
        -: 1565:          this->m_objName,
        -: 1566:#endif
        -: 1567:          "ALOG_ID_FILTER_ENABLED "
        -: 1568:        , ID
       56: 1569:      );
        -: 1570:
        -: 1571:      // Null terminate
       56: 1572:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
       56: 1573:      Fw::TextLogString _logString = _textBuffer;
        -: 1574:      this->m_LogText_OutputPort[0].invoke(
        -: 1575:          _id,
        -: 1576:          _logTime,Fw::TEXT_LOG_ACTIVITY_HI,
        -: 1577:          _logString
       56: 1578:      );
        -: 1579:
       56: 1580:    }
        -: 1581:#endif
        -: 1582:
       56: 1583:  }
        -: 1584:
        1: 1585:  void ActiveLoggerComponentBase ::
        -: 1586:    log_WARNING_LO_ALOG_ID_FILTER_LIST_FULL(
        -: 1587:        U32 ID
        -: 1588:    )
        -: 1589:  {
        -: 1590:
        -: 1591:    // Get the time
        1: 1592:    Fw::Time _logTime;
        1: 1593:    if (this->m_Time_OutputPort[0].isConnected()) {
    #####: 1594:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1595:    }
        -: 1596:    
        1: 1597:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1598:    
        1: 1599:    _id = EVENTID_ALOG_ID_FILTER_LIST_FULL;
        -: 1600:
        -: 1601:    // Emit the event on the log port
        1: 1602:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1603:
        1: 1604:      Fw::LogBuffer _logBuff;
        -: 1605:      Fw::SerializeStatus _status;
        -: 1606:
        -: 1607:#if FW_AMPCS_COMPATIBLE
        -: 1608:      // Serialize the number of arguments
        -: 1609:      _status = _logBuff.serialize(static_cast<U8>(1));
        -: 1610:      FW_ASSERT(
        -: 1611:          _status == Fw::FW_SERIALIZE_OK,
        -: 1612:          static_cast<AssertArg>(_status)
        -: 1613:      );
        -: 1614:#endif
        -: 1615:
        -: 1616:#if FW_AMPCS_COMPATIBLE
        -: 1617:      // Serialize the argument size
        -: 1618:      _status = _logBuff.serialize(
        -: 1619:          static_cast<U8>(sizeof(ID))
        -: 1620:      );
        -: 1621:      FW_ASSERT(
        -: 1622:          _status == Fw::FW_SERIALIZE_OK,
        -: 1623:          static_cast<AssertArg>(_status)
        -: 1624:      );
        -: 1625:#endif
        -: 1626:
        1: 1627:      _status = _logBuff.serialize(ID);
        -: 1628:      FW_ASSERT(
        -: 1629:          _status == Fw::FW_SERIALIZE_OK,
        -: 1630:          static_cast<AssertArg>(_status)
        1: 1631:      );
        -: 1632:
        -: 1633:
        -: 1634:      this->m_Log_OutputPort[0].invoke(
        -: 1635:          _id,
        -: 1636:          _logTime,Fw::LOG_WARNING_LO,
        -: 1637:          _logBuff
        1: 1638:      );
        -: 1639:
        -: 1640:    }
        -: 1641:
        -: 1642:    // Emit the event on the text log port
        -: 1643:#if FW_ENABLE_TEXT_LOGGING
        1: 1644:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1645:
        -: 1646:#if FW_OBJECT_NAMES == 1
        -: 1647:      const char* _formatString =
        1: 1648:        "(%s) %s: ID filter list is full. Cannot filter %d .";
        -: 1649:#else
        -: 1650:      const char* _formatString =
        -: 1651:        "%s: ID filter list is full. Cannot filter %d .";
        -: 1652:#endif
        -: 1653:
        -: 1654:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1655:
        -: 1656:      (void) snprintf(
        -: 1657:          _textBuffer,
        -: 1658:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1659:          _formatString,
        -: 1660:#if FW_OBJECT_NAMES == 1
        -: 1661:          this->m_objName,
        -: 1662:#endif
        -: 1663:          "ALOG_ID_FILTER_LIST_FULL "
        -: 1664:        , ID
        1: 1665:      );
        -: 1666:
        -: 1667:      // Null terminate
        1: 1668:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        1: 1669:      Fw::TextLogString _logString = _textBuffer;
        -: 1670:      this->m_LogText_OutputPort[0].invoke(
        -: 1671:          _id,
        -: 1672:          _logTime,Fw::TEXT_LOG_WARNING_LO,
        -: 1673:          _logString
        1: 1674:      );
        -: 1675:
        1: 1676:    }
        -: 1677:#endif
        -: 1678:
        1: 1679:  }
        -: 1680:
       25: 1681:  void ActiveLoggerComponentBase ::
        -: 1682:    log_ACTIVITY_HI_ALOG_ID_FILTER_REMOVED(
        -: 1683:        U32 ID
        -: 1684:    )
        -: 1685:  {
        -: 1686:
        -: 1687:    // Get the time
       25: 1688:    Fw::Time _logTime;
       25: 1689:    if (this->m_Time_OutputPort[0].isConnected()) {
    #####: 1690:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1691:    }
        -: 1692:    
       25: 1693:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1694:    
       25: 1695:    _id = EVENTID_ALOG_ID_FILTER_REMOVED;
        -: 1696:
        -: 1697:    // Emit the event on the log port
       25: 1698:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1699:
       25: 1700:      Fw::LogBuffer _logBuff;
        -: 1701:      Fw::SerializeStatus _status;
        -: 1702:
        -: 1703:#if FW_AMPCS_COMPATIBLE
        -: 1704:      // Serialize the number of arguments
        -: 1705:      _status = _logBuff.serialize(static_cast<U8>(1));
        -: 1706:      FW_ASSERT(
        -: 1707:          _status == Fw::FW_SERIALIZE_OK,
        -: 1708:          static_cast<AssertArg>(_status)
        -: 1709:      );
        -: 1710:#endif
        -: 1711:
        -: 1712:#if FW_AMPCS_COMPATIBLE
        -: 1713:      // Serialize the argument size
        -: 1714:      _status = _logBuff.serialize(
        -: 1715:          static_cast<U8>(sizeof(ID))
        -: 1716:      );
        -: 1717:      FW_ASSERT(
        -: 1718:          _status == Fw::FW_SERIALIZE_OK,
        -: 1719:          static_cast<AssertArg>(_status)
        -: 1720:      );
        -: 1721:#endif
        -: 1722:
       25: 1723:      _status = _logBuff.serialize(ID);
        -: 1724:      FW_ASSERT(
        -: 1725:          _status == Fw::FW_SERIALIZE_OK,
        -: 1726:          static_cast<AssertArg>(_status)
       25: 1727:      );
        -: 1728:
        -: 1729:
        -: 1730:      this->m_Log_OutputPort[0].invoke(
        -: 1731:          _id,
        -: 1732:          _logTime,Fw::LOG_ACTIVITY_HI,
        -: 1733:          _logBuff
       25: 1734:      );
        -: 1735:
        -: 1736:    }
        -: 1737:
        -: 1738:    // Emit the event on the text log port
        -: 1739:#if FW_ENABLE_TEXT_LOGGING
       25: 1740:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1741:
        -: 1742:#if FW_OBJECT_NAMES == 1
        -: 1743:      const char* _formatString =
       25: 1744:        "(%s) %s: ID filter ID %d removed.";
        -: 1745:#else
        -: 1746:      const char* _formatString =
        -: 1747:        "%s: ID filter ID %d removed.";
        -: 1748:#endif
        -: 1749:
        -: 1750:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1751:
        -: 1752:      (void) snprintf(
        -: 1753:          _textBuffer,
        -: 1754:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1755:          _formatString,
        -: 1756:#if FW_OBJECT_NAMES == 1
        -: 1757:          this->m_objName,
        -: 1758:#endif
        -: 1759:          "ALOG_ID_FILTER_REMOVED "
        -: 1760:        , ID
       25: 1761:      );
        -: 1762:
        -: 1763:      // Null terminate
       25: 1764:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
       25: 1765:      Fw::TextLogString _logString = _textBuffer;
        -: 1766:      this->m_LogText_OutputPort[0].invoke(
        -: 1767:          _id,
        -: 1768:          _logTime,Fw::TEXT_LOG_ACTIVITY_HI,
        -: 1769:          _logString
       25: 1770:      );
        -: 1771:
       25: 1772:    }
        -: 1773:#endif
        -: 1774:
       25: 1775:  }
        -: 1776:
        1: 1777:  void ActiveLoggerComponentBase ::
        -: 1778:    log_WARNING_LO_ALOG_ID_FILTER_NOT_FOUND(
        -: 1779:        U32 ID
        -: 1780:    )
        -: 1781:  {
        -: 1782:
        -: 1783:    // Get the time
        1: 1784:    Fw::Time _logTime;
        1: 1785:    if (this->m_Time_OutputPort[0].isConnected()) {
    #####: 1786:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1787:    }
        -: 1788:    
        1: 1789:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1790:    
        1: 1791:    _id = EVENTID_ALOG_ID_FILTER_NOT_FOUND;
        -: 1792:
        -: 1793:    // Emit the event on the log port
        1: 1794:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1795:
        1: 1796:      Fw::LogBuffer _logBuff;
        -: 1797:      Fw::SerializeStatus _status;
        -: 1798:
        -: 1799:#if FW_AMPCS_COMPATIBLE
        -: 1800:      // Serialize the number of arguments
        -: 1801:      _status = _logBuff.serialize(static_cast<U8>(1));
        -: 1802:      FW_ASSERT(
        -: 1803:          _status == Fw::FW_SERIALIZE_OK,
        -: 1804:          static_cast<AssertArg>(_status)
        -: 1805:      );
        -: 1806:#endif
        -: 1807:
        -: 1808:#if FW_AMPCS_COMPATIBLE
        -: 1809:      // Serialize the argument size
        -: 1810:      _status = _logBuff.serialize(
        -: 1811:          static_cast<U8>(sizeof(ID))
        -: 1812:      );
        -: 1813:      FW_ASSERT(
        -: 1814:          _status == Fw::FW_SERIALIZE_OK,
        -: 1815:          static_cast<AssertArg>(_status)
        -: 1816:      );
        -: 1817:#endif
        -: 1818:
        1: 1819:      _status = _logBuff.serialize(ID);
        -: 1820:      FW_ASSERT(
        -: 1821:          _status == Fw::FW_SERIALIZE_OK,
        -: 1822:          static_cast<AssertArg>(_status)
        1: 1823:      );
        -: 1824:
        -: 1825:
        -: 1826:      this->m_Log_OutputPort[0].invoke(
        -: 1827:          _id,
        -: 1828:          _logTime,Fw::LOG_WARNING_LO,
        -: 1829:          _logBuff
        1: 1830:      );
        -: 1831:
        -: 1832:    }
        -: 1833:
        -: 1834:    // Emit the event on the text log port
        -: 1835:#if FW_ENABLE_TEXT_LOGGING
        1: 1836:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1837:
        -: 1838:#if FW_OBJECT_NAMES == 1
        -: 1839:      const char* _formatString =
        1: 1840:        "(%s) %s: ID filter ID %d not found.";
        -: 1841:#else
        -: 1842:      const char* _formatString =
        -: 1843:        "%s: ID filter ID %d not found.";
        -: 1844:#endif
        -: 1845:
        -: 1846:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1847:
        -: 1848:      (void) snprintf(
        -: 1849:          _textBuffer,
        -: 1850:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1851:          _formatString,
        -: 1852:#if FW_OBJECT_NAMES == 1
        -: 1853:          this->m_objName,
        -: 1854:#endif
        -: 1855:          "ALOG_ID_FILTER_NOT_FOUND "
        -: 1856:        , ID
        1: 1857:      );
        -: 1858:
        -: 1859:      // Null terminate
        1: 1860:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        1: 1861:      Fw::TextLogString _logString = _textBuffer;
        -: 1862:      this->m_LogText_OutputPort[0].invoke(
        -: 1863:          _id,
        -: 1864:          _logTime,Fw::TEXT_LOG_WARNING_LO,
        -: 1865:          _logString
        1: 1866:      );
        -: 1867:
        1: 1868:    }
        -: 1869:#endif
        -: 1870:
        1: 1871:  }
        -: 1872:
        -: 1873:  // ----------------------------------------------------------------------
        -: 1874:  // Invocation functions for interfaces
        -: 1875:  // ----------------------------------------------------------------------
        -: 1876:
      168: 1877:  void ActiveLoggerComponentBase::
        -: 1878:    loqQueue_internalInterfaceInvoke(
        -: 1879:        FwEventIdType id, Fw::Time& timeTag, QueueLogSeverity severity, Fw::LogBuffer& args
        -: 1880:    )
        -: 1881:  {
        -: 1882:
      168: 1883:    ComponentIpcSerializableBuffer msg;
        -: 1884:    Fw::SerializeStatus _status;
        -: 1885:
        -: 1886:    // Serialize the message ID
      168: 1887:    _status = msg.serialize(static_cast<NATIVE_INT_TYPE>(INT_IF_LOQQUEUE));
        -: 1888:    FW_ASSERT (
        -: 1889:        _status == Fw::FW_SERIALIZE_OK,
        -: 1890:        static_cast<AssertArg>(_status)
      168: 1891:    );
        -: 1892:
        -: 1893:    // Fake port number to make message dequeue work
      168: 1894:    _status = msg.serialize(static_cast<NATIVE_INT_TYPE>(0));
        -: 1895:    FW_ASSERT (
        -: 1896:        _status == Fw::FW_SERIALIZE_OK,
        -: 1897:        static_cast<AssertArg>(_status)
      168: 1898:    );
        -: 1899:
      168: 1900:    _status = msg.serialize(id);
      168: 1901:    FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<AssertArg>(_status));
      168: 1902:    _status = msg.serialize(timeTag);
      168: 1903:    FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<AssertArg>(_status));
      168: 1904:    _status = msg.serialize(static_cast<FwEnumStoreType>(severity));
      168: 1905:    FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<AssertArg>(_status));
      168: 1906:    _status = msg.serialize(args);
      168: 1907:    FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<AssertArg>(_status));
        -: 1908:
        -: 1909:    Os::Queue::QueueStatus qStatus =
      168: 1910:      this->m_queue.send(msg, 1);
        -: 1911:    FW_ASSERT(
        -: 1912:        qStatus == Os::Queue::QUEUE_OK,
        -: 1913:        static_cast<AssertArg>(qStatus)
      168: 1914:    );
        -: 1915:
      168: 1916:  }
        -: 1917:
        -: 1918:  // ----------------------------------------------------------------------
        -: 1919:  // Calls for messages received on typed input ports
        -: 1920:  // ----------------------------------------------------------------------
        -: 1921:
      199: 1922:  void ActiveLoggerComponentBase ::
        -: 1923:    m_p_LogRecv_in(
        -: 1924:        Fw::PassiveComponentBase* callComp,
        -: 1925:        NATIVE_INT_TYPE portNum,
        -: 1926:        FwEventIdType id, Fw::Time &timeTag, Fw::LogSeverity severity, Fw::LogBuffer &args
        -: 1927:    )
        -: 1928:  {
      199: 1929:    FW_ASSERT(callComp);
        -: 1930:    ActiveLoggerComponentBase* compPtr =
      199: 1931:      (ActiveLoggerComponentBase*) callComp;
      199: 1932:    compPtr->LogRecv_handlerBase(portNum, id, timeTag, severity, args);
      199: 1933:  }
        -: 1934:
        -: 1935:  // ----------------------------------------------------------------------
        -: 1936:  // Port handler base-class functions for typed input ports
        -: 1937:  // ----------------------------------------------------------------------
        -: 1938:
      199: 1939:  void ActiveLoggerComponentBase ::
        -: 1940:    LogRecv_handlerBase(
        -: 1941:        NATIVE_INT_TYPE portNum,
        -: 1942:        FwEventIdType id, Fw::Time &timeTag, Fw::LogSeverity severity, Fw::LogBuffer &args
        -: 1943:    )
        -: 1944:  {
        -: 1945:
        -: 1946:    // Make sure port number is valid
      199: 1947:    FW_ASSERT(portNum < this->getNum_LogRecv_InputPorts(),static_cast<AssertArg>(portNum));
        -: 1948:
        -: 1949:    // Down call to pure virtual handler method implemented in Impl class
      199: 1950:    this->LogRecv_handler(portNum, id, timeTag, severity, args);
        -: 1951:
      199: 1952:  }
        -: 1953:
        -: 1954:  // ----------------------------------------------------------------------
        -: 1955:  // Message dispatch method for active and queued components. Called
        -: 1956:  // by active component thread or implementation code for queued components
        -: 1957:  // ----------------------------------------------------------------------
        -: 1958:
      267: 1959:  Fw::QueuedComponentBase::MsgDispatchStatus ActiveLoggerComponentBase ::
        -: 1960:    doDispatch(void)
        -: 1961:  {
        -: 1962:
      267: 1963:    ComponentIpcSerializableBuffer msg;
        -: 1964:    NATIVE_INT_TYPE priority;
        -: 1965:
      267: 1966:    Os::Queue::QueueStatus msgStatus = this->m_queue.receive(msg,priority);
        -: 1967:    FW_ASSERT(
        -: 1968:        msgStatus == Os::Queue::QUEUE_OK,
        -: 1969:        static_cast<AssertArg>(msgStatus)
      267: 1970:    );
        -: 1971:
        -: 1972:    // Reset to beginning of buffer
      267: 1973:    msg.resetDeser();
        -: 1974:
        -: 1975:    NATIVE_INT_TYPE desMsg;
      267: 1976:    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
        -: 1977:    FW_ASSERT(
        -: 1978:        deserStatus == Fw::FW_SERIALIZE_OK,
        -: 1979:        static_cast<AssertArg>(deserStatus)
      267: 1980:    );
        -: 1981:
      267: 1982:    MsgTypeEnum msgType = static_cast<MsgTypeEnum>(desMsg);
        -: 1983:
      267: 1984:    if (msgType == ACTIVELOGGER_COMPONENT_EXIT) {
    #####: 1985:      return MSG_DISPATCH_EXIT;
        -: 1986:    }
        -: 1987:
        -: 1988:    NATIVE_INT_TYPE portNum;
      267: 1989:    deserStatus = msg.deserialize(portNum);
        -: 1990:    FW_ASSERT(
        -: 1991:        deserStatus == Fw::FW_SERIALIZE_OK,
        -: 1992:        static_cast<AssertArg>(deserStatus)
      267: 1993:    );
        -: 1994:
      267: 1995:    switch (msgType) {
        -: 1996:
        -: 1997:      // Handle command ALOG_DUMP_EVENT_LOG
        -: 1998:      case CMD_ALOG_DUMP_EVENT_LOG: {
        -: 1999:        // Deserialize opcode
        -: 2000:        FwOpcodeType opCode;
       17: 2001:        deserStatus = msg.deserialize(opCode);
        -: 2002:        FW_ASSERT (
        -: 2003:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 2004:            static_cast<AssertArg>(deserStatus)
       17: 2005:        );
        -: 2006:
        -: 2007:        // Deserialize command sequence
        -: 2008:        U32 cmdSeq;
       17: 2009:        deserStatus = msg.deserialize(cmdSeq);
        -: 2010:        FW_ASSERT (
        -: 2011:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 2012:            static_cast<AssertArg>(deserStatus)
       17: 2013:        );
        -: 2014:
        -: 2015:        // Deserialize command argument buffer
       17: 2016:        Fw::CmdArgBuffer args;
       17: 2017:        deserStatus = msg.deserialize(args);
        -: 2018:        FW_ASSERT (
        -: 2019:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 2020:            static_cast<AssertArg>(deserStatus)
       17: 2021:        );
        -: 2022:
        -: 2023:        // Reset buffer
       17: 2024:        args.resetDeser();
        -: 2025:
        -: 2026:        // Deserialize argument filename
       34: 2027:        Fw::CmdStringArg filename;
       17: 2028:        deserStatus = args.deserialize(filename);
       17: 2029:        if (deserStatus != Fw::FW_SERIALIZE_OK) {
    #####: 2030:          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
        -: 2031:            this->cmdResponse_out(
        -: 2032:                opCode,
        -: 2033:                cmdSeq,
        -: 2034:                Fw::COMMAND_FORMAT_ERROR
    #####: 2035:            );
        -: 2036:          }
        -: 2037:          // Don't crash the task if bad arguments were passed from the ground
    #####: 2038:          break;
        -: 2039:        }
        -: 2040:
        -: 2041:        // Make sure there was no data left over.
        -: 2042:        // That means the argument buffer size was incorrect.
       17: 2043:        if (args.getBuffLeft() != 0) {
    #####: 2044:          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    #####: 2045:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_FORMAT_ERROR);
        -: 2046:          }
        -: 2047:          // Don't crash the task if bad arguments were passed from the ground
    #####: 2048:          break;
        -: 2049:        }
        -: 2050:
        -: 2051:        // Call handler function
        -: 2052:        this->ALOG_DUMP_EVENT_LOG_cmdHandler(
        -: 2053:            opCode,
        -: 2054:            cmdSeq,
        -: 2055:            filename
       17: 2056:        );
        -: 2057:
       34: 2058:        break;
        -: 2059:
        -: 2060:      }
        -: 2061:
        -: 2062:      // Handle command ALOG_SET_ID_FILTER
        -: 2063:      case CMD_ALOG_SET_ID_FILTER: {
        -: 2064:        // Deserialize opcode
        -: 2065:        FwOpcodeType opCode;
       81: 2066:        deserStatus = msg.deserialize(opCode);
        -: 2067:        FW_ASSERT (
        -: 2068:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 2069:            static_cast<AssertArg>(deserStatus)
       81: 2070:        );
        -: 2071:
        -: 2072:        // Deserialize command sequence
        -: 2073:        U32 cmdSeq;
       81: 2074:        deserStatus = msg.deserialize(cmdSeq);
        -: 2075:        FW_ASSERT (
        -: 2076:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 2077:            static_cast<AssertArg>(deserStatus)
       81: 2078:        );
        -: 2079:
        -: 2080:        // Deserialize command argument buffer
       81: 2081:        Fw::CmdArgBuffer args;
       81: 2082:        deserStatus = msg.deserialize(args);
        -: 2083:        FW_ASSERT (
        -: 2084:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 2085:            static_cast<AssertArg>(deserStatus)
       81: 2086:        );
        -: 2087:
        -: 2088:        // Reset buffer
       81: 2089:        args.resetDeser();
        -: 2090:
        -: 2091:        // Deserialize argument ID
        -: 2092:        U32 ID;
       81: 2093:        deserStatus = args.deserialize(ID);
       81: 2094:        if (deserStatus != Fw::FW_SERIALIZE_OK) {
    #####: 2095:          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
        -: 2096:            this->cmdResponse_out(
        -: 2097:                opCode,
        -: 2098:                cmdSeq,
        -: 2099:                Fw::COMMAND_FORMAT_ERROR
    #####: 2100:            );
        -: 2101:          }
        -: 2102:          // Don't crash the task if bad arguments were passed from the ground
    #####: 2103:          break;
        -: 2104:        }
        -: 2105:
        -: 2106:        // Deserialize argument IdFilterEnable
        -: 2107:        IdFilterEnabled IdFilterEnable;
        -: 2108:        FwEnumStoreType IdFilterEnableInt;
       81: 2109:        deserStatus = args.deserialize(IdFilterEnableInt);
       81: 2110:        IdFilterEnable = (IdFilterEnabled)IdFilterEnableInt;
       81: 2111:        if (deserStatus != Fw::FW_SERIALIZE_OK) {
    #####: 2112:          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
        -: 2113:            this->cmdResponse_out(
        -: 2114:                opCode,
        -: 2115:                cmdSeq,
        -: 2116:                Fw::COMMAND_FORMAT_ERROR
    #####: 2117:            );
        -: 2118:          }
        -: 2119:          // Don't crash the task if bad arguments were passed from the ground
    #####: 2120:          break;
        -: 2121:        }
        -: 2122:
        -: 2123:        // Make sure there was no data left over.
        -: 2124:        // That means the argument buffer size was incorrect.
       81: 2125:        if (args.getBuffLeft() != 0) {
    #####: 2126:          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    #####: 2127:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_FORMAT_ERROR);
        -: 2128:          }
        -: 2129:          // Don't crash the task if bad arguments were passed from the ground
    #####: 2130:          break;
        -: 2131:        }
        -: 2132:
        -: 2133:        // Call handler function
        -: 2134:        this->ALOG_SET_ID_FILTER_cmdHandler(
        -: 2135:            opCode,
        -: 2136:            cmdSeq,
        -: 2137:            ID, IdFilterEnable
       81: 2138:        );
        -: 2139:
       81: 2140:        break;
        -: 2141:
        -: 2142:      }
        -: 2143:
        -: 2144:      // Handle command ALOG_DUMP_FILTER_STATE
        -: 2145:      case CMD_ALOG_DUMP_FILTER_STATE: {
        -: 2146:        // Deserialize opcode
        -: 2147:        FwOpcodeType opCode;
        1: 2148:        deserStatus = msg.deserialize(opCode);
        -: 2149:        FW_ASSERT (
        -: 2150:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 2151:            static_cast<AssertArg>(deserStatus)
        1: 2152:        );
        -: 2153:
        -: 2154:        // Deserialize command sequence
        -: 2155:        U32 cmdSeq;
        1: 2156:        deserStatus = msg.deserialize(cmdSeq);
        -: 2157:        FW_ASSERT (
        -: 2158:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 2159:            static_cast<AssertArg>(deserStatus)
        1: 2160:        );
        -: 2161:
        -: 2162:        // Deserialize command argument buffer
        1: 2163:        Fw::CmdArgBuffer args;
        1: 2164:        deserStatus = msg.deserialize(args);
        -: 2165:        FW_ASSERT (
        -: 2166:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 2167:            static_cast<AssertArg>(deserStatus)
        1: 2168:        );
        -: 2169:
        -: 2170:        // Reset buffer
        1: 2171:        args.resetDeser();
        -: 2172:
        -: 2173:        // Make sure there was no data left over.
        -: 2174:        // That means the argument buffer size was incorrect.
        1: 2175:        if (args.getBuffLeft() != 0) {
    #####: 2176:          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    #####: 2177:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_FORMAT_ERROR);
        -: 2178:          }
        -: 2179:          // Don't crash the task if bad arguments were passed from the ground
    #####: 2180:          break;
        -: 2181:        }
        -: 2182:
        -: 2183:        // Call handler function
        1: 2184:        this->ALOG_DUMP_FILTER_STATE_cmdHandler(opCode, cmdSeq);
        -: 2185:
        1: 2186:        break;
        -: 2187:
        -: 2188:      }
        -: 2189:
        -: 2190:      // Handle internal interface loqQueue
        -: 2191:      case INT_IF_LOQQUEUE: {
        -: 2192:
        -: 2193:        FwEventIdType id;
      168: 2194:        deserStatus = msg.deserialize(id);
        -: 2195:
        -: 2196:        // Internal interfaces should always deserialize
        -: 2197:        FW_ASSERT(
        -: 2198:            Fw::FW_SERIALIZE_OK == deserStatus,
        -: 2199:            static_cast<AssertArg>(deserStatus)
      168: 2200:        );
        -: 2201:
      168: 2202:        Fw::Time timeTag;
      168: 2203:        deserStatus = msg.deserialize(timeTag);
        -: 2204:
        -: 2205:        // Internal interfaces should always deserialize
        -: 2206:        FW_ASSERT(
        -: 2207:            Fw::FW_SERIALIZE_OK == deserStatus,
        -: 2208:            static_cast<AssertArg>(deserStatus)
      168: 2209:        );
        -: 2210:
        -: 2211:        QueueLogSeverity severity;
        -: 2212:        FwEnumStoreType severityInt;
      168: 2213:        deserStatus = msg.deserialize(severityInt);
      168: 2214:        severity = static_cast<QueueLogSeverity>(severityInt);
        -: 2215:
        -: 2216:        // Internal interfaces should always deserialize
        -: 2217:        FW_ASSERT(
        -: 2218:            Fw::FW_SERIALIZE_OK == deserStatus,
        -: 2219:            static_cast<AssertArg>(deserStatus)
      168: 2220:        );
        -: 2221:
      336: 2222:        Fw::LogBuffer args;
      168: 2223:        deserStatus = msg.deserialize(args);
        -: 2224:
        -: 2225:        // Internal interfaces should always deserialize
        -: 2226:        FW_ASSERT(
        -: 2227:            Fw::FW_SERIALIZE_OK == deserStatus,
        -: 2228:            static_cast<AssertArg>(deserStatus)
      168: 2229:        );
        -: 2230:
        -: 2231:        // Make sure there was no data left over.
        -: 2232:        // That means the buffer size was incorrect.
      168: 2233:        FW_ASSERT(
        -: 2234:            msg.getBuffLeft() == 0,
        -: 2235:            static_cast<AssertArg>(msg.getBuffLeft())
      168: 2236:        );
        -: 2237:
        -: 2238:        // Call handler function
      168: 2239:        this->loqQueue_internalInterfaceHandler(id, timeTag, severity, args);
        -: 2240:
      336: 2241:        break;
        -: 2242:
        -: 2243:      }
        -: 2244:
        -: 2245:      default:
    #####: 2246:        return MSG_DISPATCH_ERROR;
        -: 2247:
        -: 2248:    }
        -: 2249:
      267: 2250:    return MSG_DISPATCH_OK;
        -: 2251:
        -: 2252:  }
        -: 2253:
        -: 2254:} // end namespace Svc
