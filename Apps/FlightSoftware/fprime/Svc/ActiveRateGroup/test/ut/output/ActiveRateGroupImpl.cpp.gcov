        -:    0:Source:/home/tcanham/source/isf/Svc/ActiveRateGroup/ActiveRateGroupImpl.cpp
        -:    0:Programs:10
        -:    1:/*
        -:    2:* \author: Tim Canham
        -:    3:* \file:
        -:    4:* \brief
        -:    5:*
        -:    6:* This file implements the ActiveRateGroup component,
        -:    7:* which invokes a set of components the comprise the rate group.
        -:    8:*
        -:    9:*   Copyright 2014-2015, by the California Institute of Technology.
        -:   10:*   ALL RIGHTS RESERVED. United States Government Sponsorship
        -:   11:*   acknowledged.
        -:   13:*
        -:   19:*/
        -:   20:
        -:   21:#include <Svc/ActiveRateGroup/ActiveRateGroupImpl.hpp>
        -:   22:#include <Svc/ActiveRateGroup/ActiveRateGroupImplCfg.hpp>
        -:   23:#include <Fw/Types/BasicTypes.hpp>
        -:   24:#include <Fw/Types/Assert.hpp>
        -:   25:#include <Os/Log.hpp>
        -:   26:
        -:   27:namespace Svc {
        -:   28:
        -:   29:#if FW_OBJECT_NAMES == 1
       30:   30:    ActiveRateGroupImpl::ActiveRateGroupImpl(const char* compName, NATIVE_UINT_TYPE contexts[], NATIVE_UINT_TYPE numContexts) :
        -:   31:        ActiveRateGroupComponentBase(compName),
        -:   32:#else
        -:   33:    ActiveRateGroupImpl::ActiveRateGroupImpl(NATIVE_UINT_TYPE contexts[], NATIVE_UINT_TYPE numContexts) :
        -:   34:#endif
       30:   35:        m_cycles(0), m_maxTime(0),m_cycleStarted(false),m_overrunThrottle(0),m_cycleSlips(0) {
       30:   36:        FW_ASSERT(contexts);
       30:   37:        FW_ASSERT(numContexts == static_cast<NATIVE_UINT_TYPE>(this->getNum_RateGroupMemberOut_OutputPorts()),numContexts,this->getNum_RateGroupMemberOut_OutputPorts());
       60:   38:        FW_ASSERT(FW_NUM_ARRAY_ELEMENTS(this->m_contexts) == this->getNum_RateGroupMemberOut_OutputPorts(),
        -:   39:                static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_contexts)),
       60:   40:                this->getNum_RateGroupMemberOut_OutputPorts());
        -:   41:
        -:   42:        // copy context values
      180:   43:        for (NATIVE_INT_TYPE entry = 0; entry < this->getNum_RateGroupMemberOut_OutputPorts(); entry++) {
      150:   44:            this->m_contexts[entry] = contexts[entry];
        -:   45:        }
       30:   46:    }
        -:   47:    
       30:   48:    void ActiveRateGroupImpl::init(NATIVE_INT_TYPE queueDepth, NATIVE_INT_TYPE instance) {
       30:   49:        ActiveRateGroupComponentBase::init(queueDepth,instance);
       30:   50:    }
        -:   51:
       30:   52:    ActiveRateGroupImpl::~ActiveRateGroupImpl(void) {
        -:   53:
       30:   54:    }
        -:   55:
       30:   56:    void ActiveRateGroupImpl::preamble(void) {
       30:   57:        this->log_DIAGNOSTIC_RateGroupStarted();
       30:   58:    }
        -:   59:
      135:   60:    void ActiveRateGroupImpl::CycleIn_handler(NATIVE_INT_TYPE portNum, Svc::TimerVal cycle_start) {
        -:   61:
      135:   62:        TimerVal end;
        -:   63:
      135:   64:        this->m_cycleStarted = false;
        -:   65:
        -:   66:        // invoke any members of the rate group
      810:   67:        for (NATIVE_INT_TYPE port = 0; port < this->getNum_RateGroupMemberOut_OutputPorts(); port++) {
      675:   68:            if (this->isConnected_RateGroupMemberOut_OutputPort(port)) {
      675:   69:                this->RateGroupMemberOut_out(port,this->m_contexts[port]);
        -:   70:            }
        -:   71:        }
        -:   72:
        -:   73:        // grab timer for end of cycle
      135:   74:        end.take();
        -:   75:
        -:   76:        // get rate group execution time
      135:   77:        U32 cycle_time = end.diffUSec(cycle_start);
        -:   78:
        -:   79:        // check to see if the time has exceeded the previous maximum
      135:   80:        if (cycle_time > this->m_maxTime) {
       90:   81:            this->m_maxTime = cycle_time;
        -:   82:        }
        -:   83:
        -:   84:        // update cycle telemetry
      135:   85:        this->tlmWrite_RgMaxTime(this->m_maxTime);
        -:   86:
        -:   87:        // check for cycle slip. That will happen if new cycle message has been received
        -:   88:        // which will cause flag will be set again.
      135:   89:        if (this->m_cycleStarted) {
      105:   90:            this->m_cycleSlips++;
      105:   91:            if (this->m_overrunThrottle < ACTIVE_RATE_GROUP_OVERRUN_THROTTLE) {
       90:   92:                this->log_WARNING_HI_RateGroupCycleSlip(this->m_cycles);
       90:   93:                this->m_overrunThrottle++;
        -:   94:            }
        -:   95:            // update cycle cycle slips
      105:   96:            this->tlmWrite_RgCycleSlips(this->m_cycleSlips);
        -:   97:        } else { // if cycle is okay start decrementing throttle value
       30:   98:            if (this->m_overrunThrottle > 0) {
       15:   99:                this->m_overrunThrottle--;
        -:  100:            }
        -:  101:        }
        -:  102:
        -:  103:        // increment cycle
      135:  104:        this->m_cycles++;
        -:  105:
      135:  106:    }
        -:  107:
      240:  108:    void ActiveRateGroupImpl::CycleIn_preMsgHook(NATIVE_INT_TYPE portNum, Svc::TimerVal cycle_start) {
        -:  109:        // set flag to indicate cycle has started. Check in thread for overflow.
      240:  110:        this->m_cycleStarted = true;
      240:  111:    }
        -:  112:
        -:  113:}
