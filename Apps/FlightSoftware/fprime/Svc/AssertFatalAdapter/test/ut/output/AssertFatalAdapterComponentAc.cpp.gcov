        -:    0:Source:/home/tcanham/source/isf/Svc/AssertFatalAdapter/AssertFatalAdapterComponentAc.cpp
        -:    0:Programs:2
        -:    1:// ====================================================================== 
        -:    2:// \title  AssertFatalAdapterComponentAc.hpp
        -:    3:// \author Auto-generated
        -:    4:// \brief  cpp file for AssertFatalAdapter component base class
        -:    5://
        -:    6:// \copyright
        -:    7:// Copyright 2009-2015, by the California Institute of Technology.
        -:    8:// ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9:// acknowledged.
        -:   11:// 
        -:   18:// ====================================================================== 
        -:   19:
        -:   20:#include <stdio.h>
        -:   21:#include <Fw/Cfg/Config.hpp>
        -:   22:#include <Svc/AssertFatalAdapter/AssertFatalAdapterComponentAc.hpp>
        -:   23:#include <Fw/Types/Assert.hpp>
        -:   24:#if FW_ENABLE_TEXT_LOGGING
        -:   25:#include <Fw/Types/EightyCharString.hpp>
        -:   26:#endif
        -:   27:
        -:   28:
        -:   29:namespace Svc {
        -:   30:
        -:   31:  // ----------------------------------------------------------------------
        -:   32:  // Typed connectors for output ports
        -:   33:  // ----------------------------------------------------------------------
        -:   34:
        1:   35:  void AssertFatalAdapterComponentBase ::
        -:   36:    set_Time_OutputPort(
        -:   37:        NATIVE_INT_TYPE portNum,
        -:   38:        Fw::InputTimePort* port
        -:   39:    )
        -:   40:  {
        1:   41:    FW_ASSERT(portNum < this->getNum_Time_OutputPorts(),static_cast<AssertArg>(portNum));
        1:   42:    this->m_Time_OutputPort[portNum].addCallPort(port);
        1:   43:  }
        -:   44:
        1:   45:  void AssertFatalAdapterComponentBase ::
        -:   46:    set_Log_OutputPort(
        -:   47:        NATIVE_INT_TYPE portNum,
        -:   48:        Fw::InputLogPort* port
        -:   49:    )
        -:   50:  {
        1:   51:    FW_ASSERT(portNum < this->getNum_Log_OutputPorts(),static_cast<AssertArg>(portNum));
        1:   52:    this->m_Log_OutputPort[portNum].addCallPort(port);
        1:   53:  }
        -:   54:
        -:   55:#if FW_ENABLE_TEXT_LOGGING == 1
        1:   56:  void AssertFatalAdapterComponentBase ::
        -:   57:    set_LogText_OutputPort(
        -:   58:        NATIVE_INT_TYPE portNum,
        -:   59:        Fw::InputLogTextPort* port
        -:   60:    )
        -:   61:  {
        1:   62:    FW_ASSERT(portNum < this->getNum_LogText_OutputPorts(),static_cast<AssertArg>(portNum));
        1:   63:    this->m_LogText_OutputPort[portNum].addCallPort(port);
        1:   64:  }
        -:   65:#endif
        -:   66:
        -:   67:  // ----------------------------------------------------------------------
        -:   68:  // Serialization connectors for output ports
        -:   69:  // ----------------------------------------------------------------------
        -:   70:
        -:   71:#if FW_PORT_SERIALIZATION
        -:   72:
    #####:   73:  void AssertFatalAdapterComponentBase ::
        -:   74:    set_Time_OutputPort(
        -:   75:        NATIVE_INT_TYPE portNum,
        -:   76:        Fw::InputSerializePort *port
        -:   77:    )
        -:   78:  {
    #####:   79:    FW_ASSERT(portNum < this->getNum_Time_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:   80:    return this->m_Time_OutputPort[portNum].registerSerialPort(port);
        -:   81:  }
        -:   82:
    #####:   83:  void AssertFatalAdapterComponentBase ::
        -:   84:    set_Log_OutputPort(
        -:   85:        NATIVE_INT_TYPE portNum,
        -:   86:        Fw::InputSerializePort *port
        -:   87:    )
        -:   88:  {
    #####:   89:    FW_ASSERT(portNum < this->getNum_Log_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:   90:    return this->m_Log_OutputPort[portNum].registerSerialPort(port);
        -:   91:  }
        -:   92:
        -:   93:#if FW_ENABLE_TEXT_LOGGING == 1
    #####:   94:  void AssertFatalAdapterComponentBase ::
        -:   95:    set_LogText_OutputPort(
        -:   96:        NATIVE_INT_TYPE portNum,
        -:   97:        Fw::InputSerializePort *port
        -:   98:    )
        -:   99:  {
    #####:  100:    FW_ASSERT(portNum < this->getNum_LogText_OutputPorts(),static_cast<AssertArg>(portNum));
    #####:  101:    return this->m_LogText_OutputPort[portNum].registerSerialPort(port);
        -:  102:  }
        -:  103:#endif
        -:  104:
        -:  105:#endif
        -:  106:
        -:  107:  // ----------------------------------------------------------------------
        -:  108:  // Component construction, initialization, and destruction
        -:  109:  // ----------------------------------------------------------------------
        -:  110:
        1:  111:  AssertFatalAdapterComponentBase ::
        -:  112:#if FW_OBJECT_NAMES == 1
        -:  113:    AssertFatalAdapterComponentBase(const char* compName) :
        1:  114:      Fw::PassiveComponentBase(compName)
        -:  115:#else
        -:  116:    AssertFatalAdapterComponentBase() :
        -:  117:      Fw::PassiveComponentBase()
        -:  118:#endif
        -:  119:  {
        -:  120:
        -:  121:
        -:  122:  
        -:  123:  
        1:  124:  }
        -:  125:
        1:  126:  void AssertFatalAdapterComponentBase ::
        -:  127:    init(NATIVE_INT_TYPE instance)
        -:  128:  {
        -:  129:
        -:  130:    // Initialize base class
        1:  131:    Fw::PassiveComponentBase::init(instance);
        -:  132:
        -:  133:    // Initialize output port Time
        3:  134:    for (
        1:  135:        NATIVE_INT_TYPE port = 0;
        2:  136:        port < this->getNum_Time_OutputPorts();
        -:  137:        port++
        -:  138:    ) {
        1:  139:      this->m_Time_OutputPort[port].init();
        -:  140:
        -:  141:#if FW_OBJECT_NAMES == 1
        -:  142:      char portName[80];
        1:  143:      (void) snprintf(
        -:  144:          portName,
        -:  145:          sizeof(portName),
        -:  146:          "%s_Time_OutputPort[%d]",
        -:  147:          this->m_objName,
        -:  148:          port
        1:  149:      );
        1:  150:      this->m_Time_OutputPort[port].setObjName(portName);
        -:  151:#endif
        -:  152:
        -:  153:    }
        -:  154:
        -:  155:    // Initialize output port Log
        3:  156:    for (
        1:  157:        NATIVE_INT_TYPE port = 0;
        2:  158:        port < this->getNum_Log_OutputPorts();
        -:  159:        port++
        -:  160:    ) {
        1:  161:      this->m_Log_OutputPort[port].init();
        -:  162:
        -:  163:#if FW_OBJECT_NAMES == 1
        -:  164:      char portName[80];
        1:  165:      (void) snprintf(
        -:  166:          portName,
        -:  167:          sizeof(portName),
        -:  168:          "%s_Log_OutputPort[%d]",
        -:  169:          this->m_objName,
        -:  170:          port
        1:  171:      );
        1:  172:      this->m_Log_OutputPort[port].setObjName(portName);
        -:  173:#endif
        -:  174:
        -:  175:    }
        -:  176:
        -:  177:    // Initialize output port LogText
        -:  178:#if FW_ENABLE_TEXT_LOGGING == 1
        3:  179:    for (
        1:  180:        NATIVE_INT_TYPE port = 0;
        2:  181:        port < this->getNum_LogText_OutputPorts();
        -:  182:        port++
        -:  183:    ) {
        1:  184:      this->m_LogText_OutputPort[port].init();
        -:  185:
        -:  186:#if FW_OBJECT_NAMES == 1
        -:  187:      char portName[80];
        1:  188:      (void) snprintf(
        -:  189:          portName,
        -:  190:          sizeof(portName),
        -:  191:          "%s_LogText_OutputPort[%d]",
        -:  192:          this->m_objName,
        -:  193:          port
        1:  194:      );
        1:  195:      this->m_LogText_OutputPort[port].setObjName(portName);
        -:  196:#endif
        -:  197:
        -:  198:    }
        -:  199:#endif
        -:  200:
        -:  201:
        1:  202:  }
        -:  203:
        1:  204:  AssertFatalAdapterComponentBase::
        1:  205:    ~AssertFatalAdapterComponentBase() {
        -:  206:
        1:  207:  }
        -:  208:
        -:  209:  // ----------------------------------------------------------------------
        -:  210:  // Invocation functions for output ports
        -:  211:  // ----------------------------------------------------------------------
        -:  212:
        -:  213:  // ----------------------------------------------------------------------
        -:  214:  // Getters for numbers of ports
        -:  215:  // ----------------------------------------------------------------------
        -:  216:
        3:  217:  NATIVE_INT_TYPE AssertFatalAdapterComponentBase ::
        -:  218:    getNum_Time_OutputPorts(void)
        -:  219:  {
        3:  220:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  221:        this->m_Time_OutputPort
        -:  222:    );
        -:  223:  }
        -:  224:
        3:  225:  NATIVE_INT_TYPE AssertFatalAdapterComponentBase ::
        -:  226:    getNum_Log_OutputPorts(void)
        -:  227:  {
        3:  228:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  229:        this->m_Log_OutputPort
        -:  230:    );
        -:  231:  }
        -:  232:
        -:  233:#if FW_ENABLE_TEXT_LOGGING == 1
        3:  234:  NATIVE_INT_TYPE AssertFatalAdapterComponentBase ::
        -:  235:    getNum_LogText_OutputPorts(void)
        -:  236:  {
        3:  237:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  238:        this->m_LogText_OutputPort
        -:  239:    );
        -:  240:  }
        -:  241:#endif
        -:  242:
        -:  243:  // ----------------------------------------------------------------------
        -:  244:  // Port connection status queries
        -:  245:  // ----------------------------------------------------------------------
        -:  246:
    #####:  247:  bool AssertFatalAdapterComponentBase ::
        -:  248:    isConnected_Time_OutputPort(NATIVE_INT_TYPE portNum)
        -:  249:  {
    #####:  250:     FW_ASSERT(
        -:  251:        portNum < this->getNum_Time_OutputPorts(),
        -:  252:        static_cast<AssertArg>(portNum)
    #####:  253:     );
    #####:  254:     return this->m_Time_OutputPort[portNum].isConnected();
        -:  255:  }
        -:  256:
    #####:  257:  bool AssertFatalAdapterComponentBase ::
        -:  258:    isConnected_Log_OutputPort(NATIVE_INT_TYPE portNum)
        -:  259:  {
    #####:  260:     FW_ASSERT(
        -:  261:        portNum < this->getNum_Log_OutputPorts(),
        -:  262:        static_cast<AssertArg>(portNum)
    #####:  263:     );
    #####:  264:     return this->m_Log_OutputPort[portNum].isConnected();
        -:  265:  }
        -:  266:
        -:  267:#if FW_ENABLE_TEXT_LOGGING == 1
    #####:  268:  bool AssertFatalAdapterComponentBase ::
        -:  269:    isConnected_LogText_OutputPort(NATIVE_INT_TYPE portNum)
        -:  270:  {
    #####:  271:     FW_ASSERT(
        -:  272:        portNum < this->getNum_LogText_OutputPorts(),
        -:  273:        static_cast<AssertArg>(portNum)
    #####:  274:     );
    #####:  275:     return this->m_LogText_OutputPort[portNum].isConnected();
        -:  276:  }
        -:  277:#endif
        -:  278:
        -:  279:  // ----------------------------------------------------------------------
        -:  280:  // Time
        -:  281:  // ----------------------------------------------------------------------
        -:  282:
    #####:  283:  Fw::Time AssertFatalAdapterComponentBase ::
        -:  284:    getTime(void) 
        -:  285:  {
    #####:  286:    if (this->m_Time_OutputPort[0].isConnected()) {
    #####:  287:      Fw::Time _time;
    #####:  288:      this->m_Time_OutputPort[0].invoke(_time);
    #####:  289:      return _time;
        -:  290:    } else {
    #####:  291:      return Fw::Time(TB_NONE,0,0);
        -:  292:    }
        -:  293:  }
        -:  294:
        -:  295:  // ----------------------------------------------------------------------
        -:  296:  // Event handling functions
        -:  297:  // ----------------------------------------------------------------------
        -:  298:
        1:  299:  void AssertFatalAdapterComponentBase ::
        -:  300:    log_FATAL_AF_ASSERT_0(
        -:  301:        Fw::LogStringArg& file, U32 line
        -:  302:    )
        -:  303:  {
        -:  304:  
        -:  305:
        -:  306:    // Get the time
        2:  307:    Fw::Time _logTime;
        1:  308:    if (this->m_Time_OutputPort[0].isConnected()) {
        1:  309:       this->m_Time_OutputPort[0].invoke( _logTime);
        -:  310:    }
        -:  311:    
        1:  312:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -:  313:    
        1:  314:    _id = this->getIdBase() + EVENTID_AF_ASSERT_0;
        -:  315:
        -:  316:    // Emit the event on the log port
        1:  317:    if (this->m_Log_OutputPort[0].isConnected()) {
        -:  318:
        2:  319:      Fw::LogBuffer _logBuff;
        1:  320:      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
        -:  321:
        -:  322:#if FW_AMPCS_COMPATIBLE
        -:  323:      // Serialize the number of arguments
        -:  324:      _status = _logBuff.serialize(static_cast<U8>(2));
        -:  325:      FW_ASSERT(
        -:  326:          _status == Fw::FW_SERIALIZE_OK,
        -:  327:          static_cast<AssertArg>(_status)
        -:  328:      );
        -:  329:#endif
        -:  330:
        1:  331:      file.setMaxSerialize(80);
        1:  332:      _status = _logBuff.serialize(file);
        -:  333:      FW_ASSERT(
        -:  334:          _status == Fw::FW_SERIALIZE_OK,
        -:  335:          static_cast<AssertArg>(_status)
        1:  336:      );
        -:  337:
        -:  338:#if FW_AMPCS_COMPATIBLE
        -:  339:      // Serialize the argument size
        -:  340:      _status = _logBuff.serialize(
        -:  341:          static_cast<U8>(sizeof(line))
        -:  342:      );
        -:  343:      FW_ASSERT(
        -:  344:          _status == Fw::FW_SERIALIZE_OK,
        -:  345:          static_cast<AssertArg>(_status)
        -:  346:      );
        -:  347:#endif
        -:  348:
        1:  349:      _status = _logBuff.serialize(line);
        -:  350:      FW_ASSERT(
        -:  351:          _status == Fw::FW_SERIALIZE_OK,
        -:  352:          static_cast<AssertArg>(_status)
        1:  353:      );
        -:  354:
        -:  355:
        1:  356:      this->m_Log_OutputPort[0].invoke(
        -:  357:          _id,
        -:  358:          _logTime,Fw::LOG_FATAL,
        -:  359:          _logBuff
        1:  360:      );
        -:  361:
        -:  362:    }
        -:  363:
        -:  364:    // Emit the event on the text log port
        -:  365:#if FW_ENABLE_TEXT_LOGGING
        1:  366:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -:  367:
        -:  368:#if FW_OBJECT_NAMES == 1
        -:  369:      const char* _formatString =
        1:  370:        "(%s) %s: Assert in file %s, line %d";
        -:  371:#else
        -:  372:      const char* _formatString =
        -:  373:        "%s: Assert in file %s, line %d";
        -:  374:#endif
        -:  375:
        -:  376:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -:  377:
        1:  378:      (void) snprintf(
        -:  379:          _textBuffer,
        -:  380:          FW_LOG_TEXT_BUFFER_SIZE,
        -:  381:          _formatString,
        -:  382:#if FW_OBJECT_NAMES == 1
        -:  383:          this->m_objName,
        -:  384:#endif
        -:  385:          "AF_ASSERT_0 "
        1:  386:        , file.toChar()
        -:  387:        , line
        1:  388:      );
        -:  389:
        -:  390:      // Null terminate
        1:  391:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        2:  392:      Fw::TextLogString _logString = _textBuffer;
        1:  393:      this->m_LogText_OutputPort[0].invoke(
        -:  394:          _id,
        -:  395:          _logTime,Fw::TEXT_LOG_FATAL,
        -:  396:          _logString
        1:  397:      );
        -:  398:
        -:  399:    }
        -:  400:#endif
        -:  401:
        1:  402:  }
        -:  403:  
        -:  404:
        1:  405:  void AssertFatalAdapterComponentBase ::
        -:  406:    log_FATAL_AF_ASSERT_1(
        -:  407:        Fw::LogStringArg& file, U32 line, U32 arg1
        -:  408:    )
        -:  409:  {
        -:  410:  
        -:  411:
        -:  412:    // Get the time
        2:  413:    Fw::Time _logTime;
        1:  414:    if (this->m_Time_OutputPort[0].isConnected()) {
        1:  415:       this->m_Time_OutputPort[0].invoke( _logTime);
        -:  416:    }
        -:  417:    
        1:  418:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -:  419:    
        1:  420:    _id = this->getIdBase() + EVENTID_AF_ASSERT_1;
        -:  421:
        -:  422:    // Emit the event on the log port
        1:  423:    if (this->m_Log_OutputPort[0].isConnected()) {
        -:  424:
        2:  425:      Fw::LogBuffer _logBuff;
        1:  426:      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
        -:  427:
        -:  428:#if FW_AMPCS_COMPATIBLE
        -:  429:      // Serialize the number of arguments
        -:  430:      _status = _logBuff.serialize(static_cast<U8>(3));
        -:  431:      FW_ASSERT(
        -:  432:          _status == Fw::FW_SERIALIZE_OK,
        -:  433:          static_cast<AssertArg>(_status)
        -:  434:      );
        -:  435:#endif
        -:  436:
        1:  437:      file.setMaxSerialize(80);
        1:  438:      _status = _logBuff.serialize(file);
        -:  439:      FW_ASSERT(
        -:  440:          _status == Fw::FW_SERIALIZE_OK,
        -:  441:          static_cast<AssertArg>(_status)
        1:  442:      );
        -:  443:
        -:  444:#if FW_AMPCS_COMPATIBLE
        -:  445:      // Serialize the argument size
        -:  446:      _status = _logBuff.serialize(
        -:  447:          static_cast<U8>(sizeof(line))
        -:  448:      );
        -:  449:      FW_ASSERT(
        -:  450:          _status == Fw::FW_SERIALIZE_OK,
        -:  451:          static_cast<AssertArg>(_status)
        -:  452:      );
        -:  453:#endif
        -:  454:
        1:  455:      _status = _logBuff.serialize(line);
        -:  456:      FW_ASSERT(
        -:  457:          _status == Fw::FW_SERIALIZE_OK,
        -:  458:          static_cast<AssertArg>(_status)
        1:  459:      );
        -:  460:
        -:  461:#if FW_AMPCS_COMPATIBLE
        -:  462:      // Serialize the argument size
        -:  463:      _status = _logBuff.serialize(
        -:  464:          static_cast<U8>(sizeof(arg1))
        -:  465:      );
        -:  466:      FW_ASSERT(
        -:  467:          _status == Fw::FW_SERIALIZE_OK,
        -:  468:          static_cast<AssertArg>(_status)
        -:  469:      );
        -:  470:#endif
        -:  471:
        1:  472:      _status = _logBuff.serialize(arg1);
        -:  473:      FW_ASSERT(
        -:  474:          _status == Fw::FW_SERIALIZE_OK,
        -:  475:          static_cast<AssertArg>(_status)
        1:  476:      );
        -:  477:
        -:  478:
        1:  479:      this->m_Log_OutputPort[0].invoke(
        -:  480:          _id,
        -:  481:          _logTime,Fw::LOG_FATAL,
        -:  482:          _logBuff
        1:  483:      );
        -:  484:
        -:  485:    }
        -:  486:
        -:  487:    // Emit the event on the text log port
        -:  488:#if FW_ENABLE_TEXT_LOGGING
        1:  489:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -:  490:
        -:  491:#if FW_OBJECT_NAMES == 1
        -:  492:      const char* _formatString =
        1:  493:        "(%s) %s: Assert in file %s, line %d: %d";
        -:  494:#else
        -:  495:      const char* _formatString =
        -:  496:        "%s: Assert in file %s, line %d: %d";
        -:  497:#endif
        -:  498:
        -:  499:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -:  500:
        1:  501:      (void) snprintf(
        -:  502:          _textBuffer,
        -:  503:          FW_LOG_TEXT_BUFFER_SIZE,
        -:  504:          _formatString,
        -:  505:#if FW_OBJECT_NAMES == 1
        -:  506:          this->m_objName,
        -:  507:#endif
        -:  508:          "AF_ASSERT_1 "
        1:  509:        , file.toChar()
        -:  510:        , line
        -:  511:        , arg1
        1:  512:      );
        -:  513:
        -:  514:      // Null terminate
        1:  515:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        2:  516:      Fw::TextLogString _logString = _textBuffer;
        1:  517:      this->m_LogText_OutputPort[0].invoke(
        -:  518:          _id,
        -:  519:          _logTime,Fw::TEXT_LOG_FATAL,
        -:  520:          _logString
        1:  521:      );
        -:  522:
        -:  523:    }
        -:  524:#endif
        -:  525:
        1:  526:  }
        -:  527:  
        -:  528:
        1:  529:  void AssertFatalAdapterComponentBase ::
        -:  530:    log_FATAL_AF_ASSERT_2(
        -:  531:        Fw::LogStringArg& file, U32 line, U32 arg1, U32 arg2
        -:  532:    )
        -:  533:  {
        -:  534:  
        -:  535:
        -:  536:    // Get the time
        2:  537:    Fw::Time _logTime;
        1:  538:    if (this->m_Time_OutputPort[0].isConnected()) {
        1:  539:       this->m_Time_OutputPort[0].invoke( _logTime);
        -:  540:    }
        -:  541:    
        1:  542:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -:  543:    
        1:  544:    _id = this->getIdBase() + EVENTID_AF_ASSERT_2;
        -:  545:
        -:  546:    // Emit the event on the log port
        1:  547:    if (this->m_Log_OutputPort[0].isConnected()) {
        -:  548:
        2:  549:      Fw::LogBuffer _logBuff;
        1:  550:      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
        -:  551:
        -:  552:#if FW_AMPCS_COMPATIBLE
        -:  553:      // Serialize the number of arguments
        -:  554:      _status = _logBuff.serialize(static_cast<U8>(4));
        -:  555:      FW_ASSERT(
        -:  556:          _status == Fw::FW_SERIALIZE_OK,
        -:  557:          static_cast<AssertArg>(_status)
        -:  558:      );
        -:  559:#endif
        -:  560:
        1:  561:      file.setMaxSerialize(80);
        1:  562:      _status = _logBuff.serialize(file);
        -:  563:      FW_ASSERT(
        -:  564:          _status == Fw::FW_SERIALIZE_OK,
        -:  565:          static_cast<AssertArg>(_status)
        1:  566:      );
        -:  567:
        -:  568:#if FW_AMPCS_COMPATIBLE
        -:  569:      // Serialize the argument size
        -:  570:      _status = _logBuff.serialize(
        -:  571:          static_cast<U8>(sizeof(line))
        -:  572:      );
        -:  573:      FW_ASSERT(
        -:  574:          _status == Fw::FW_SERIALIZE_OK,
        -:  575:          static_cast<AssertArg>(_status)
        -:  576:      );
        -:  577:#endif
        -:  578:
        1:  579:      _status = _logBuff.serialize(line);
        -:  580:      FW_ASSERT(
        -:  581:          _status == Fw::FW_SERIALIZE_OK,
        -:  582:          static_cast<AssertArg>(_status)
        1:  583:      );
        -:  584:
        -:  585:#if FW_AMPCS_COMPATIBLE
        -:  586:      // Serialize the argument size
        -:  587:      _status = _logBuff.serialize(
        -:  588:          static_cast<U8>(sizeof(arg1))
        -:  589:      );
        -:  590:      FW_ASSERT(
        -:  591:          _status == Fw::FW_SERIALIZE_OK,
        -:  592:          static_cast<AssertArg>(_status)
        -:  593:      );
        -:  594:#endif
        -:  595:
        1:  596:      _status = _logBuff.serialize(arg1);
        -:  597:      FW_ASSERT(
        -:  598:          _status == Fw::FW_SERIALIZE_OK,
        -:  599:          static_cast<AssertArg>(_status)
        1:  600:      );
        -:  601:
        -:  602:#if FW_AMPCS_COMPATIBLE
        -:  603:      // Serialize the argument size
        -:  604:      _status = _logBuff.serialize(
        -:  605:          static_cast<U8>(sizeof(arg2))
        -:  606:      );
        -:  607:      FW_ASSERT(
        -:  608:          _status == Fw::FW_SERIALIZE_OK,
        -:  609:          static_cast<AssertArg>(_status)
        -:  610:      );
        -:  611:#endif
        -:  612:
        1:  613:      _status = _logBuff.serialize(arg2);
        -:  614:      FW_ASSERT(
        -:  615:          _status == Fw::FW_SERIALIZE_OK,
        -:  616:          static_cast<AssertArg>(_status)
        1:  617:      );
        -:  618:
        -:  619:
        1:  620:      this->m_Log_OutputPort[0].invoke(
        -:  621:          _id,
        -:  622:          _logTime,Fw::LOG_FATAL,
        -:  623:          _logBuff
        1:  624:      );
        -:  625:
        -:  626:    }
        -:  627:
        -:  628:    // Emit the event on the text log port
        -:  629:#if FW_ENABLE_TEXT_LOGGING
        1:  630:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -:  631:
        -:  632:#if FW_OBJECT_NAMES == 1
        -:  633:      const char* _formatString =
        1:  634:        "(%s) %s: Assert in file %s, line %d: %d %d";
        -:  635:#else
        -:  636:      const char* _formatString =
        -:  637:        "%s: Assert in file %s, line %d: %d %d";
        -:  638:#endif
        -:  639:
        -:  640:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -:  641:
        1:  642:      (void) snprintf(
        -:  643:          _textBuffer,
        -:  644:          FW_LOG_TEXT_BUFFER_SIZE,
        -:  645:          _formatString,
        -:  646:#if FW_OBJECT_NAMES == 1
        -:  647:          this->m_objName,
        -:  648:#endif
        -:  649:          "AF_ASSERT_2 "
        1:  650:        , file.toChar()
        -:  651:        , line
        -:  652:        , arg1
        -:  653:        , arg2
        1:  654:      );
        -:  655:
        -:  656:      // Null terminate
        1:  657:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        2:  658:      Fw::TextLogString _logString = _textBuffer;
        1:  659:      this->m_LogText_OutputPort[0].invoke(
        -:  660:          _id,
        -:  661:          _logTime,Fw::TEXT_LOG_FATAL,
        -:  662:          _logString
        1:  663:      );
        -:  664:
        -:  665:    }
        -:  666:#endif
        -:  667:
        1:  668:  }
        -:  669:  
        -:  670:
        1:  671:  void AssertFatalAdapterComponentBase ::
        -:  672:    log_FATAL_AF_ASSERT_3(
        -:  673:        Fw::LogStringArg& file, U32 line, U32 arg1, U32 arg2, U32 arg3
        -:  674:    )
        -:  675:  {
        -:  676:  
        -:  677:
        -:  678:    // Get the time
        2:  679:    Fw::Time _logTime;
        1:  680:    if (this->m_Time_OutputPort[0].isConnected()) {
        1:  681:       this->m_Time_OutputPort[0].invoke( _logTime);
        -:  682:    }
        -:  683:    
        1:  684:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -:  685:    
        1:  686:    _id = this->getIdBase() + EVENTID_AF_ASSERT_3;
        -:  687:
        -:  688:    // Emit the event on the log port
        1:  689:    if (this->m_Log_OutputPort[0].isConnected()) {
        -:  690:
        2:  691:      Fw::LogBuffer _logBuff;
        1:  692:      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
        -:  693:
        -:  694:#if FW_AMPCS_COMPATIBLE
        -:  695:      // Serialize the number of arguments
        -:  696:      _status = _logBuff.serialize(static_cast<U8>(5));
        -:  697:      FW_ASSERT(
        -:  698:          _status == Fw::FW_SERIALIZE_OK,
        -:  699:          static_cast<AssertArg>(_status)
        -:  700:      );
        -:  701:#endif
        -:  702:
        1:  703:      file.setMaxSerialize(80);
        1:  704:      _status = _logBuff.serialize(file);
        -:  705:      FW_ASSERT(
        -:  706:          _status == Fw::FW_SERIALIZE_OK,
        -:  707:          static_cast<AssertArg>(_status)
        1:  708:      );
        -:  709:
        -:  710:#if FW_AMPCS_COMPATIBLE
        -:  711:      // Serialize the argument size
        -:  712:      _status = _logBuff.serialize(
        -:  713:          static_cast<U8>(sizeof(line))
        -:  714:      );
        -:  715:      FW_ASSERT(
        -:  716:          _status == Fw::FW_SERIALIZE_OK,
        -:  717:          static_cast<AssertArg>(_status)
        -:  718:      );
        -:  719:#endif
        -:  720:
        1:  721:      _status = _logBuff.serialize(line);
        -:  722:      FW_ASSERT(
        -:  723:          _status == Fw::FW_SERIALIZE_OK,
        -:  724:          static_cast<AssertArg>(_status)
        1:  725:      );
        -:  726:
        -:  727:#if FW_AMPCS_COMPATIBLE
        -:  728:      // Serialize the argument size
        -:  729:      _status = _logBuff.serialize(
        -:  730:          static_cast<U8>(sizeof(arg1))
        -:  731:      );
        -:  732:      FW_ASSERT(
        -:  733:          _status == Fw::FW_SERIALIZE_OK,
        -:  734:          static_cast<AssertArg>(_status)
        -:  735:      );
        -:  736:#endif
        -:  737:
        1:  738:      _status = _logBuff.serialize(arg1);
        -:  739:      FW_ASSERT(
        -:  740:          _status == Fw::FW_SERIALIZE_OK,
        -:  741:          static_cast<AssertArg>(_status)
        1:  742:      );
        -:  743:
        -:  744:#if FW_AMPCS_COMPATIBLE
        -:  745:      // Serialize the argument size
        -:  746:      _status = _logBuff.serialize(
        -:  747:          static_cast<U8>(sizeof(arg2))
        -:  748:      );
        -:  749:      FW_ASSERT(
        -:  750:          _status == Fw::FW_SERIALIZE_OK,
        -:  751:          static_cast<AssertArg>(_status)
        -:  752:      );
        -:  753:#endif
        -:  754:
        1:  755:      _status = _logBuff.serialize(arg2);
        -:  756:      FW_ASSERT(
        -:  757:          _status == Fw::FW_SERIALIZE_OK,
        -:  758:          static_cast<AssertArg>(_status)
        1:  759:      );
        -:  760:
        -:  761:#if FW_AMPCS_COMPATIBLE
        -:  762:      // Serialize the argument size
        -:  763:      _status = _logBuff.serialize(
        -:  764:          static_cast<U8>(sizeof(arg3))
        -:  765:      );
        -:  766:      FW_ASSERT(
        -:  767:          _status == Fw::FW_SERIALIZE_OK,
        -:  768:          static_cast<AssertArg>(_status)
        -:  769:      );
        -:  770:#endif
        -:  771:
        1:  772:      _status = _logBuff.serialize(arg3);
        -:  773:      FW_ASSERT(
        -:  774:          _status == Fw::FW_SERIALIZE_OK,
        -:  775:          static_cast<AssertArg>(_status)
        1:  776:      );
        -:  777:
        -:  778:
        1:  779:      this->m_Log_OutputPort[0].invoke(
        -:  780:          _id,
        -:  781:          _logTime,Fw::LOG_FATAL,
        -:  782:          _logBuff
        1:  783:      );
        -:  784:
        -:  785:    }
        -:  786:
        -:  787:    // Emit the event on the text log port
        -:  788:#if FW_ENABLE_TEXT_LOGGING
        1:  789:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -:  790:
        -:  791:#if FW_OBJECT_NAMES == 1
        -:  792:      const char* _formatString =
        1:  793:        "(%s) %s: Assert in file %s, line %d: %d %d %d";
        -:  794:#else
        -:  795:      const char* _formatString =
        -:  796:        "%s: Assert in file %s, line %d: %d %d %d";
        -:  797:#endif
        -:  798:
        -:  799:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -:  800:
        1:  801:      (void) snprintf(
        -:  802:          _textBuffer,
        -:  803:          FW_LOG_TEXT_BUFFER_SIZE,
        -:  804:          _formatString,
        -:  805:#if FW_OBJECT_NAMES == 1
        -:  806:          this->m_objName,
        -:  807:#endif
        -:  808:          "AF_ASSERT_3 "
        1:  809:        , file.toChar()
        -:  810:        , line
        -:  811:        , arg1
        -:  812:        , arg2
        -:  813:        , arg3
        1:  814:      );
        -:  815:
        -:  816:      // Null terminate
        1:  817:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        2:  818:      Fw::TextLogString _logString = _textBuffer;
        1:  819:      this->m_LogText_OutputPort[0].invoke(
        -:  820:          _id,
        -:  821:          _logTime,Fw::TEXT_LOG_FATAL,
        -:  822:          _logString
        1:  823:      );
        -:  824:
        -:  825:    }
        -:  826:#endif
        -:  827:
        1:  828:  }
        -:  829:  
        -:  830:
        1:  831:  void AssertFatalAdapterComponentBase ::
        -:  832:    log_FATAL_AF_ASSERT_4(
        -:  833:        Fw::LogStringArg& file, U32 line, U32 arg1, U32 arg2, U32 arg3, U32 arg4
        -:  834:    )
        -:  835:  {
        -:  836:  
        -:  837:
        -:  838:    // Get the time
        2:  839:    Fw::Time _logTime;
        1:  840:    if (this->m_Time_OutputPort[0].isConnected()) {
        1:  841:       this->m_Time_OutputPort[0].invoke( _logTime);
        -:  842:    }
        -:  843:    
        1:  844:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -:  845:    
        1:  846:    _id = this->getIdBase() + EVENTID_AF_ASSERT_4;
        -:  847:
        -:  848:    // Emit the event on the log port
        1:  849:    if (this->m_Log_OutputPort[0].isConnected()) {
        -:  850:
        2:  851:      Fw::LogBuffer _logBuff;
        1:  852:      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
        -:  853:
        -:  854:#if FW_AMPCS_COMPATIBLE
        -:  855:      // Serialize the number of arguments
        -:  856:      _status = _logBuff.serialize(static_cast<U8>(6));
        -:  857:      FW_ASSERT(
        -:  858:          _status == Fw::FW_SERIALIZE_OK,
        -:  859:          static_cast<AssertArg>(_status)
        -:  860:      );
        -:  861:#endif
        -:  862:
        1:  863:      file.setMaxSerialize(80);
        1:  864:      _status = _logBuff.serialize(file);
        -:  865:      FW_ASSERT(
        -:  866:          _status == Fw::FW_SERIALIZE_OK,
        -:  867:          static_cast<AssertArg>(_status)
        1:  868:      );
        -:  869:
        -:  870:#if FW_AMPCS_COMPATIBLE
        -:  871:      // Serialize the argument size
        -:  872:      _status = _logBuff.serialize(
        -:  873:          static_cast<U8>(sizeof(line))
        -:  874:      );
        -:  875:      FW_ASSERT(
        -:  876:          _status == Fw::FW_SERIALIZE_OK,
        -:  877:          static_cast<AssertArg>(_status)
        -:  878:      );
        -:  879:#endif
        -:  880:
        1:  881:      _status = _logBuff.serialize(line);
        -:  882:      FW_ASSERT(
        -:  883:          _status == Fw::FW_SERIALIZE_OK,
        -:  884:          static_cast<AssertArg>(_status)
        1:  885:      );
        -:  886:
        -:  887:#if FW_AMPCS_COMPATIBLE
        -:  888:      // Serialize the argument size
        -:  889:      _status = _logBuff.serialize(
        -:  890:          static_cast<U8>(sizeof(arg1))
        -:  891:      );
        -:  892:      FW_ASSERT(
        -:  893:          _status == Fw::FW_SERIALIZE_OK,
        -:  894:          static_cast<AssertArg>(_status)
        -:  895:      );
        -:  896:#endif
        -:  897:
        1:  898:      _status = _logBuff.serialize(arg1);
        -:  899:      FW_ASSERT(
        -:  900:          _status == Fw::FW_SERIALIZE_OK,
        -:  901:          static_cast<AssertArg>(_status)
        1:  902:      );
        -:  903:
        -:  904:#if FW_AMPCS_COMPATIBLE
        -:  905:      // Serialize the argument size
        -:  906:      _status = _logBuff.serialize(
        -:  907:          static_cast<U8>(sizeof(arg2))
        -:  908:      );
        -:  909:      FW_ASSERT(
        -:  910:          _status == Fw::FW_SERIALIZE_OK,
        -:  911:          static_cast<AssertArg>(_status)
        -:  912:      );
        -:  913:#endif
        -:  914:
        1:  915:      _status = _logBuff.serialize(arg2);
        -:  916:      FW_ASSERT(
        -:  917:          _status == Fw::FW_SERIALIZE_OK,
        -:  918:          static_cast<AssertArg>(_status)
        1:  919:      );
        -:  920:
        -:  921:#if FW_AMPCS_COMPATIBLE
        -:  922:      // Serialize the argument size
        -:  923:      _status = _logBuff.serialize(
        -:  924:          static_cast<U8>(sizeof(arg3))
        -:  925:      );
        -:  926:      FW_ASSERT(
        -:  927:          _status == Fw::FW_SERIALIZE_OK,
        -:  928:          static_cast<AssertArg>(_status)
        -:  929:      );
        -:  930:#endif
        -:  931:
        1:  932:      _status = _logBuff.serialize(arg3);
        -:  933:      FW_ASSERT(
        -:  934:          _status == Fw::FW_SERIALIZE_OK,
        -:  935:          static_cast<AssertArg>(_status)
        1:  936:      );
        -:  937:
        -:  938:#if FW_AMPCS_COMPATIBLE
        -:  939:      // Serialize the argument size
        -:  940:      _status = _logBuff.serialize(
        -:  941:          static_cast<U8>(sizeof(arg4))
        -:  942:      );
        -:  943:      FW_ASSERT(
        -:  944:          _status == Fw::FW_SERIALIZE_OK,
        -:  945:          static_cast<AssertArg>(_status)
        -:  946:      );
        -:  947:#endif
        -:  948:
        1:  949:      _status = _logBuff.serialize(arg4);
        -:  950:      FW_ASSERT(
        -:  951:          _status == Fw::FW_SERIALIZE_OK,
        -:  952:          static_cast<AssertArg>(_status)
        1:  953:      );
        -:  954:
        -:  955:
        1:  956:      this->m_Log_OutputPort[0].invoke(
        -:  957:          _id,
        -:  958:          _logTime,Fw::LOG_FATAL,
        -:  959:          _logBuff
        1:  960:      );
        -:  961:
        -:  962:    }
        -:  963:
        -:  964:    // Emit the event on the text log port
        -:  965:#if FW_ENABLE_TEXT_LOGGING
        1:  966:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -:  967:
        -:  968:#if FW_OBJECT_NAMES == 1
        -:  969:      const char* _formatString =
        1:  970:        "(%s) %s: Assert in file %s, line %d: %d %d %d %d";
        -:  971:#else
        -:  972:      const char* _formatString =
        -:  973:        "%s: Assert in file %s, line %d: %d %d %d %d";
        -:  974:#endif
        -:  975:
        -:  976:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -:  977:
        1:  978:      (void) snprintf(
        -:  979:          _textBuffer,
        -:  980:          FW_LOG_TEXT_BUFFER_SIZE,
        -:  981:          _formatString,
        -:  982:#if FW_OBJECT_NAMES == 1
        -:  983:          this->m_objName,
        -:  984:#endif
        -:  985:          "AF_ASSERT_4 "
        1:  986:        , file.toChar()
        -:  987:        , line
        -:  988:        , arg1
        -:  989:        , arg2
        -:  990:        , arg3
        -:  991:        , arg4
        1:  992:      );
        -:  993:
        -:  994:      // Null terminate
        1:  995:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        2:  996:      Fw::TextLogString _logString = _textBuffer;
        1:  997:      this->m_LogText_OutputPort[0].invoke(
        -:  998:          _id,
        -:  999:          _logTime,Fw::TEXT_LOG_FATAL,
        -: 1000:          _logString
        1: 1001:      );
        -: 1002:
        -: 1003:    }
        -: 1004:#endif
        -: 1005:
        1: 1006:  }
        -: 1007:  
        -: 1008:
        1: 1009:  void AssertFatalAdapterComponentBase ::
        -: 1010:    log_FATAL_AF_ASSERT_5(
        -: 1011:        Fw::LogStringArg& file, U32 line, U32 arg1, U32 arg2, U32 arg3, U32 arg4, U32 arg5
        -: 1012:    )
        -: 1013:  {
        -: 1014:  
        -: 1015:
        -: 1016:    // Get the time
        2: 1017:    Fw::Time _logTime;
        1: 1018:    if (this->m_Time_OutputPort[0].isConnected()) {
        1: 1019:       this->m_Time_OutputPort[0].invoke( _logTime);
        -: 1020:    }
        -: 1021:    
        1: 1022:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1023:    
        1: 1024:    _id = this->getIdBase() + EVENTID_AF_ASSERT_5;
        -: 1025:
        -: 1026:    // Emit the event on the log port
        1: 1027:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1028:
        2: 1029:      Fw::LogBuffer _logBuff;
        1: 1030:      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
        -: 1031:
        -: 1032:#if FW_AMPCS_COMPATIBLE
        -: 1033:      // Serialize the number of arguments
        -: 1034:      _status = _logBuff.serialize(static_cast<U8>(7));
        -: 1035:      FW_ASSERT(
        -: 1036:          _status == Fw::FW_SERIALIZE_OK,
        -: 1037:          static_cast<AssertArg>(_status)
        -: 1038:      );
        -: 1039:#endif
        -: 1040:
        1: 1041:      file.setMaxSerialize(80);
        1: 1042:      _status = _logBuff.serialize(file);
        -: 1043:      FW_ASSERT(
        -: 1044:          _status == Fw::FW_SERIALIZE_OK,
        -: 1045:          static_cast<AssertArg>(_status)
        1: 1046:      );
        -: 1047:
        -: 1048:#if FW_AMPCS_COMPATIBLE
        -: 1049:      // Serialize the argument size
        -: 1050:      _status = _logBuff.serialize(
        -: 1051:          static_cast<U8>(sizeof(line))
        -: 1052:      );
        -: 1053:      FW_ASSERT(
        -: 1054:          _status == Fw::FW_SERIALIZE_OK,
        -: 1055:          static_cast<AssertArg>(_status)
        -: 1056:      );
        -: 1057:#endif
        -: 1058:
        1: 1059:      _status = _logBuff.serialize(line);
        -: 1060:      FW_ASSERT(
        -: 1061:          _status == Fw::FW_SERIALIZE_OK,
        -: 1062:          static_cast<AssertArg>(_status)
        1: 1063:      );
        -: 1064:
        -: 1065:#if FW_AMPCS_COMPATIBLE
        -: 1066:      // Serialize the argument size
        -: 1067:      _status = _logBuff.serialize(
        -: 1068:          static_cast<U8>(sizeof(arg1))
        -: 1069:      );
        -: 1070:      FW_ASSERT(
        -: 1071:          _status == Fw::FW_SERIALIZE_OK,
        -: 1072:          static_cast<AssertArg>(_status)
        -: 1073:      );
        -: 1074:#endif
        -: 1075:
        1: 1076:      _status = _logBuff.serialize(arg1);
        -: 1077:      FW_ASSERT(
        -: 1078:          _status == Fw::FW_SERIALIZE_OK,
        -: 1079:          static_cast<AssertArg>(_status)
        1: 1080:      );
        -: 1081:
        -: 1082:#if FW_AMPCS_COMPATIBLE
        -: 1083:      // Serialize the argument size
        -: 1084:      _status = _logBuff.serialize(
        -: 1085:          static_cast<U8>(sizeof(arg2))
        -: 1086:      );
        -: 1087:      FW_ASSERT(
        -: 1088:          _status == Fw::FW_SERIALIZE_OK,
        -: 1089:          static_cast<AssertArg>(_status)
        -: 1090:      );
        -: 1091:#endif
        -: 1092:
        1: 1093:      _status = _logBuff.serialize(arg2);
        -: 1094:      FW_ASSERT(
        -: 1095:          _status == Fw::FW_SERIALIZE_OK,
        -: 1096:          static_cast<AssertArg>(_status)
        1: 1097:      );
        -: 1098:
        -: 1099:#if FW_AMPCS_COMPATIBLE
        -: 1100:      // Serialize the argument size
        -: 1101:      _status = _logBuff.serialize(
        -: 1102:          static_cast<U8>(sizeof(arg3))
        -: 1103:      );
        -: 1104:      FW_ASSERT(
        -: 1105:          _status == Fw::FW_SERIALIZE_OK,
        -: 1106:          static_cast<AssertArg>(_status)
        -: 1107:      );
        -: 1108:#endif
        -: 1109:
        1: 1110:      _status = _logBuff.serialize(arg3);
        -: 1111:      FW_ASSERT(
        -: 1112:          _status == Fw::FW_SERIALIZE_OK,
        -: 1113:          static_cast<AssertArg>(_status)
        1: 1114:      );
        -: 1115:
        -: 1116:#if FW_AMPCS_COMPATIBLE
        -: 1117:      // Serialize the argument size
        -: 1118:      _status = _logBuff.serialize(
        -: 1119:          static_cast<U8>(sizeof(arg4))
        -: 1120:      );
        -: 1121:      FW_ASSERT(
        -: 1122:          _status == Fw::FW_SERIALIZE_OK,
        -: 1123:          static_cast<AssertArg>(_status)
        -: 1124:      );
        -: 1125:#endif
        -: 1126:
        1: 1127:      _status = _logBuff.serialize(arg4);
        -: 1128:      FW_ASSERT(
        -: 1129:          _status == Fw::FW_SERIALIZE_OK,
        -: 1130:          static_cast<AssertArg>(_status)
        1: 1131:      );
        -: 1132:
        -: 1133:#if FW_AMPCS_COMPATIBLE
        -: 1134:      // Serialize the argument size
        -: 1135:      _status = _logBuff.serialize(
        -: 1136:          static_cast<U8>(sizeof(arg5))
        -: 1137:      );
        -: 1138:      FW_ASSERT(
        -: 1139:          _status == Fw::FW_SERIALIZE_OK,
        -: 1140:          static_cast<AssertArg>(_status)
        -: 1141:      );
        -: 1142:#endif
        -: 1143:
        1: 1144:      _status = _logBuff.serialize(arg5);
        -: 1145:      FW_ASSERT(
        -: 1146:          _status == Fw::FW_SERIALIZE_OK,
        -: 1147:          static_cast<AssertArg>(_status)
        1: 1148:      );
        -: 1149:
        -: 1150:
        1: 1151:      this->m_Log_OutputPort[0].invoke(
        -: 1152:          _id,
        -: 1153:          _logTime,Fw::LOG_FATAL,
        -: 1154:          _logBuff
        1: 1155:      );
        -: 1156:
        -: 1157:    }
        -: 1158:
        -: 1159:    // Emit the event on the text log port
        -: 1160:#if FW_ENABLE_TEXT_LOGGING
        1: 1161:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1162:
        -: 1163:#if FW_OBJECT_NAMES == 1
        -: 1164:      const char* _formatString =
        1: 1165:        "(%s) %s: Assert in file %s, line %d: %d %d %d %d %d";
        -: 1166:#else
        -: 1167:      const char* _formatString =
        -: 1168:        "%s: Assert in file %s, line %d: %d %d %d %d %d";
        -: 1169:#endif
        -: 1170:
        -: 1171:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1172:
        1: 1173:      (void) snprintf(
        -: 1174:          _textBuffer,
        -: 1175:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1176:          _formatString,
        -: 1177:#if FW_OBJECT_NAMES == 1
        -: 1178:          this->m_objName,
        -: 1179:#endif
        -: 1180:          "AF_ASSERT_5 "
        1: 1181:        , file.toChar()
        -: 1182:        , line
        -: 1183:        , arg1
        -: 1184:        , arg2
        -: 1185:        , arg3
        -: 1186:        , arg4
        -: 1187:        , arg5
        1: 1188:      );
        -: 1189:
        -: 1190:      // Null terminate
        1: 1191:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        2: 1192:      Fw::TextLogString _logString = _textBuffer;
        1: 1193:      this->m_LogText_OutputPort[0].invoke(
        -: 1194:          _id,
        -: 1195:          _logTime,Fw::TEXT_LOG_FATAL,
        -: 1196:          _logString
        1: 1197:      );
        -: 1198:
        -: 1199:    }
        -: 1200:#endif
        -: 1201:
        1: 1202:  }
        -: 1203:  
        -: 1204:
        1: 1205:  void AssertFatalAdapterComponentBase ::
        -: 1206:    log_FATAL_AF_ASSERT_6(
        -: 1207:        Fw::LogStringArg& file, U32 line, U32 arg1, U32 arg2, U32 arg3, U32 arg4, U32 arg5, U32 arg6
        -: 1208:    )
        -: 1209:  {
        -: 1210:  
        -: 1211:
        -: 1212:    // Get the time
        2: 1213:    Fw::Time _logTime;
        1: 1214:    if (this->m_Time_OutputPort[0].isConnected()) {
        1: 1215:       this->m_Time_OutputPort[0].invoke( _logTime);
        -: 1216:    }
        -: 1217:    
        1: 1218:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1219:    
        1: 1220:    _id = this->getIdBase() + EVENTID_AF_ASSERT_6;
        -: 1221:
        -: 1222:    // Emit the event on the log port
        1: 1223:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1224:
        2: 1225:      Fw::LogBuffer _logBuff;
        1: 1226:      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
        -: 1227:
        -: 1228:#if FW_AMPCS_COMPATIBLE
        -: 1229:      // Serialize the number of arguments
        -: 1230:      _status = _logBuff.serialize(static_cast<U8>(8));
        -: 1231:      FW_ASSERT(
        -: 1232:          _status == Fw::FW_SERIALIZE_OK,
        -: 1233:          static_cast<AssertArg>(_status)
        -: 1234:      );
        -: 1235:#endif
        -: 1236:
        1: 1237:      file.setMaxSerialize(80);
        1: 1238:      _status = _logBuff.serialize(file);
        -: 1239:      FW_ASSERT(
        -: 1240:          _status == Fw::FW_SERIALIZE_OK,
        -: 1241:          static_cast<AssertArg>(_status)
        1: 1242:      );
        -: 1243:
        -: 1244:#if FW_AMPCS_COMPATIBLE
        -: 1245:      // Serialize the argument size
        -: 1246:      _status = _logBuff.serialize(
        -: 1247:          static_cast<U8>(sizeof(line))
        -: 1248:      );
        -: 1249:      FW_ASSERT(
        -: 1250:          _status == Fw::FW_SERIALIZE_OK,
        -: 1251:          static_cast<AssertArg>(_status)
        -: 1252:      );
        -: 1253:#endif
        -: 1254:
        1: 1255:      _status = _logBuff.serialize(line);
        -: 1256:      FW_ASSERT(
        -: 1257:          _status == Fw::FW_SERIALIZE_OK,
        -: 1258:          static_cast<AssertArg>(_status)
        1: 1259:      );
        -: 1260:
        -: 1261:#if FW_AMPCS_COMPATIBLE
        -: 1262:      // Serialize the argument size
        -: 1263:      _status = _logBuff.serialize(
        -: 1264:          static_cast<U8>(sizeof(arg1))
        -: 1265:      );
        -: 1266:      FW_ASSERT(
        -: 1267:          _status == Fw::FW_SERIALIZE_OK,
        -: 1268:          static_cast<AssertArg>(_status)
        -: 1269:      );
        -: 1270:#endif
        -: 1271:
        1: 1272:      _status = _logBuff.serialize(arg1);
        -: 1273:      FW_ASSERT(
        -: 1274:          _status == Fw::FW_SERIALIZE_OK,
        -: 1275:          static_cast<AssertArg>(_status)
        1: 1276:      );
        -: 1277:
        -: 1278:#if FW_AMPCS_COMPATIBLE
        -: 1279:      // Serialize the argument size
        -: 1280:      _status = _logBuff.serialize(
        -: 1281:          static_cast<U8>(sizeof(arg2))
        -: 1282:      );
        -: 1283:      FW_ASSERT(
        -: 1284:          _status == Fw::FW_SERIALIZE_OK,
        -: 1285:          static_cast<AssertArg>(_status)
        -: 1286:      );
        -: 1287:#endif
        -: 1288:
        1: 1289:      _status = _logBuff.serialize(arg2);
        -: 1290:      FW_ASSERT(
        -: 1291:          _status == Fw::FW_SERIALIZE_OK,
        -: 1292:          static_cast<AssertArg>(_status)
        1: 1293:      );
        -: 1294:
        -: 1295:#if FW_AMPCS_COMPATIBLE
        -: 1296:      // Serialize the argument size
        -: 1297:      _status = _logBuff.serialize(
        -: 1298:          static_cast<U8>(sizeof(arg3))
        -: 1299:      );
        -: 1300:      FW_ASSERT(
        -: 1301:          _status == Fw::FW_SERIALIZE_OK,
        -: 1302:          static_cast<AssertArg>(_status)
        -: 1303:      );
        -: 1304:#endif
        -: 1305:
        1: 1306:      _status = _logBuff.serialize(arg3);
        -: 1307:      FW_ASSERT(
        -: 1308:          _status == Fw::FW_SERIALIZE_OK,
        -: 1309:          static_cast<AssertArg>(_status)
        1: 1310:      );
        -: 1311:
        -: 1312:#if FW_AMPCS_COMPATIBLE
        -: 1313:      // Serialize the argument size
        -: 1314:      _status = _logBuff.serialize(
        -: 1315:          static_cast<U8>(sizeof(arg4))
        -: 1316:      );
        -: 1317:      FW_ASSERT(
        -: 1318:          _status == Fw::FW_SERIALIZE_OK,
        -: 1319:          static_cast<AssertArg>(_status)
        -: 1320:      );
        -: 1321:#endif
        -: 1322:
        1: 1323:      _status = _logBuff.serialize(arg4);
        -: 1324:      FW_ASSERT(
        -: 1325:          _status == Fw::FW_SERIALIZE_OK,
        -: 1326:          static_cast<AssertArg>(_status)
        1: 1327:      );
        -: 1328:
        -: 1329:#if FW_AMPCS_COMPATIBLE
        -: 1330:      // Serialize the argument size
        -: 1331:      _status = _logBuff.serialize(
        -: 1332:          static_cast<U8>(sizeof(arg5))
        -: 1333:      );
        -: 1334:      FW_ASSERT(
        -: 1335:          _status == Fw::FW_SERIALIZE_OK,
        -: 1336:          static_cast<AssertArg>(_status)
        -: 1337:      );
        -: 1338:#endif
        -: 1339:
        1: 1340:      _status = _logBuff.serialize(arg5);
        -: 1341:      FW_ASSERT(
        -: 1342:          _status == Fw::FW_SERIALIZE_OK,
        -: 1343:          static_cast<AssertArg>(_status)
        1: 1344:      );
        -: 1345:
        -: 1346:#if FW_AMPCS_COMPATIBLE
        -: 1347:      // Serialize the argument size
        -: 1348:      _status = _logBuff.serialize(
        -: 1349:          static_cast<U8>(sizeof(arg6))
        -: 1350:      );
        -: 1351:      FW_ASSERT(
        -: 1352:          _status == Fw::FW_SERIALIZE_OK,
        -: 1353:          static_cast<AssertArg>(_status)
        -: 1354:      );
        -: 1355:#endif
        -: 1356:
        1: 1357:      _status = _logBuff.serialize(arg6);
        -: 1358:      FW_ASSERT(
        -: 1359:          _status == Fw::FW_SERIALIZE_OK,
        -: 1360:          static_cast<AssertArg>(_status)
        1: 1361:      );
        -: 1362:
        -: 1363:
        1: 1364:      this->m_Log_OutputPort[0].invoke(
        -: 1365:          _id,
        -: 1366:          _logTime,Fw::LOG_FATAL,
        -: 1367:          _logBuff
        1: 1368:      );
        -: 1369:
        -: 1370:    }
        -: 1371:
        -: 1372:    // Emit the event on the text log port
        -: 1373:#if FW_ENABLE_TEXT_LOGGING
        1: 1374:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1375:
        -: 1376:#if FW_OBJECT_NAMES == 1
        -: 1377:      const char* _formatString =
        1: 1378:        "(%s) %s: Assert in file %s, line %d: %d %d %d %d %d %d";
        -: 1379:#else
        -: 1380:      const char* _formatString =
        -: 1381:        "%s: Assert in file %s, line %d: %d %d %d %d %d %d";
        -: 1382:#endif
        -: 1383:
        -: 1384:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1385:
        1: 1386:      (void) snprintf(
        -: 1387:          _textBuffer,
        -: 1388:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1389:          _formatString,
        -: 1390:#if FW_OBJECT_NAMES == 1
        -: 1391:          this->m_objName,
        -: 1392:#endif
        -: 1393:          "AF_ASSERT_6 "
        1: 1394:        , file.toChar()
        -: 1395:        , line
        -: 1396:        , arg1
        -: 1397:        , arg2
        -: 1398:        , arg3
        -: 1399:        , arg4
        -: 1400:        , arg5
        -: 1401:        , arg6
        1: 1402:      );
        -: 1403:
        -: 1404:      // Null terminate
        1: 1405:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        2: 1406:      Fw::TextLogString _logString = _textBuffer;
        1: 1407:      this->m_LogText_OutputPort[0].invoke(
        -: 1408:          _id,
        -: 1409:          _logTime,Fw::TEXT_LOG_FATAL,
        -: 1410:          _logString
        1: 1411:      );
        -: 1412:
        -: 1413:    }
        -: 1414:#endif
        -: 1415:
        1: 1416:  }
        -: 1417:  
        -: 1418:
        1: 1419:  void AssertFatalAdapterComponentBase ::
        -: 1420:    log_FATAL_AF_UNEXPECTED_ASSERT(
        -: 1421:        Fw::LogStringArg& file, U32 line, U32 numArgs
        -: 1422:    )
        -: 1423:  {
        -: 1424:  
        -: 1425:
        -: 1426:    // Get the time
        2: 1427:    Fw::Time _logTime;
        1: 1428:    if (this->m_Time_OutputPort[0].isConnected()) {
        1: 1429:       this->m_Time_OutputPort[0].invoke( _logTime);
        -: 1430:    }
        -: 1431:    
        1: 1432:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1433:    
        1: 1434:    _id = this->getIdBase() + EVENTID_AF_UNEXPECTED_ASSERT;
        -: 1435:
        -: 1436:    // Emit the event on the log port
        1: 1437:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1438:
        2: 1439:      Fw::LogBuffer _logBuff;
        1: 1440:      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
        -: 1441:
        -: 1442:#if FW_AMPCS_COMPATIBLE
        -: 1443:      // Serialize the number of arguments
        -: 1444:      _status = _logBuff.serialize(static_cast<U8>(3));
        -: 1445:      FW_ASSERT(
        -: 1446:          _status == Fw::FW_SERIALIZE_OK,
        -: 1447:          static_cast<AssertArg>(_status)
        -: 1448:      );
        -: 1449:#endif
        -: 1450:
        1: 1451:      file.setMaxSerialize(80);
        1: 1452:      _status = _logBuff.serialize(file);
        -: 1453:      FW_ASSERT(
        -: 1454:          _status == Fw::FW_SERIALIZE_OK,
        -: 1455:          static_cast<AssertArg>(_status)
        1: 1456:      );
        -: 1457:
        -: 1458:#if FW_AMPCS_COMPATIBLE
        -: 1459:      // Serialize the argument size
        -: 1460:      _status = _logBuff.serialize(
        -: 1461:          static_cast<U8>(sizeof(line))
        -: 1462:      );
        -: 1463:      FW_ASSERT(
        -: 1464:          _status == Fw::FW_SERIALIZE_OK,
        -: 1465:          static_cast<AssertArg>(_status)
        -: 1466:      );
        -: 1467:#endif
        -: 1468:
        1: 1469:      _status = _logBuff.serialize(line);
        -: 1470:      FW_ASSERT(
        -: 1471:          _status == Fw::FW_SERIALIZE_OK,
        -: 1472:          static_cast<AssertArg>(_status)
        1: 1473:      );
        -: 1474:
        -: 1475:#if FW_AMPCS_COMPATIBLE
        -: 1476:      // Serialize the argument size
        -: 1477:      _status = _logBuff.serialize(
        -: 1478:          static_cast<U8>(sizeof(numArgs))
        -: 1479:      );
        -: 1480:      FW_ASSERT(
        -: 1481:          _status == Fw::FW_SERIALIZE_OK,
        -: 1482:          static_cast<AssertArg>(_status)
        -: 1483:      );
        -: 1484:#endif
        -: 1485:
        1: 1486:      _status = _logBuff.serialize(numArgs);
        -: 1487:      FW_ASSERT(
        -: 1488:          _status == Fw::FW_SERIALIZE_OK,
        -: 1489:          static_cast<AssertArg>(_status)
        1: 1490:      );
        -: 1491:
        -: 1492:
        1: 1493:      this->m_Log_OutputPort[0].invoke(
        -: 1494:          _id,
        -: 1495:          _logTime,Fw::LOG_FATAL,
        -: 1496:          _logBuff
        1: 1497:      );
        -: 1498:
        -: 1499:    }
        -: 1500:
        -: 1501:    // Emit the event on the text log port
        -: 1502:#if FW_ENABLE_TEXT_LOGGING
        1: 1503:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1504:
        -: 1505:#if FW_OBJECT_NAMES == 1
        -: 1506:      const char* _formatString =
        1: 1507:        "(%s) %s: Unexpected assert in file %s, line %d, args %d";
        -: 1508:#else
        -: 1509:      const char* _formatString =
        -: 1510:        "%s: Unexpected assert in file %s, line %d, args %d";
        -: 1511:#endif
        -: 1512:
        -: 1513:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1514:
        1: 1515:      (void) snprintf(
        -: 1516:          _textBuffer,
        -: 1517:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1518:          _formatString,
        -: 1519:#if FW_OBJECT_NAMES == 1
        -: 1520:          this->m_objName,
        -: 1521:#endif
        -: 1522:          "AF_UNEXPECTED_ASSERT "
        1: 1523:        , file.toChar()
        -: 1524:        , line
        -: 1525:        , numArgs
        1: 1526:      );
        -: 1527:
        -: 1528:      // Null terminate
        1: 1529:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
        2: 1530:      Fw::TextLogString _logString = _textBuffer;
        1: 1531:      this->m_LogText_OutputPort[0].invoke(
        -: 1532:          _id,
        -: 1533:          _logTime,Fw::TEXT_LOG_FATAL,
        -: 1534:          _logString
        1: 1535:      );
        -: 1536:
        -: 1537:    }
        -: 1538:#endif
        -: 1539:
        1: 1540:  }
        -: 1541:  
        -: 1542:
        3: 1543:} // end namespace Svc
