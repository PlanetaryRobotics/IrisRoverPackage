        -:    0:Source:/home/tcanham/source/isf/Svc/AssertFatalAdapter/AssertFatalAdapterComponentImpl.cpp
        -:    0:Programs:2
        -:    1:// ====================================================================== 
        -:    2:// \title  AssertFatalAdapterImpl.cpp
        -:    3:// \author tcanham
        -:    4:// \brief  cpp file for AssertFatalAdapter component implementation class
        -:    5://
        -:    6:// \copyright
        -:    7:// Copyright 2009-2015, by the California Institute of Technology.
        -:    8:// ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9:// acknowledged.
        -:   11:// 
        -:   18:// ====================================================================== 
        -:   19:
        -:   20:
        -:   21:#include <Svc/AssertFatalAdapter/AssertFatalAdapterComponentImpl.hpp>
        -:   22:#include "Fw/Types/BasicTypes.hpp"
        -:   23:#include <Fw/Types/Assert.hpp>
        -:   24:#include <stdio.h>
        -:   25:
        -:   26:namespace Svc {
        -:   27:
        -:   28:  // ----------------------------------------------------------------------
        -:   29:  // Construction, initialization, and destruction 
        -:   30:  // ----------------------------------------------------------------------
        -:   31:
        1:   32:  AssertFatalAdapterComponentImpl ::
        -:   33:#if FW_OBJECT_NAMES == 1
        -:   34:    AssertFatalAdapterComponentImpl(
        -:   35:        const char *const compName
        -:   36:    ) :
        1:   37:      AssertFatalAdapterComponentBase(compName)
        -:   38:#else
        -:   39:    AssertFatalAdapterImpl(void)
        -:   40:#endif
        -:   41:  {
        -:   42:      // register component with adapter
        1:   43:      this->m_adapter.regAssertReporter(this);
        -:   44:      // register adapter
        1:   45:      this->m_adapter.registerHook();
        -:   46:
        1:   47:  }
        -:   48:
        1:   49:  void AssertFatalAdapterComponentImpl ::
        -:   50:    init(
        -:   51:        const NATIVE_INT_TYPE instance
        -:   52:    ) 
        -:   53:  {
        1:   54:    AssertFatalAdapterComponentBase::init(instance);
        1:   55:  }
        -:   56:
        1:   57:  AssertFatalAdapterComponentImpl ::
        1:   58:    ~AssertFatalAdapterComponentImpl(void)
        -:   59:  {
        -:   60:
        1:   61:  }
        -:   62:
        7:   63:  void AssertFatalAdapterComponentImpl::AssertFatalAdapter::reportAssert(
        -:   64:          FILE_NAME_ARG file,
        -:   65:          NATIVE_UINT_TYPE lineNo,
        -:   66:          NATIVE_UINT_TYPE numArgs,
        -:   67:          AssertArg arg1,
        -:   68:          AssertArg arg2,
        -:   69:          AssertArg arg3,
        -:   70:          AssertArg arg4,
        -:   71:          AssertArg arg5,
        -:   72:          AssertArg arg6
        -:   73:          ) {
        -:   74:
        7:   75:      if (m_compPtr) {
        7:   76:          m_compPtr->reportAssert(file,lineNo,numArgs,
        7:   77:                  arg1,arg2,arg3,arg4,arg5,arg6);
        -:   78:      } else {
        -:   79:          // Can't assert, what else can we do? Maybe somebody will see it.
    #####:   80:          printf("Svc::AssertFatalAdapter not registered!\n");
        -:   81:      }
        7:   82:  }
        -:   83:
        1:   84:  void AssertFatalAdapterComponentImpl::AssertFatalAdapter::regAssertReporter(AssertFatalAdapterComponentImpl* compPtr) {
        1:   85:      this->m_compPtr = compPtr;
        1:   86:  }
        -:   87:
        1:   88:  AssertFatalAdapterComponentImpl::AssertFatalAdapter::AssertFatalAdapter() {
        1:   89:  }
        -:   90:
        1:   91:  AssertFatalAdapterComponentImpl::AssertFatalAdapter::~AssertFatalAdapter() {
        1:   92:  }
        -:   93:
        7:   94:  void AssertFatalAdapterComponentImpl::AssertFatalAdapter::doAssert(void) {
        -:   95:      // do nothing since there will be a FATAL
        7:   96:  }
        -:   97:
        8:   98:  void AssertFatalAdapterComponentImpl::reportAssert(
        -:   99:          FILE_NAME_ARG file,
        -:  100:          NATIVE_UINT_TYPE lineNo,
        -:  101:          NATIVE_UINT_TYPE numArgs,
        -:  102:          AssertArg arg1,
        -:  103:          AssertArg arg2,
        -:  104:          AssertArg arg3,
        -:  105:          AssertArg arg4,
        -:  106:          AssertArg arg5,
        -:  107:          AssertArg arg6
        -:  108:          ) {
        -:  109:
        -:  110:
        -:  111:#if FW_ASSERT_LEVEL == FW_FILEID_ASSERT
        -:  112:      Fw::LogStringArg fileArg;
        -:  113:      fileArg.format("%d",file);
        -:  114:#else
       16:  115:      Fw::LogStringArg fileArg((const char*)file);
        -:  116:#endif
        -:  117:
        8:  118:      switch (numArgs) {
        -:  119:          case 0:
        1:  120:              this->log_FATAL_AF_ASSERT_0(fileArg,lineNo);
        1:  121:              break;
        -:  122:          case 1:
        1:  123:              this->log_FATAL_AF_ASSERT_1(fileArg,lineNo,arg1);
        1:  124:              break;
        -:  125:          case 2:
        1:  126:              this->log_FATAL_AF_ASSERT_2(fileArg,lineNo,arg1,arg2);
        1:  127:              break;
        -:  128:          case 3:
        1:  129:              this->log_FATAL_AF_ASSERT_3(fileArg,lineNo,arg1,arg2,arg3);
        1:  130:              break;
        -:  131:          case 4:
        1:  132:              this->log_FATAL_AF_ASSERT_4(fileArg,lineNo,arg1,arg2,arg3,arg4);
        1:  133:              break;
        -:  134:          case 5:
        1:  135:              this->log_FATAL_AF_ASSERT_5(fileArg,lineNo,arg1,arg2,arg3,arg4,arg5);
        1:  136:              break;
        -:  137:          case 6:
        1:  138:              this->log_FATAL_AF_ASSERT_6(fileArg,lineNo,arg1,arg2,arg3,arg4,arg5,arg6);
        1:  139:              break;
        -:  140:          default:
        1:  141:              this->log_FATAL_AF_UNEXPECTED_ASSERT(fileArg,lineNo,numArgs);
        1:  142:              break;
        -:  143:      }
        -:  144:
        8:  145:  }
        3:  146:} // end namespace Svc
