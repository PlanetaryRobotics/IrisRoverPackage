        -:    0:Source:/home/tim/source/isf/Svc/CmdDispatcher/CommandDispatcherImpl.cpp
        -:    0:Programs:5
        -:    1:/*
        -:    2: * CommandDispatcherImpl.cpp
        -:    3: *
        -:    4: *  Created on: May 13, 2014
        -:    5: *      Author: Timothy Canham
        -:    6: */
        -:    7:
        -:    8:#include <Svc/CmdDispatcher/CommandDispatcherImpl.hpp>
        -:    9:#include <Fw/Cmd/CmdPacket.hpp>
        -:   10:#include <Fw/Types/Assert.hpp>
        -:   11:#include <stdio.h>
        -:   12:
        -:   13:namespace Svc {
        -:   14:#if FW_OBJECT_NAMES == 1
       14:   15:    CommandDispatcherImpl::CommandDispatcherImpl(const char* name) :
        -:   16:        CommandDispatcherComponentBase(name),
        -:   17:#else
        -:   18:    CommandDispatcherImpl::CommandDispatcherImpl() :
        -:   19:#endif
       14:   20:    m_seq(0), m_numCmdsDispatched(0), m_numCmdErrors(0)
        -:   21:    {
       14:   22:        memset(this->m_entryTable,0,sizeof(this->m_entryTable));
       14:   23:        memset(this->m_sequenceTracker,0,sizeof(this->m_sequenceTracker));
       14:   24:    }
        -:   25:
       14:   26:    CommandDispatcherImpl::~CommandDispatcherImpl() {
       14:   27:    }
        -:   28:
       14:   29:    void CommandDispatcherImpl::init(NATIVE_INT_TYPE queueDepth) {
       14:   30:        CommandDispatcherComponentBase::init(queueDepth);
       14:   31:    }
        -:   32:
       58:   33:    void CommandDispatcherImpl::compCmdReg_handler(NATIVE_INT_TYPE portNum, FwOpcodeType opCode) {
        -:   34:
        -:   35:        // search for an empty slot
       58:   36:        bool slotFound = false;
     5858:   37:        for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); slot++) {
     5800:   38:            if ((not this->m_entryTable[slot].used) and (not slotFound)) {
       58:   39:                this->m_entryTable[slot].opcode = opCode;
       58:   40:                this->m_entryTable[slot].port = portNum;
       58:   41:                this->m_entryTable[slot].used = true;
       58:   42:                this->log_DIAGNOSTIC_OpCodeRegistered(opCode,portNum,slot);
       58:   43:                slotFound = true;
     5742:   44:            } else if (this->m_entryTable[slot].used) { // make sure no duplicates
      112:   45:                FW_ASSERT(this->m_entryTable[slot].opcode != opCode, opCode);
        -:   46:            }
        -:   47:        }
       58:   48:        FW_ASSERT(slotFound,opCode);
       58:   49:    }
        -:   50:
       14:   51:    void CommandDispatcherImpl::compCmdStat_handler(NATIVE_INT_TYPE portNum, FwOpcodeType opCode, U32 cmdSeq, Fw::CommandResponse response) {
        -:   52:        // check response and log
       14:   53:        if (Fw::COMMAND_OK == response) {
       10:   54:            this->log_COMMAND_OpCodeCompleted(opCode);
        -:   55:        } else {
        4:   56:            this->m_numCmdErrors++;
        4:   57:            this->tlmWrite_CommandErrors(this->m_numCmdErrors);
        4:   58:            this->log_WARNING_HI_OpCodeError(opCode,response);
        -:   59:        }
        -:   60:        // look for command source
       14:   61:        NATIVE_INT_TYPE portToCall = -1;
        -:   62:        U32 context;
       64:   63:        for (U32 pending = 0; pending < FW_NUM_ARRAY_ELEMENTS(this->m_sequenceTracker); pending++) {
       62:   64:            if (
       76:   65:                    (this->m_sequenceTracker[pending].seq == cmdSeq) &&
        -:   66:                    (this->m_sequenceTracker[pending].used)
        -:   67:                ) {
       12:   68:                portToCall = this->m_sequenceTracker[pending].callerPort;
       12:   69:                context = this->m_sequenceTracker[pending].context;
       12:   70:                FW_ASSERT(opCode == this->m_sequenceTracker[pending].opCode);
       12:   71:                FW_ASSERT(portToCall < this->getNum_seqCmdStatus_OutputPorts());
       12:   72:                this->m_sequenceTracker[pending].used = false;
       12:   73:                break;
        -:   74:            }
        -:   75:        }
        -:   76:
       14:   77:        if (portToCall != -1) {
        -:   78:            // call port to report status
       12:   79:            if (this->isConnected_seqCmdStatus_OutputPort(portToCall)) {
       12:   80:                this->seqCmdStatus_out(portToCall,opCode,context,response);
        -:   81:            }
        -:   82:        }
       14:   83:    }
        -:   84:
       72:   85:    void CommandDispatcherImpl::seqCmdBuff_handler(NATIVE_INT_TYPE portNum, Fw::ComBuffer &data, U32 context) {
        -:   86:
       72:   87:        Fw::CmdPacket cmdPkt;
       72:   88:        Fw::SerializeStatus stat = cmdPkt.deserialize(data);
        -:   89:
       72:   90:        if (stat != Fw::FW_SERIALIZE_OK) {
        2:   91:            this->log_WARNING_HI_MalformedCommand(stat);
        2:   92:            if (this->isConnected_seqCmdStatus_OutputPort(portNum)) {
        2:   93:                this->seqCmdStatus_out(portNum,cmdPkt.getOpCode(),context,Fw::COMMAND_VALIDATION_ERROR);
        -:   94:            }
        2:   95:            return;
        -:   96:        }
        -:   97:
        -:   98:        // search for opcode in dispatch table
        -:   99:        U32 entry;
       70:  100:        bool entryFound = false;
        -:  101:
      522:  102:        for (entry = 0; entry < FW_NUM_ARRAY_ELEMENTS(this->m_entryTable); entry++) {
      520:  103:            if ((this->m_entryTable[entry].used) and (cmdPkt.getOpCode() == this->m_entryTable[entry].opcode)) {
       68:  104:                entryFound = true;
       68:  105:                break;
        -:  106:            }
        -:  107:        }
       70:  108:        if (entryFound and this->isConnected_compCmdSend_OutputPort(this->m_entryTable[entry].port)) {
        -:  109:            // register command in command tracker only if response port is connect
       68:  110:            if (this->isConnected_seqCmdStatus_OutputPort(portNum)) {
       68:  111:                bool pendingFound = false;
        -:  112:
      720:  113:                for (U32 pending = 0; pending < FW_NUM_ARRAY_ELEMENTS(this->m_sequenceTracker); pending++) {
      718:  114:                    if (not this->m_sequenceTracker[pending].used) {
       66:  115:                        pendingFound = true;
       66:  116:                        this->m_sequenceTracker[pending].used = true;
       66:  117:                        this->m_sequenceTracker[pending].opCode = cmdPkt.getOpCode();
       66:  118:                        this->m_sequenceTracker[pending].seq = this->m_seq;
       66:  119:                        this->m_sequenceTracker[pending].context = context;
       66:  120:                        this->m_sequenceTracker[pending].callerPort = portNum;
       66:  121:                        break;
        -:  122:                    }
        -:  123:                }
        -:  124:
        -:  125:                // if we couldn't find a slot to track the command, quit
       68:  126:                if (not pendingFound) {
        2:  127:                    this->log_WARNING_HI_TooManyCommands(cmdPkt.getOpCode());
        2:  128:                    if (this->isConnected_seqCmdStatus_OutputPort(portNum)) {
        2:  129:                        this->seqCmdStatus_out(portNum,cmdPkt.getOpCode(),context,Fw::COMMAND_EXECUTION_ERROR);
        -:  130:                    }
        2:  131:                    return;
        -:  132:                }
        -:  133:            } // end if status port connected
        -:  134:            // pass arguments to argument buffer
       66:  135:            this->compCmdSend_out(this->m_entryTable[entry].port,cmdPkt.getOpCode(),this->m_seq,cmdPkt.getArgBuffer());
        -:  136:            // log dispatched command
       66:  137:            this->log_COMMAND_OpCodeDispatched(cmdPkt.getOpCode(),this->m_entryTable[entry].port);
        -:  138:
        -:  139:            // increment command count
       66:  140:            this->m_numCmdsDispatched++;
        -:  141:            // write telemetry channel for dispatched commands
       66:  142:            this->tlmWrite_CommandsDispatched(this->m_numCmdsDispatched);
        -:  143:        } else {
        2:  144:        	this->log_WARNING_HI_InvalidCommand(cmdPkt.getOpCode());
        2:  145:        	this->m_numCmdErrors++;
        -:  146:        	// Fail command back to port, if connected
        2:  147:        	if (this->isConnected_seqCmdStatus_OutputPort(portNum)) {
        2:  148:        	    this->seqCmdStatus_out(portNum,cmdPkt.getOpCode(),context,Fw::COMMAND_INVALID_OPCODE);
        -:  149:        	}
        2:  150:        	this->tlmWrite_CommandErrors(this->m_numCmdErrors);
        -:  151:        }
        -:  152:
        -:  153:        // increment sequence number
       68:  154:        this->m_seq++;
        -:  155:    }
        -:  156:
        2:  157:    void CommandDispatcherImpl::CMD_NO_OP_cmdHandler(FwOpcodeType opCode, U32 cmdSeq) {
        2:  158:    	Fw::LogStringArg no_op_string("Hello, World!");
        -:  159:    	// Log event for NO_OP here.
        2:  160:    	this->log_COMMAND_NoOpReceived();
        2:  161:        this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        2:  162:    }
        -:  163:
        2:  164:    void CommandDispatcherImpl::CMD_NO_OP_STRING_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, const Fw::CmdStringArg& arg1) {
        2:  165:		Fw::LogStringArg msg(arg1.toChar());
        2:  166:    	(void) printf("NO_OP_STRING: arg1 = %s\n",arg1.toChar());
        -:  167:    	// Echo the NO_OP_STRING args here.
        2:  168:    	this->log_COMMAND_NoOpStringReceived(msg);
        2:  169:    	this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        2:  170:    }
        -:  171:
        2:  172:    void CommandDispatcherImpl::CMD_TEST_CMD_1_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, I32 arg1, F32 arg2, U8 arg3) {
        2:  173:    	(void) printf("TEST_CMD_1: arg1 = %d, arg2 = %f, arg3 = %u\n", arg1, arg2, arg3);
        2:  174:    	this->log_COMMAND_TestCmd1Args(arg1,arg2,arg3);
        2:  175:    	this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        2:  176:    }
        -:  177:
        2:  178:    void CommandDispatcherImpl::CMD_CLEAR_TRACKING_cmdHandler(FwOpcodeType opCode, U32 cmdSeq) {
        -:  179:        // clear tracking table
       52:  180:        for (NATIVE_INT_TYPE entry = 0; entry < CMD_DISPATCHER_SEQUENCER_TABLE_SIZE; entry++) {
       50:  181:            this->m_sequenceTracker[entry].used = false;
        -:  182:        }
        2:  183:        this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        2:  184:    }
        -:  185:}
