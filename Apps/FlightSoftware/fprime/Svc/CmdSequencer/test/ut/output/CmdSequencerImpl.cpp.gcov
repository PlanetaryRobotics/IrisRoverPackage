        -:    0:Source:/home/tim/source/isf/Svc/CmdSequencer/CmdSequencerImpl.cpp
        -:    0:Programs:11
        -:    1:// ====================================================================== 
        -:    2:// \title  CmdSequencerImpl.cpp
        -:    3:// \author Bocchino/Canham
        -:    4:// \brief  cpp file for CmdDispatcherComponentBase component implementation class
        -:    5://
        -:    6:// \copyright
        -:    7:// Copyright (C) 2009-2016 California Institute of Technology.
        -:    8:// ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9:// acknowledged.
        -:   11:// 
        -:   18:// ====================================================================== 
        -:   19:
        -:   20:#include <Fw/Types/Assert.hpp>
        -:   21:#include <Fw/Types/SerialBuffer.hpp>
        -:   22:#include <Svc/CmdSequencer/CmdSequencerImpl.hpp>
        -:   23:#include <Fw/Com/ComPacket.hpp>
        -:   24:#include <Fw/Types/Serializable.hpp>
        -:   25:extern "C" {
        -:   26:  #include <Utils/Hash/libcrc/lib_crc.h>
        -:   27:}
        -:   28:
        -:   29:namespace Svc {
        -:   30:
        -:   31:    // ----------------------------------------------------------------------
        -:   32:    // Construction, initialization, and destruction
        -:   33:    // ----------------------------------------------------------------------
        -:   34:
       96:   35:    CmdSequencerComponentImpl::
        -:   36:#if FW_OBJECT_NAMES == 1
        -:   37:    CmdSequencerComponentImpl(const char* name) :
        -:   38:            CmdSequencerComponentBase(name),
        -:   39:#else
        -:   40:            CmdSequencerComponentImpl(void) :
        -:   41:            CmdSequencerComponentBase(),
        -:   42:#endif
        -:   43:            m_numRecords(0),
        -:   44:            m_timeBase(TB_DONT_CARE),
        -:   45:            m_timeContext(FW_CONTEXT_DONT_CARE),
        -:   46:            m_fileCRC(0),
        -:   47:            m_allocatorId(0),
        -:   48:            m_loadCmdCount(0),
        -:   49:            m_cancelCmdCount(0),
        -:   50:            m_errorCount(0),
        -:   51:            m_queueDepth(0),
        -:   52:            m_runMode(STOPPED),
        -:   53:            m_stepMode(AUTO),
        -:   54:            m_executedCount(0),
        -:   55:            m_totalExecutedCount(0),
        -:   56:            m_sequencesCompletedCount(0),
       96:   57:            m_timeout(0)
        -:   58:    {
        -:   59:
       96:   60:    }
        -:   61:
       96:   62:    void CmdSequencerComponentImpl::init(const NATIVE_INT_TYPE queueDepth,
        -:   63:            const NATIVE_INT_TYPE instance) {
       96:   64:        CmdSequencerComponentBase::init(queueDepth, instance);
       96:   65:    }
        -:   66:
       48:   67:    void CmdSequencerComponentImpl::setTimeout(NATIVE_UINT_TYPE timeout) {
       48:   68:        this->m_timeout = timeout;
       48:   69:    }
        -:   70:
       96:   71:    void CmdSequencerComponentImpl::allocateBuffer(NATIVE_INT_TYPE identifier, Fw::MemAllocator& allocator, NATIVE_UINT_TYPE bytes) {
        -:   72:        // has to be at least as big as a header
       96:   73:        FW_ASSERT(bytes >= SEQ_FILE_HEADER_SIZE);
       96:   74:        this->m_allocatorId = identifier;
       96:   75:        this->m_seqBuffer.setExtBuffer(static_cast<U8*>(allocator.allocate(identifier,bytes)),bytes);
       96:   76:    }
        -:   77:
       87:   78:    void CmdSequencerComponentImpl::deallocateBuffer(Fw::MemAllocator& allocator) {
       87:   79:        allocator.deallocate(this->m_allocatorId,this->m_seqBuffer.getBuffAddr());
       87:   80:        this->m_seqBuffer.clear();
       87:   81:    }
        -:   82:
       96:   83:    CmdSequencerComponentImpl::~CmdSequencerComponentImpl(void) {
        -:   84:
       96:   85:    }
        -:   86:
        -:   87:    // ----------------------------------------------------------------------
        -:   88:    // Handler implementations
        -:   89:    // ----------------------------------------------------------------------
        -:   90:
       84:   91:    void CmdSequencerComponentImpl::CS_Run_cmdHandler(
        -:   92:            FwOpcodeType opCode,
        -:   93:            U32 cmdSeq,
        -:   94:            const Fw::CmdStringArg& fileName) {
        -:   95:
       84:   96:        if (!this->requireRunMode(STOPPED)) {
        4:   97:            this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
        4:   98:            return;
        -:   99:        }
        -:  100:
        -:  101:        // load commands
       80:  102:        if (not this->performCmd_Load(fileName)) {
       36:  103:            this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
       36:  104:            return;
        -:  105:        }
        -:  106:
       44:  107:        this->m_executedCount = 0;
        -:  108:
        -:  109:        // Check the step mode. If it is auto, start the sequence
       44:  110:        if (AUTO == this->m_stepMode) {
       36:  111:            this->m_runMode = RUNNING;
       36:  112:            this->performCmd_Step();
        -:  113:        }
        -:  114:
       44:  115:        this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_OK);
        -:  116:    }
        -:  117:
      104:  118:    void CmdSequencerComponentImpl::CS_Validate_cmdHandler(
        -:  119:            FwOpcodeType opCode, /*!< The opcode*/
        -:  120:            U32 cmdSeq, /*!< The command sequence number*/
        -:  121:            const Fw::CmdStringArg& fileName) { /*!< The name of the sequence file*/
        -:  122:
      104:  123:        if (!this->requireRunMode(STOPPED)) {
        4:  124:            this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
        4:  125:            return;
        -:  126:        }
        -:  127:
        -:  128:        // load commands
      100:  129:        if (not this->performCmd_Load(fileName)) {
       52:  130:            this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
       52:  131:            return;
        -:  132:        }
        -:  133:
        -:  134:        // reset buffer
       48:  135:        this->m_seqBuffer.resetSer();
        -:  136:
       48:  137:        this->log_ACTIVITY_HI_CS_SequenceValid(this->m_logFileName);
        -:  138:
       48:  139:        this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_OK);
        -:  140:
        -:  141:    }
        -:  142:
        -:  143:    //! Handler for input port seqRunIn
       12:  144:    void CmdSequencerComponentImpl::seqRunIn_handler(
        -:  145:           NATIVE_INT_TYPE portNum, /*!< The port number*/
        -:  146:           Fw::EightyCharString &filename /*!< The sequence file*/
        -:  147:       ) {
        -:  148:
       12:  149:        if (!this->requireRunMode(STOPPED)) {
        4:  150:            this->seqDone_out(0,0,0,Fw::COMMAND_EXECUTION_ERROR);
       12:  151:            return;
        -:  152:        }
        -:  153:
        -:  154:        // load commands
       12:  155:        Fw::CmdStringArg cmdStr(filename);
        8:  156:        if (not this->performCmd_Load(cmdStr)) {
        4:  157:            this->seqDone_out(0,0,0,Fw::COMMAND_EXECUTION_ERROR);
        4:  158:            return;
        -:  159:        }
        -:  160:
        4:  161:        this->m_executedCount = 0;
        -:  162:
        -:  163:        // Check the step mode. If it is auto, start the sequence
        4:  164:        if (AUTO == this->m_stepMode) {
        4:  165:            this->m_runMode = RUNNING;
        4:  166:            this->performCmd_Step();
        -:  167:        }
        -:  168:
        4:  169:        this->log_ACTIVITY_HI_CS_PortSequenceStarted(this->m_logFileName);
        -:  170:    }
        -:  171:
        8:  172:    void CmdSequencerComponentImpl::CS_Cancel_cmdHandler(
        -:  173:    FwOpcodeType opCode, U32 cmdSeq) {
        8:  174:        if (RUNNING == this->m_runMode) {
        4:  175:            this->performCmd_Cancel();
        8:  176:            Fw::LogStringArg logStringArg(this->m_fileName);
        4:  177:            this->log_ACTIVITY_HI_CS_SequenceCanceled(logStringArg);
        4:  178:            ++this->m_cancelCmdCount;
        4:  179:            this->tlmWrite_CS_CancelCommands(this->m_cancelCmdCount);
        -:  180:        } else {
        4:  181:            this->log_WARNING_LO_CS_NoSequenceActive();
        -:  182:        }
        8:  183:        this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_OK);
        8:  184:    }
        -:  185:
        -:  186:    // ----------------------------------------------------------------------
        -:  187:    // Private helper methods
        -:  188:    // ----------------------------------------------------------------------
        -:  189:
       92:  190:    void CmdSequencerComponentImpl::error(void) {
       92:  191:        ++this->m_errorCount;
       92:  192:        this->m_fileName = "";
       92:  193:        this->m_logFileName = "";
       92:  194:        this->tlmWrite_CS_Errors(m_errorCount);
       92:  195:    }
        -:  196:
       28:  197:    void CmdSequencerComponentImpl::eventFileInvalid(FileReadStage stage, I32 error) {
       28:  198:        this->log_WARNING_HI_CS_FileInvalid(this->m_logFileName,stage,error);
       28:  199:        this->error();
       28:  200:    }
        -:  201:
        4:  202:    void CmdSequencerComponentImpl::eventTimeBaseMismatch(U32 currTimeBase, U32 seqTimeBase) {
        4:  203:        this->log_WARNING_HI_CS_TimeBaseMismatch(this->m_logFileName,currTimeBase,seqTimeBase);
        4:  204:        this->error();
        4:  205:    }
        -:  206:
        4:  207:    void CmdSequencerComponentImpl::eventTimeContextMismatch(U32 currTimeContext, U32 seqTimeContext) {
        4:  208:        this->log_WARNING_HI_CS_TimeContextMismatch(this->m_logFileName,currTimeContext,seqTimeContext);
        4:  209:        this->error();
        4:  210:    }
        -:  211:
        4:  212:    void CmdSequencerComponentImpl::eventFileReadError(void) {
        4:  213:        this->log_WARNING_HI_CS_FileReadError(this->m_logFileName);
        4:  214:        this->error();
        4:  215:    }
        -:  216:
        4:  217:    void CmdSequencerComponentImpl::eventFileSizeError(U32 size) {
        4:  218:        this->log_WARNING_HI_CS_FileSizeError(this->m_logFileName,size);
        4:  219:        this->error();
        4:  220:    }
        -:  221:
       32:  222:    void CmdSequencerComponentImpl::eventRecordInvalid(U32 n, I32 error) {
       32:  223:        this->log_WARNING_HI_CS_RecordInvalid(this->m_logFileName, n, error);
       32:  224:        this->error();
       32:  225:    }
        -:  226:
       12:  227:    void CmdSequencerComponentImpl::performCmd_Cancel(void) {
       12:  228:        this->m_seqBuffer.resetDeser();
       12:  229:        this->m_runMode = STOPPED;
       12:  230:        this->m_cmdTimer.clear();
       12:  231:        this->m_cmdTimeoutTimer.clear();
       12:  232:        this->m_executedCount = 0;
        -:  233:        // write sequence done port with error, if connected
       12:  234:        if (this->isConnected_seqDone_OutputPort(0)) {
       12:  235:            this->seqDone_out(0,0,0,Fw::COMMAND_EXECUTION_ERROR);
        -:  236:        }
        -:  237:
       12:  238:    }
        -:  239:
      188:  240:    bool CmdSequencerComponentImpl::performCmd_Load(const Fw::CmdStringArg& fileName) {
        -:  241:
        -:  242:        // make sure there is a buffer allocated
      188:  243:        FW_ASSERT(this->m_seqBuffer.getBuffAddr());
        -:  244:
      188:  245:        this->m_fileName = fileName;
        -:  246:        // copy for events
      188:  247:        this->m_logFileName = fileName;
        -:  248:
      188:  249:        if (!this->readSequenceFile()) {
       52:  250:            return false;
        -:  251:        }
        -:  252:
      136:  253:        if (!this->validateBuffer()) {
       40:  254:            return false;
        -:  255:        }
        -:  256:
       96:  257:        this->log_ACTIVITY_LO_CS_SequenceLoaded(this->m_logFileName);
       96:  258:        ++this->m_loadCmdCount;
       96:  259:        this->tlmWrite_CS_LoadCommands(this->m_loadCmdCount);
        -:  260:
       96:  261:        return true;
        -:  262:
        -:  263:    }
        -:  264:
      188:  265:    bool CmdSequencerComponentImpl::readSequenceFile(void) {
        -:  266:
        -:  267:        bool result;
        -:  268:
      188:  269:        Os::File::Status status = this->m_sequenceFile.open(
      188:  270:                this->m_fileName.toChar(), Os::File::OPEN_READ);
        -:  271:
      188:  272:        if (status == Os::File::OP_OK) {
      176:  273:            result = this->readOpenSequenceFile();
       12:  274:        } else if (status == Os::File::DOESNT_EXIST) {
        8:  275:            this->log_WARNING_HI_CS_FileNotFound(this->m_logFileName);
        8:  276:            this->error();
        8:  277:            result = false;
        -:  278:        } else {
        4:  279:            this->eventFileReadError();
        4:  280:            result = false;
        -:  281:        }
        -:  282:
      188:  283:        this->m_sequenceFile.close();
      188:  284:        return result;
        -:  285:
        -:  286:    }
        -:  287:
      176:  288:    bool CmdSequencerComponentImpl::readOpenSequenceFile(void) {
        -:  289:
        -:  290:        U32 fileSize;
        -:  291:
      176:  292:        NATIVE_INT_TYPE readLen = SEQ_FILE_HEADER_SIZE;
        -:  293:        // temporarily borrow sequence buffer for header
      176:  294:        Os::File::Status status = this->m_sequenceFile.read(this->m_seqBuffer.getBuffAddr(),readLen);
        -:  295:
        -:  296:        // check read status
      176:  297:        if (status != Os::File::OP_OK) {
        4:  298:            this->eventFileInvalid(SEQ_READ_HEADER,this->m_sequenceFile.getLastError());
        4:  299:            return false;
        -:  300:        }
        -:  301:
        -:  302:        // check read size
      172:  303:        if (SEQ_FILE_HEADER_SIZE != readLen) {
        4:  304:            this->eventFileInvalid(SEQ_READ_HEADER_SIZE,readLen);
        4:  305:            return false;
        -:  306:        }
        -:  307:
        -:  308:        // set buffer length to read size
      168:  309:        FW_ASSERT(Fw::FW_SERIALIZE_OK == this->m_seqBuffer.setBuffLen(readLen));
        -:  310:
        -:  311:        // deserialize size of file
      168:  312:        Fw::SerializeStatus stat = this->m_seqBuffer.deserialize(fileSize);
      168:  313:        if (stat != Fw::FW_SERIALIZE_OK) {
    #####:  314:            this->eventFileInvalid(SEQ_DESER_SIZE,stat);
    #####:  315:            return false;
        -:  316:        }
        -:  317:
      168:  318:        if (fileSize > this->m_seqBuffer.getBuffCapacity()) {
        4:  319:            this->eventFileSizeError(fileSize);
        4:  320:            return false;
        -:  321:        }
        -:  322:
        -:  323:        // deserialize number of records
      164:  324:        stat = this->m_seqBuffer.deserialize(this->m_numRecords);
      164:  325:        if (stat != Fw::FW_SERIALIZE_OK) {
    #####:  326:            this->eventFileInvalid(SEQ_DESER_NUM_RECORDS,stat);
    #####:  327:            return false;
        -:  328:        }
        -:  329:
        -:  330:        // deserialize time base of sequence
        -:  331:        FwTimeBaseStoreType tbase;
      164:  332:        stat = this->m_seqBuffer.deserialize(tbase);
      164:  333:        if (stat != Fw::FW_SERIALIZE_OK) {
    #####:  334:            this->eventFileInvalid(SEQ_DESER_TIME_BASE,stat);
    #####:  335:            return false;
        -:  336:        }
        -:  337:
      164:  338:        this->m_timeBase = static_cast<IsfTimeBase>(tbase);
        -:  339:
        -:  340:        // check time base
      328:  341:        Fw::Time check = this->getTime();
      164:  342:        if (
      168:  343:                (check.getTimeBase() != this->m_timeBase) and
        4:  344:                (this->m_timeBase != TB_DONT_CARE)
        -:  345:            ) {
        4:  346:            this->eventTimeBaseMismatch(check.getTimeBase(),this->m_timeBase);
        4:  347:            return false;
        -:  348:        }
        -:  349:        // set to actual time base for later
      160:  350:        this->m_timeBase = check.getTimeBase();
        -:  351:
        -:  352:        // deserialize time context
      160:  353:        stat = this->m_seqBuffer.deserialize(this->m_timeContext);
      160:  354:        if (stat != Fw::FW_SERIALIZE_OK) {
    #####:  355:            this->eventFileInvalid(SEQ_DESER_TIME_CONTEXT,stat);
    #####:  356:            return false;
        -:  357:        }
        -:  358:
        -:  359:        // check time context
      160:  360:        if (
      164:  361:                (check.getContext() != this->m_timeContext) and
        4:  362:                (this->m_timeContext != FW_CONTEXT_DONT_CARE)
        -:  363:           ) {
        4:  364:            this->eventTimeContextMismatch(check.getContext(),this->m_timeContext);
        4:  365:            return false;
        -:  366:        }
        -:  367:
        -:  368:        // set to actual time context for later
      156:  369:        this->m_timeContext = check.getContext();
        -:  370:
        -:  371:        // compute CRC over header
      156:  372:        this->initCrc(this->m_fileCRC);
        -:  373:
      156:  374:        this->updateCRC(this->m_fileCRC,this->m_seqBuffer.getBuffAddr(),SEQ_FILE_HEADER_SIZE);
        -:  375:
        -:  376:        // read sequence data
        -:  377:
      156:  378:        readLen = fileSize;
      156:  379:        status = this->m_sequenceFile.read(this->m_seqBuffer.getBuffAddr(),readLen);
        -:  380:        // check read status
      156:  381:        if (status != Os::File::OP_OK) {
        4:  382:            this->eventFileInvalid(SEQ_READ_SEQ_DATA,this->m_sequenceFile.getLastError());
        4:  383:            return false;
        -:  384:        }
        -:  385:
        -:  386:        // check read size
      152:  387:        if ((NATIVE_INT_TYPE)fileSize != readLen) {
        4:  388:            this->eventFileInvalid(SEQ_READ_SEQ_DATA_SIZE,readLen);
        4:  389:            return false;
        -:  390:        }
        -:  391:
        -:  392:        // set sequence buffer size
      148:  393:        FW_ASSERT(Fw::FW_SERIALIZE_OK == this->m_seqBuffer.setBuffLen(fileSize));
        -:  394:
        -:  395:        // compute CRC over rest of file. Will be checked in validateBuffer()
        -:  396:
        -:  397:        // buffer should be at least as large as a CRC
      148:  398:        if (this->m_seqBuffer.getBuffLength() < sizeof(this->m_fileCRC)) {
       12:  399:            this->eventFileInvalid(SEQ_READ_SEQ_CRC,this->m_seqBuffer.getBuffLength());
       12:  400:            return false;
        -:  401:        } else {
      272:  402:            this->updateCRC(this->m_fileCRC,
      136:  403:                    this->m_seqBuffer.getBuffAddr(),
      136:  404:                    fileSize-sizeof(this->m_fileCRC));
        -:  405:
        -:  406:            // finalize CRC
      136:  407:            this->finalizeCRC(this->m_fileCRC);
      136:  408:            return true;
        -:  409:        }
        -:  410:
        -:  411:
        -:  412:    }
        -:  413:
      136:  414:    bool CmdSequencerComponentImpl::validateBuffer(void) {
        -:  415:
        -:  416:        // validate CRC
        -:  417:
        -:  418:        // Get CRC from the data file
        -:  419:        U32 storedCrc;
        -:  420:
        -:  421:        // point at CRC bytes
      136:  422:        Fw::ExternalSerializeBuffer crcBuff(&this->m_seqBuffer.getBuffAddr()[this->m_seqBuffer.getBuffLength()-sizeof(storedCrc)],
      272:  423:                sizeof(storedCrc));
        -:  424:        // set buffer size to length of CRC
      136:  425:        FW_ASSERT(Fw::FW_SERIALIZE_OK == crcBuff.setBuffLen(sizeof(storedCrc)));
        -:  426:
        -:  427:        // deserialize CRC value
      136:  428:        Fw::SerializeStatus stat = crcBuff.deserialize(storedCrc);
      136:  429:        FW_ASSERT(stat == Fw::FW_SERIALIZE_OK,stat);
        -:  430:
        -:  431:        // compare CRC
      136:  432:        if (storedCrc != this->m_fileCRC) {
        4:  433:            this->log_WARNING_HI_CS_FileCrcFailure(this->m_logFileName,storedCrc,this->m_fileCRC);
        4:  434:            this->error();
        4:  435:            return false;
        -:  436:        }
        -:  437:
      264:  438:        CmdRecord rec;
        -:  439:
      592:  440:        for (NATIVE_UINT_TYPE record = 0; record < this->m_numRecords; record++) {
      492:  441:            Fw::SerializeStatus stat = rec.deserialize(this->m_seqBuffer);
      492:  442:            if (stat != Fw::FW_SERIALIZE_OK) {
       32:  443:                this->eventRecordInvalid(record,stat);
       32:  444:                return false;
        -:  445:            }
        -:  446:        }
        -:  447:
        -:  448:        // there should only be the CRC left
      100:  449:        if (this->m_seqBuffer.getBuffLeft() != sizeof(this->m_fileCRC)) {
        4:  450:            this->log_WARNING_HI_CS_RecordMismatch(this->m_logFileName,this->m_numRecords,this->m_seqBuffer.getBuffLeft()-sizeof(this->m_fileCRC));
        4:  451:            return false;
        -:  452:        }
        -:  453:
        -:  454:        // rewind deserialization
       96:  455:        this->m_seqBuffer.resetDeser();
        -:  456:        // set buffer to size minus CRC now that it's validated
       96:  457:        FW_ASSERT(Fw::FW_SERIALIZE_OK == this->m_seqBuffer.setBuffLen(this->m_seqBuffer.getBuffLength()-sizeof(this->m_fileCRC)));
        -:  458:
       96:  459:        return true;
        -:  460:
        -:  461:    }
        -:  462:
      152:  463:    void CmdSequencerComponentImpl::cmdResponseIn_handler(
        -:  464:            NATIVE_INT_TYPE portNum,
        -:  465:            FwOpcodeType opcode, U32 cmdSeq, Fw::CommandResponse response) {
        -:  466:        // check to see if sequencer is running
        -:  467:
      152:  468:        if (this->m_runMode == STOPPED) {
        4:  469:            this->log_WARNING_HI_CS_UnexpectedCompletion(opcode);
        -:  470:        } else {
        -:  471:            // clear command timeout
      148:  472:            this->m_cmdTimeoutTimer.clear();
      148:  473:            if (response != Fw::COMMAND_OK) {
        4:  474:                this->commandError(this->m_executedCount, opcode, response);
        4:  475:                this->performCmd_Cancel();
      144:  476:            } else if (this->m_runMode == RUNNING && this->m_stepMode == AUTO) {
      108:  477:                this->commandComplete(opcode);
        -:  478:                // check to see if there is any data left
      216:  479:                if (this->m_seqBuffer.getBuffLeft() == 0) {
        8:  480:                    this->m_runMode = STOPPED;
        8:  481:                    this->sequenceComplete();
        -:  482:                } else {
      100:  483:                    this->performCmd_Step();
        -:  484:                }
        -:  485:            } else { // manual step mode
       36:  486:                this->commandComplete(opcode);
       36:  487:                if (this->m_seqBuffer.getBuffLeft() == 0) {
        4:  488:                    this->m_runMode = STOPPED;
        4:  489:                    this->sequenceComplete();
        -:  490:                }
        -:  491:            }
        -:  492:        }
      152:  493:    }
        -:  494:
       48:  495:    void CmdSequencerComponentImpl::schedIn_handler(NATIVE_INT_TYPE portNum,
        -:  496:            NATIVE_UINT_TYPE order) {
        -:  497:
       96:  498:        Fw::Time currTime = this->getTime();
        -:  499:        // check to see if a command time is pending
       48:  500:        if (this->m_cmdTimer.isExpiredAt(currTime)) {
       20:  501:            this->comCmdOut_out(0, m_cmdRecord.m_command, 0);
       20:  502:            this->m_cmdTimer.clear();
        -:  503:            // start command timeout timer
       20:  504:            this->setCmdTimeout(currTime);
       28:  505:        } else if (this->m_cmdTimeoutTimer.isExpiredAt(this->getTime())) { // check for command timeout
        4:  506:            this->log_WARNING_HI_CS_SequenceTimeout(m_logFileName,this->m_executedCount);
        -:  507:            // If there is a command timeout, cancel the sequence
        4:  508:            this->performCmd_Cancel();
        -:  509:        }
       48:  510:    }
        -:  511:
       16:  512:    void CmdSequencerComponentImpl::CS_Start_cmdHandler(
        -:  513:            FwOpcodeType opcode, U32 cmdSeq) {
        -:  514:
        -:  515:        // make sure a sequence is loaded
       16:  516:        if (this->m_seqBuffer.getBuffLength() == 0) {
        4:  517:            this->log_WARNING_LO_CS_NoSequenceActive();
        4:  518:            this->cmdResponse_out(opcode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
        4:  519:            return;
        -:  520:        }
       12:  521:        if (!this->requireRunMode(STOPPED)) {
        4:  522:            this->cmdResponse_out(opcode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
        4:  523:            return;
        -:  524:        }
        8:  525:        this->m_runMode = RUNNING;
        8:  526:        this->performCmd_Step();
        8:  527:        this->log_ACTIVITY_HI_CS_CmdStarted(this->m_logFileName);
        8:  528:        this->cmdResponse_out(opcode, cmdSeq, Fw::COMMAND_OK);
        -:  529:    }
        -:  530:
       36:  531:    void CmdSequencerComponentImpl::CS_Step_cmdHandler(
        -:  532:            FwOpcodeType opcode, U32 cmdSeq) {
       36:  533:        if (this->requireRunMode(RUNNING)) {
       32:  534:            this->performCmd_Step();
        -:  535:            // check for special case where end of sequence entry was encountered
       32:  536:            if (this->m_runMode != STOPPED) {
       28:  537:                this->log_ACTIVITY_HI_CS_CmdStepped(this->m_logFileName,this->m_executedCount);
        -:  538:            }
       32:  539:            this->cmdResponse_out(opcode, cmdSeq, Fw::COMMAND_OK);
        -:  540:        } else {
        4:  541:            this->cmdResponse_out(opcode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
        -:  542:        }
       36:  543:    }
        -:  544:
        8:  545:    void CmdSequencerComponentImpl::CS_Auto_cmdHandler(
        -:  546:            FwOpcodeType opcode, U32 cmdSeq) {
        8:  547:        if (this->requireRunMode(STOPPED)) {
        4:  548:            this->m_stepMode = AUTO;
        4:  549:            this->log_ACTIVITY_HI_CS_ModeSwitched(SEQ_AUTO_MODE);
        4:  550:            this->cmdResponse_out(opcode, cmdSeq, Fw::COMMAND_OK);
        -:  551:        } else {
        4:  552:            this->cmdResponse_out(opcode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
        -:  553:        }
        8:  554:    }
        -:  555:
       12:  556:    void CmdSequencerComponentImpl::CS_Manual_cmdHandler(
        -:  557:            FwOpcodeType opcode, U32 cmdSeq) {
       12:  558:        if (this->requireRunMode(STOPPED)) {
        8:  559:            this->m_stepMode = MANUAL;
        8:  560:            this->log_ACTIVITY_HI_CS_ModeSwitched(SEQ_STEP_MODE);
        8:  561:            this->cmdResponse_out(opcode, cmdSeq, Fw::COMMAND_OK);
        -:  562:        } else {
        4:  563:            this->cmdResponse_out(opcode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
        -:  564:        }
       12:  565:    }
        -:  566:
        -:  567:    // ----------------------------------------------------------------------
        -:  568:    // Helper methods
        -:  569:    // ----------------------------------------------------------------------
        -:  570:
      268:  571:    bool CmdSequencerComponentImpl::requireRunMode(RunMode mode) {
      268:  572:        if (this->m_runMode == mode) {
      240:  573:            return true;
        -:  574:        } else {
       28:  575:            this->log_WARNING_HI_CS_InvalidMode();
       28:  576:            return false;
        -:  577:        }
        -:  578:    }
        -:  579:
        4:  580:    void CmdSequencerComponentImpl::commandError(const U32 number,
        -:  581:            const U32 opCode, const U32 error) {
        8:  582:        Fw::LogStringArg fileStr(this->m_fileName);
        4:  583:        this->log_WARNING_HI_CS_CommandError(fileStr,number, opCode, error);
        4:  584:        this->error();
        4:  585:    }
        -:  586:
      180:  587:    void CmdSequencerComponentImpl::performCmd_Step(void) {
        -:  588:
        -:  589:        // deserialize next record. The buffer was previously validated,
        -:  590:        // so a failure here should be asserted
        -:  591:
      180:  592:        Fw::SerializeStatus stat = this->m_cmdRecord.deserialize(this->m_seqBuffer);
      180:  593:        FW_ASSERT(Fw::FW_SERIALIZE_OK == stat,stat);
        -:  594:        // set clock time base and context from value set when sequence was loaded
      180:  595:        this->m_cmdRecord.m_timeTag.setTimeBase(this->m_timeBase);
      180:  596:        this->m_cmdRecord.m_timeTag.setTimeContext(this->m_timeContext);
        -:  597:
      360:  598:        Fw::Time currentTime = this->getTime();
      180:  599:        switch (this->m_cmdRecord.m_descriptor) {
        -:  600:            case END_OF_SEQUENCE:
       20:  601:                this->m_runMode = STOPPED;
       20:  602:                this->sequenceComplete();
       20:  603:                break;
        -:  604:            case RELATIVE:
      156:  605:                this->performCmd_Step_RELATIVE(currentTime);
      156:  606:                break;
        -:  607:            case ABSOLUTE:
        4:  608:                this->performCmd_Step_ABSOLUTE(currentTime);
        4:  609:                break;
        -:  610:            default:
    #####:  611:                FW_ASSERT(0, m_cmdRecord.m_descriptor);
        -:  612:        }
      180:  613:    }
        -:  614:
       32:  615:    void CmdSequencerComponentImpl::sequenceComplete(void) {
       32:  616:        ++this->m_sequencesCompletedCount;
        -:  617:        // reset buffer
       32:  618:        this->m_seqBuffer.resetSer();
       64:  619:        Fw::LogStringArg fileStr(this->m_fileName);
       32:  620:        this->log_ACTIVITY_HI_CS_SequenceComplete(fileStr);
       32:  621:        this->tlmWrite_CS_SequencesCompleted(this->m_sequencesCompletedCount);
       32:  622:        this->m_executedCount = 0;
        -:  623:        // write sequence done port, if connected
       32:  624:        if (this->isConnected_seqDone_OutputPort(0)) {
       32:  625:            this->seqDone_out(0,0,0,Fw::COMMAND_OK);
        -:  626:        }
       32:  627:    }
        -:  628:
      144:  629:    void CmdSequencerComponentImpl::commandComplete(const U32 opcode) {
      288:  630:        Fw::LogStringArg fileStr(this->m_fileName);
      144:  631:        this->log_ACTIVITY_LO_CS_CommandComplete(fileStr,this->m_executedCount, opcode);
      144:  632:        ++this->m_executedCount;
      144:  633:        ++this->m_totalExecutedCount;
      144:  634:        this->tlmWrite_CS_CommandsExecuted(this->m_totalExecutedCount);
      144:  635:    }
        -:  636:
      156:  637:    void CmdSequencerComponentImpl::performCmd_Step_RELATIVE(
        -:  638:            Fw::Time& currentTime) {
        -:  639:
      156:  640:        this->m_cmdRecord.m_timeTag.add(currentTime.getSeconds(),currentTime.getUSeconds());
      156:  641:        this->performCmd_Step_ABSOLUTE(currentTime);
      156:  642:    }
        -:  643:
      160:  644:    void CmdSequencerComponentImpl::performCmd_Step_ABSOLUTE(
        -:  645:            Fw::Time& currentTime) {
        -:  646:
      160:  647:        if (currentTime >= this->m_cmdRecord.m_timeTag) {
      140:  648:            this->comCmdOut_out(0, m_cmdRecord.m_command, 0);
      140:  649:            this->setCmdTimeout(currentTime);
        -:  650:        } else {
       20:  651:            this->m_cmdTimer.set(this->m_cmdRecord.m_timeTag);
        -:  652:        }
      160:  653:    }
        -:  654:
       80:  655:    void CmdSequencerComponentImpl::preamble(void){
        -:  656:        // make sure a buffer has been allocated
       80:  657:        FW_ASSERT(this->m_seqBuffer.getBuffAddr());
       80:  658:        FW_ASSERT(this->m_seqBuffer.getBuffCapacity());
       80:  659:    }
        -:  660:
    #####:  661:    Fw::SerializeStatus CmdSequencerComponentImpl::CmdRecord::serialize(Fw::SerializeBufferBase& buffer) const {
        -:  662:
        -:  663:        // shouldn't ever be serialized
    #####:  664:        FW_ASSERT(0);
    #####:  665:        return Fw::FW_DESERIALIZE_TYPE_MISMATCH;
        -:  666:    }
        -:  667:
      672:  668:    Fw::SerializeStatus CmdSequencerComponentImpl::CmdRecord::deserialize(Fw::SerializeBufferBase& buffer) {
        -:  669:
        -:  670:        U8 descEntry;
        -:  671:
        -:  672:        // read the descriptor
      672:  673:        Fw::SerializeStatus stat = buffer.deserialize(descEntry);
      672:  674:        if (stat != Fw::FW_SERIALIZE_OK) {
    #####:  675:            return stat;
        -:  676:        }
        -:  677:        // check the descriptor value
      672:  678:        switch (descEntry) {
        -:  679:            case ABSOLUTE...END_OF_SEQUENCE: // okay
      664:  680:                break;
        -:  681:            default:
        8:  682:                return Fw::FW_DESERIALIZE_FORMAT_ERROR;
        -:  683:        }
        -:  684:        // cast it
      664:  685:        this->m_descriptor = static_cast<CmdRecordDescriptor>(descEntry);
        -:  686:        // if the descriptor is END_OF_SEQUENCE, quit
      664:  687:        if (END_OF_SEQUENCE == this->m_descriptor) {
       88:  688:            return Fw::FW_SERIALIZE_OK;
        -:  689:        }
        -:  690:        // next is time field
        -:  691:
        -:  692:        U32 seconds;
      576:  693:        stat = buffer.deserialize(seconds);
      576:  694:        if (stat != Fw::FW_SERIALIZE_OK) {
    #####:  695:            return stat;
        -:  696:        }
        -:  697:
        -:  698:        U32 useconds;
        -:  699:
      576:  700:        stat = buffer.deserialize(useconds);
      576:  701:        if (stat != Fw::FW_SERIALIZE_OK) {
        8:  702:            return stat;
        -:  703:        }
        -:  704:
        -:  705:        // set time value for record
      568:  706:        this->m_timeTag.set(seconds,useconds);
        -:  707:
        -:  708:        // read the command buffer record size
        -:  709:        U32 recordSize;
      568:  710:        stat = buffer.deserialize(recordSize);
      568:  711:        if (stat != Fw::FW_SERIALIZE_OK) {
        8:  712:            return stat;
        -:  713:        }
        -:  714:        // validate the record size. It shouldn't be longer than the remaining buffer
        -:  715:        // or longer than destination ComBuffer
        -:  716:
      560:  717:        if (
     1112:  718:                (recordSize > buffer.getBuffLeft()) ||
      552:  719:                (recordSize > Fw::ComBuffer::SERIALIZED_SIZE - sizeof(FwPacketDescriptorType))
        -:  720:
        -:  721:            ) {
        -:  722:
        8:  723:            return Fw::FW_DESERIALIZE_SIZE_MISMATCH;
        -:  724:        }
        -:  725:
        -:  726:        // next is command buffer
      552:  727:        this->m_command.resetSer();
        -:  728:
      552:  729:        stat = buffer.deserialize(this->m_command.getBuffAddr(),recordSize,true);
      552:  730:        if (stat != Fw::FW_SERIALIZE_OK) {
    #####:  731:            return stat;
        -:  732:        }
        -:  733:        // set length of command buffer
      552:  734:        FW_ASSERT(Fw::FW_SERIALIZE_OK == this->m_command.setBuffLen(recordSize));
        -:  735:
      552:  736:        return Fw::FW_SERIALIZE_OK;
        -:  737:    }
        -:  738:
        4:  739:    void CmdSequencerComponentImpl::pingIn_handler(
        -:  740:            NATIVE_INT_TYPE portNum, /*!< The port number*/
        -:  741:            U32 key /*!< Value to return to pinger*/
        -:  742:        ) {
        -:  743:        // send ping response
        4:  744:        this->pingOut_out(0,key);
        4:  745:    }
        -:  746:
        -:  747:    //! initialize CRC
      240:  748:    void CmdSequencerComponentImpl::initCrc(U32 &crc) {
      240:  749:        crc = 0xFFFFFFFF;
      240:  750:    }
        -:  751:
        -:  752:    //! update CRC
      376:  753:    void CmdSequencerComponentImpl::updateCRC(U32 &crc, const BYTE* buffer, NATIVE_UINT_TYPE bufferSize) {
      376:  754:        FW_ASSERT(buffer);
    19904:  755:        for(NATIVE_UINT_TYPE index = 0; index < bufferSize; index++) {
    19528:  756:            crc = update_crc_32(crc, buffer[index]);
        -:  757:        }
      376:  758:    }
        -:  759:
        -:  760:    //! finalize CRC
      220:  761:    void CmdSequencerComponentImpl::finalizeCRC(U32 &crc) {
      220:  762:        crc = ~crc;
      220:  763:    }
        -:  764:
      160:  765:    void CmdSequencerComponentImpl::setCmdTimeout(const Fw::Time &currentTime) {
        -:  766:        // start timeout timer if enabled and not in step mode
      160:  767:        if ((this->m_timeout > 0) and (AUTO == this->m_stepMode)) {
      144:  768:            Fw::Time expTime = currentTime;
       72:  769:            expTime.add(this->m_timeout,0);
       72:  770:            this->m_cmdTimeoutTimer.set(expTime);
        -:  771:        }
      160:  772:    }
        -:  773:
        -:  774:
       12:  775:}
        -:  776:
