        -:    0:Source:/home/tim/source/isf/Svc/Health/HealthComponentImpl.cpp
        -:    0:Programs:2
        -:    1:// ====================================================================== 
        -:    2:// \title  Health.hpp
        -:    3:// \author Tim
        -:    4:// \brief  hpp file for Health component implementation class
        -:    5://
        -:    6:// \copyright
        -:    7:// Copyright 2009-2015, by the California Institute of Technology.
        -:    8:// ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9:// acknowledged.
        -:   11:// 
        -:   18:// ====================================================================== 
        -:   19:
        -:   20:#include <Svc/Health/HealthComponentImpl.hpp>
        -:   21:#include "Fw/Types/BasicTypes.hpp"
        -:   22:#include <iostream>
        -:   23:#include <stdio.h>
        -:   24:#include <Fw/Types/Assert.hpp>
        -:   25:
        -:   26:namespace Svc {
        -:   27:
        -:   28:    // ----------------------------------------------------------------------
        -:   29:    // Construction, initialization, and destruction
        -:   30:    // ----------------------------------------------------------------------
        -:   31:
       10:   32:    HealthImpl::HealthImpl(
        -:   33:#if FW_OBJECT_NAMES == 1
        -:   34:            const char * const compName
        -:   35:#endif
        -:   36:            ) :
        -:   37:#if FW_OBJECT_NAMES == 1
        -:   38:                    HealthComponentBase(compName),
        -:   39:#endif
        -:   40:                    m_numPingEntries(0),
        -:   41:                    m_key(0),
        -:   42:                    m_watchDogCode(0),
        -:   43:                    m_warnings(0),
        -:   44:                    m_enabled(HLTH_CHK_ENABLED),
       10:   45:                    queue_depth(0) {
        -:   46:        // clear tracker by disabling pings
      110:   47:        for (NATIVE_UINT_TYPE entry = 0;
      110:   48:                entry < FW_NUM_ARRAY_ELEMENTS(this->m_pingTrackerEntries);
        -:   49:                entry++) {
      100:   50:            this->m_pingTrackerEntries[entry].enabled = HLTH_PING_DISABLED;
        -:   51:        }
       10:   52:    }
        -:   53:
       10:   54:    void HealthImpl::init(const NATIVE_INT_TYPE queueDepth, const NATIVE_INT_TYPE instance) {
       10:   55:        HealthComponentBase::init(queueDepth, instance);
       10:   56:        this->queue_depth = queueDepth;
        -:   57:
       10:   58:    }
        -:   59:
       10:   60:    void HealthImpl::setPingEntries(PingEntry* pingEntries, NATIVE_INT_TYPE numPingEntries, U32 watchDogCode) {
        -:   61:
       10:   62:        FW_ASSERT(pingEntries);
        -:   63:        // make sure not asking for more pings than ports
       10:   64:        FW_ASSERT(numPingEntries <= NUM_PINGSEND_OUTPUT_PORTS);
        -:   65:
       10:   66:        this->m_numPingEntries = numPingEntries;
       10:   67:        this->m_watchDogCode = watchDogCode;
        -:   68:
        -:   69:        // copy entries to private data
      110:   70:        for (NATIVE_INT_TYPE entry = 0; entry < numPingEntries; entry++) {
      100:   71:            FW_ASSERT(pingEntries[entry].warnCycles <= pingEntries[entry].fatalCycles, pingEntries[entry].warnCycles, pingEntries[entry].fatalCycles);
      100:   72:            this->m_pingTrackerEntries[entry].entry = pingEntries[entry];
      100:   73:            this->m_pingTrackerEntries[entry].cycleCount = 0;
      100:   74:            this->m_pingTrackerEntries[entry].enabled = HLTH_PING_ENABLED;
      100:   75:            this->m_pingTrackerEntries[entry].key = 0;
        -:   76:        }
       10:   77:    }
        -:   78:
       10:   79:    HealthImpl::~HealthImpl(void) {
        -:   80:
       10:   81:    }
        -:   82:
        -:   83:    // ----------------------------------------------------------------------
        -:   84:    // Handler implementations for user-defined typed input ports
        -:   85:    // ----------------------------------------------------------------------
        -:   86:
      281:   87:    void HealthImpl::PingReturn_handler(const NATIVE_INT_TYPE portNum, U32 key) {
        -:   88:        // verify the key value
      281:   89:        if (key != this->m_pingTrackerEntries[portNum].key) {
       20:   90:            Fw::LogStringArg _arg = this->m_pingTrackerEntries[portNum].entry.entryName;
       10:   91:            this->log_FATAL_HLTH_PING_WRONG_KEY(_arg,key);
        -:   92:        } else {
        -:   93:            // reset the counter and clear the key
      271:   94:            this->m_pingTrackerEntries[portNum].cycleCount = 0;
      271:   95:            this->m_pingTrackerEntries[portNum].key = 0;
        -:   96:        }
        -:   97:
      281:   98:    }
        -:   99:
      302:  100:    void HealthImpl::Run_handler(const NATIVE_INT_TYPE portNum, NATIVE_UINT_TYPE context) {
        -:  101:        //dispatch messages
      563:  102:        for (NATIVE_UINT_TYPE i = 0; i < this->queue_depth; i++) {
      563:  103:            MsgDispatchStatus stat = this->doDispatch();
      563:  104:            if (MSG_DISPATCH_EMPTY == stat) {
      302:  105:                break;
        -:  106:            }
      261:  107:            FW_ASSERT(MSG_DISPATCH_OK == stat);
        -:  108:        }
        -:  109:
      302:  110:        if (this->m_enabled) {
        -:  111:            // cycle through ping table, pinging ports that are not awaiting a reply
        -:  112:            // for ports that are awaiting a reply, decrement their counters
        -:  113:            // and check for violations
        -:  114:
     2222:  115:            for (NATIVE_UINT_TYPE entry = 0; entry < this->m_numPingEntries; entry++) {
     2020:  116:                if (HLTH_PING_ENABLED == this->m_pingTrackerEntries[entry].enabled) {
        -:  117:                    // If clear entry
     1920:  118:                    if (0 == this->m_pingTrackerEntries[entry].cycleCount) {
        -:  119:                        // start a ping
      421:  120:                        this->m_pingTrackerEntries[entry].key = this->m_key;
        -:  121:                        // send ping
      421:  122:                        this->PingSend_out(entry, this->m_pingTrackerEntries[entry].key);
        -:  123:                        // increment key
      421:  124:                        this->m_key++;
        -:  125:                        // increment cycles for the entry
      421:  126:                        this->m_pingTrackerEntries[entry].cycleCount++;
        -:  127:                    } else {
        -:  128:                        // check to see if it is at warning threshold and decrement cycle count
     2998:  129:                        if (this->m_pingTrackerEntries[entry].cycleCount++ ==
     1499:  130:                                this->m_pingTrackerEntries[entry].entry.warnCycles) {
       42:  131:                            Fw::LogStringArg _arg = this->m_pingTrackerEntries[entry].entry.entryName;
       21:  132:                            this->log_WARNING_HI_HLTH_PING_WARN(_arg);
       21:  133:                            this->tlmWrite_PingLateWarnings(++this->m_warnings);
        -:  134:                        } else {
        -:  135:                            // check for FATAL timeout value
     2956:  136:                            if (this->m_pingTrackerEntries[entry].entry.fatalCycles ==
     1478:  137:                                    this->m_pingTrackerEntries[entry].cycleCount) {
       40:  138:                                Fw::LogStringArg _arg = this->m_pingTrackerEntries[entry].entry.entryName;
       20:  139:                                this->log_FATAL_HLTH_PING_LATE(_arg);
        -:  140:                            }
        -:  141:                        } // if at warning or fatal threshold
        -:  142:                    } // if clear entry
        -:  143:                } // if entry has ping enabled
        -:  144:            } // for each entry
        -:  145:
        -:  146:            // do other specialized platform checks (e.g. VxWorks suspended tasks)
      202:  147:            this->doOtherChecks();
        -:  148:
        -:  149:        } // If health checking is enabled
        -:  150:
        -:  151:        // stroke watchdog.
      302:  152:        if (this->isConnected_WdogStroke_OutputPort(0)) {
      302:  153:            this->WdogStroke_out(0,this->m_watchDogCode);
        -:  154:        }
      302:  155:    }
        -:  156:
        -:  157:    // ----------------------------------------------------------------------
        -:  158:    // Command handler implementations
        -:  159:    // ----------------------------------------------------------------------
        -:  160:
        5:  161:    void HealthImpl::HLTH_ENABLE_cmdHandler(const FwOpcodeType opCode, U32 cmdSeq, HealthEnabled enable) {
        5:  162:        this->m_enabled = enable;
        5:  163:        HealthIsEnabled isEnabled = HEALTH_CHECK_DISABLED;
        5:  164:        if (enable) {
        2:  165:            isEnabled = HEALTH_CHECK_ENABLED;
        -:  166:        }
        5:  167:        this->log_ACTIVITY_HI_HLTH_CHECK_ENABLE(isEnabled);
        5:  168:        this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        5:  169:    }
        -:  170:
        -:  171:
       23:  172:    void HealthImpl::HLTH_PING_ENABLE_cmdHandler(const FwOpcodeType opCode, U32 cmdSeq, const Fw::CmdStringArg& entry, PingEnabled enable) {
        -:  173:        // check to see if entry is in range
       23:  174:        NATIVE_INT_TYPE entryIndex = this->findEntry(entry);
        -:  175:
       23:  176:        if (-1 == entryIndex) {
        1:  177:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_VALIDATION_ERROR);
        3:  178:            return;
        -:  179:        }
        -:  180:
        -:  181:        // check enable value
       22:  182:        if (enable != HealthImpl::HLTH_PING_DISABLED && enable != HealthImpl::HLTH_PING_ENABLED) {
        1:  183:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_VALIDATION_ERROR);
        1:  184:            return;
        -:  185:        }
        -:  186:
       21:  187:        this->m_pingTrackerEntries[entryIndex].enabled = enable;
       21:  188:        HealthPingIsEnabled isEnabled = HEALTH_PING_DISABLED;
       21:  189:        if (enable) {
       10:  190:            isEnabled = HEALTH_PING_ENABLED;
        -:  191:        }
       42:  192:        Fw::LogStringArg arg;
       21:  193:        arg = entry;
       21:  194:        this->log_ACTIVITY_HI_HLTH_CHECK_PING(isEnabled,arg);
       21:  195:        this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        -:  196:    }
        -:  197:
       13:  198:    void HealthImpl::HLTH_CHNG_PING_cmdHandler(const FwOpcodeType opCode, U32 cmdSeq, const Fw::CmdStringArg& entry, U32 warningValue, U32 fatalValue) {
        -:  199:        // check to see if entry is in range
       13:  200:        NATIVE_INT_TYPE entryIndex = this->findEntry(entry);
       13:  201:        if (-1 == entryIndex) {
        1:  202:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_VALIDATION_ERROR);
        3:  203:            return;
        -:  204:        }
        -:  205:
        -:  206:        //check to see if warningValue less than or equal to fatalValue
       12:  207:        if (warningValue > fatalValue) {
        2:  208:            Fw::LogStringArg arg;
        1:  209:            arg = entry;
        1:  210:            this->log_WARNING_HI_HLTH_PING_INVALID_VALUES(arg,warningValue,fatalValue);
        1:  211:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_VALIDATION_ERROR);
        1:  212:            return;
        -:  213:        }
        -:  214:
       11:  215:        this->m_pingTrackerEntries[entryIndex].entry.warnCycles = warningValue;
       11:  216:        this->m_pingTrackerEntries[entryIndex].entry.fatalCycles = fatalValue;
       22:  217:        Fw::LogStringArg arg = entry;
       11:  218:        this->log_ACTIVITY_HI_HLTH_PING_UPDATED(arg,warningValue,fatalValue);
       11:  219:        this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_OK);
        -:  220:    }
        -:  221:
       36:  222:    NATIVE_INT_TYPE HealthImpl::findEntry(Fw::CmdStringArg entry) {
        -:  223:
        -:  224:        // walk through entries
      191:  225:        for (NATIVE_UINT_TYPE tableEntry = 0; tableEntry < NUM_PINGSEND_OUTPUT_PORTS; tableEntry++) {
      189:  226:            if (entry == this->m_pingTrackerEntries[tableEntry].entry.entryName) {
       34:  227:                return tableEntry;
        -:  228:            }
        -:  229:        }
        4:  230:        Fw::LogStringArg arg = entry;
        2:  231:        this->log_WARNING_LO_HLTH_CHECK_LOOKUP_ERROR(arg);
        -:  232:
        2:  233:        return -1;
        -:  234:    }
        -:  235:
        -:  236:
        -:  237:
        3:  238:} // end namespace Svc
