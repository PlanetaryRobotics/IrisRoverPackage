        -:    0:Source:/home/tim/source/isf/Svc/Health/HealthComponentImpl.hpp
        -:    0:Programs:2
        -:    1:// ====================================================================== 
        -:    2:// \title  Health.hpp
        -:    3:// \author Tim, J.Perez
        -:    4:// \brief  hpp file for Health component implementation class
        -:    5://
        -:    6:// \copyright
        -:    7:// Copyright 2009-2015, by the California Institute of Technology.
        -:    8:// ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9:// acknowledged.
        -:   11:// 
        -:   18:// ====================================================================== 
        -:   19:
        -:   20:#ifndef Health_HPP
        -:   21:#define Health_HPP
        -:   22:
        -:   23:#include <Svc/Health/HealthComponentAc.hpp>
        -:   24:#include <Fw/Types/EightyCharString.hpp>
        -:   25:
        -:   26:namespace Svc {
        -:   27:
        -:   28:    //!  \class HealthImpl
        -:   29:    //!  \brief Health component implementation class
        -:   30:    //!
        -:   31:    //!  The health component iterates through each entry
        -:   32:    //!  in its table and checks its status. If an ping entry
        -:   33:    //!  tracker is enabled, it will ping its corresponding port
        -:   34:    //!  with a provided key. If a ping return is outstanding,
        -:   35:    //!  a counter is decremented, and its value is checked
        -:   36:    //!  against warning and fault thresholds. A watchdog is
        -:   37:    //!  always stroked in the run handler.
        -:   38:
        -:   39:    class HealthImpl: public HealthComponentBase {
        -:   40:
        -:   41:        public:
        -:   42:            //!  \brief struct for ping entry
        -:   43:            //!
        -:   44:            //!  struct for ping entry thresholds.
        -:   45:            //!  Countdown is via calls to the run()
        -:   46:            //!  port. If no response by warnCycles,
        -:   47:            //!  an EVR will be generated and telemetry
        -:   48:            //!  count will be updated. If no response
        -:   49:            //!  by fatalCycles, component will send FATAL
        -:   50:            //!  event. A descriptive name is stored in entryName
        -:   51:            //!  for events.
      100:   52:            struct PingEntry {
        -:   53:                NATIVE_UINT_TYPE warnCycles; //!< number of cycles before WARNING
        -:   54:                NATIVE_UINT_TYPE fatalCycles; //!< number of cycles before FATAL
        -:   55:                Fw::EightyCharString entryName; //!< the name of the entry
        -:   56:            };
        -:   57:
        -:   58:            //!  \brief HealthImpl constructor
        -:   59:            //!
        -:   60:            //!  The constructor for Health
        -:   61:            //!
        -:   62:            //!  \param compName component name
        -:   63:            HealthImpl(
        -:   64:#if FW_OBJECT_NAMES == 1
        -:   65:                    const char * const compName //!< The component name
        -:   66:#endif
        -:   67:                    );
        -:   68:
        -:   69:            //!  \brief HealthImpl initialization function
        -:   70:            //!
        -:   71:            //!  Initializes the autocoded base class, ping table, and data members
        -:   72:            //!
        -:   73:            //!  \param queueDepth Depth of queue
        -:   74:            //!  \param instance The instance number
        -:   75:            void init(const NATIVE_INT_TYPE queueDepth, const NATIVE_INT_TYPE instance);
        -:   76:
        -:   77:            //! \brief Set ping entry tables
        -:   78:            //!
        -:   79:            //! Provides a table of ping entries
        -:   80:            //!
        -:   81:            //!  \param pingEntries Pointer to provided ping table entries
        -:   82:            //!  \param numPingEntries Number of ping entries in table
        -:   83:            //!  \param watchDogCode Value that is sent to watchdog
        -:   84:            void setPingEntries(PingEntry* pingEntries, NATIVE_INT_TYPE numPingEntries, U32 watchDogCode);
        -:   85:
        -:   86:            //!  \brief Component destructor
        -:   87:            //!
        -:   88:            //!  The destructor for HealthImpl is empty
        -:   89:            ~HealthImpl(void);
        -:   90:
        -:   91:        PROTECTED:
        -:   92:
        -:   93:            //!  \brief additional checks function
        -:   94:            //!
        -:   95:            //!  Does additional checks based on the platform
        -:   96:            virtual void doOtherChecks(void);
        -:   97:
        -:   98:        PRIVATE:
        -:   99:
        -:  100:            //!  \brief ping return handler
        -:  101:            //!
        -:  102:            //!  Handler implementation for pingReturn
        -:  103:            //!
        -:  104:            //!  \param portNum Port number
        -:  105:            //!  \param key Key value
        -:  106:            void PingReturn_handler(const NATIVE_INT_TYPE portNum, U32 key);
        -:  107:
        -:  108:            //!  \brief run handler
        -:  109:            //!
        -:  110:            //!  Handler implementation for run
        -:  111:            //!
        -:  112:            //!  \param portNum Port number
        -:  113:            //!  \param context Port Context
        -:  114:            void Run_handler(const NATIVE_INT_TYPE portNum, NATIVE_UINT_TYPE context);
        -:  115:
        -:  116:            //!  \brief HLTH_ENABLE handler
        -:  117:            //!
        -:  118:            //!  Implementation for HLTH_ENABLE command handler
        -:  119:            //!
        -:  120:            //!  \param opCode Command opcode
        -:  121:            //!  \param cmdSeq Command sequence
        -:  122:            //!  \param enable Enum for enabling/disabling tracker
        -:  123:            void HLTH_ENABLE_cmdHandler(const FwOpcodeType opCode, U32 cmdSeq, HealthEnabled enable);
        -:  124:
        -:  125:            //!  \brief HLTH_PING_ENABLE handler
        -:  126:            //!
        -:  127:            //!  Handler for command HLTH_PING_ENABLE
        -:  128:            //!
        -:  129:            //!  \param opCode Command opcode
        -:  130:            //!  \param cmdSeq Command sequence
        -:  131:            //!  \param entry Ping entry number
        -:  132:            //!  \param enable Enum for enabling/disabling tracker
        -:  133:            void HLTH_PING_ENABLE_cmdHandler(FwOpcodeType opCode, U32 cmdSeq, const Fw::CmdStringArg& entry, PingEnabled enable);
        -:  134:
        -:  135:            //!  \brief HLTH_CHNG_PING handler
        -:  136:            //!
        -:  137:            //!  Implementation for HLTH_CHNG_PING command handler
        -:  138:            //!
        -:  139:            //!  \param opCode Command opcode
        -:  140:            //!  \param cmdSeq Command sequence
        -:  141:            //!  \param entry Ping entry number
        -:  142:            //!  \param warningValue Warning threshold value
        -:  143:            //!  \param fatalValue Fatal threshold value
        -:  144:            void HLTH_CHNG_PING_cmdHandler(const FwOpcodeType opCode, U32 cmdSeq, const Fw::CmdStringArg& entry, U32 warningValue, U32 fatalValue);
        -:  145:
        -:  146:            //!  \brief ping tracker struct
        -:  147:            //!
        -:  148:            //!  Array for storing ping table entries
      200:  149:            struct PingTracker {
        -:  150:                    PingEntry entry; //!< entry passed by user
        -:  151:                    U32 cycleCount; //!< current cycle count
        -:  152:                    U32 key; //!< key passed to ping
        -:  153:                    PingEnabled enabled; //!< if current ping result is checked
        -:  154:            } m_pingTrackerEntries[NUM_PINGSEND_OUTPUT_PORTS];
        -:  155:
        -:  156:            NATIVE_INT_TYPE findEntry(Fw::CmdStringArg entry);
        -:  157:
        -:  158:            //!  Private member data
        -:  159:            U32 m_numPingEntries; //!< stores number of entries passed to constructor
        -:  160:            U32 m_key; //!< current key value. Just increments for each ping entry.
        -:  161:            U32 m_watchDogCode; //!< stores code used for watchdog stroking
        -:  162:            U32 m_warnings; //!< number of slip warnings issued
        -:  163:            HealthEnabled m_enabled; //!< if the pinger is enabled
        -:  164:            U32 queue_depth; //!< queue depth passed by user
        -:  165:
        -:  166:    };
        -:  167:
        -:  168:} // end namespace Svc
        -:  169:
        -:  170:#endif
