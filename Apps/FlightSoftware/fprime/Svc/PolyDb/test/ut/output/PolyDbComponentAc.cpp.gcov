        -:    0:Source:/home/tcanham/source/isf/Svc/PolyDb/PolyDbComponentAc.cpp
        -:    0:Programs:6
        -:    1:#include <stdio.h>
        -:    2:#include <Fw/Cfg/Config.hpp>
        -:    3:#include <Svc/PolyDb/PolyDbComponentAc.hpp>
        -:    4:#include <Fw/Types/Assert.hpp>
        -:    5:
        -:    6:#if FW_ENABLE_TEXT_LOGGING
        -:    7:#include <Fw/Types/EightyCharString.hpp>
        -:    8:#endif
        -:    9:// Namespace code
        -:   10:namespace Svc {
        -:   11:
        -:   12:// public methods
        -:   13:
        3:   14:    Svc::InputPolyPort *PolyDbComponentBase::get_getValue_InputPort(NATIVE_INT_TYPE portNum) {
        3:   15:        FW_ASSERT(portNum < this->getNum_getValue_InputPorts());
        3:   16:        return &this->m_getValue_InputPort[portNum];
        -:   17:    }
        -:   18:
        3:   19:    Svc::InputPolyPort *PolyDbComponentBase::get_setValue_InputPort(NATIVE_INT_TYPE portNum) {
        3:   20:        FW_ASSERT(portNum < this->getNum_setValue_InputPorts());
        3:   21:        return &this->m_setValue_InputPort[portNum];
        -:   22:    }
        -:   23:#if FW_PORT_SERIALIZATION
        -:   24:#endif
        -:   25:
        -:   26:   
        -:   27:
        -:   28:// protected methods
        -:   29:#if FW_OBJECT_NAMES == 1
        3:   30:    PolyDbComponentBase::PolyDbComponentBase(const char* compName) : Fw::PassiveComponentBase(compName) {
        -:   31:#else
        -:   32:    PolyDbComponentBase::PolyDbComponentBase() : Fw::PassiveComponentBase() {
        -:   33:#endif
        3:   34:}
        -:   35:
        -:   36:
        3:   37:    void PolyDbComponentBase::init(NATIVE_INT_TYPE instance) {
        -:   38:
        -:   39:
        -:   40:	    // initialize base class
        3:   41:		Fw::PassiveComponentBase::init(instance);
        -:   42:        // Input ports attached to component here with external component interfaces
        6:   43:        for (NATIVE_INT_TYPE port = 0; port < this->getNum_getValue_InputPorts(); port++) {
        3:   44:            this->m_getValue_InputPort[port].init();
        -:   45:           
        3:   46:            this->m_getValue_InputPort[port].addCallComp(this, m_p_getValue_in);
        -:   47:           
        3:   48:            this->m_getValue_InputPort[port].setPortNum(port);
        -:   49:#if FW_OBJECT_NAMES == 1     
        -:   50:            char portName[80];
        3:   51:            (void)snprintf(portName, sizeof(portName), "%s_getValue_InputPort[%d]", this->m_objName, port);
        3:   52:            this->m_getValue_InputPort[port].setObjName(portName);
        -:   53:#endif
        -:   54:        }
        6:   55:        for (NATIVE_INT_TYPE port = 0; port < this->getNum_setValue_InputPorts(); port++) {
        3:   56:            this->m_setValue_InputPort[port].init();
        -:   57:           
        3:   58:            this->m_setValue_InputPort[port].addCallComp(this, m_p_setValue_in);
        -:   59:           
        3:   60:            this->m_setValue_InputPort[port].setPortNum(port);
        -:   61:#if FW_OBJECT_NAMES == 1     
        -:   62:            char portName[80];
        3:   63:            (void)snprintf(portName, sizeof(portName), "%s_setValue_InputPort[%d]", this->m_objName, port);
        3:   64:            this->m_setValue_InputPort[port].setObjName(portName);
        -:   65:#endif
        -:   66:        }
        -:   67:
        -:   68:        // Set output ports
        -:   69:
        -:   70:
        3:   71:	}
        -:   72:
        3:   73:	PolyDbComponentBase::~PolyDbComponentBase() {
        3:   74:	}
        -:   75:
        -:   76:    // Up-calls, calls for output ports
      134:   77:    NATIVE_INT_TYPE PolyDbComponentBase::getNum_getValue_InputPorts(void) {
      134:   78:        return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(this->m_getValue_InputPort);
        -:   79:    }
      134:   80:    NATIVE_INT_TYPE PolyDbComponentBase::getNum_setValue_InputPorts(void) {
      134:   81:        return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(this->m_setValue_InputPort);
        -:   82:    }
        -:   83:
        -:   84:
        -:   85:    // lock mutex for guarded ports
      250:   86:    void PolyDbComponentBase::lock(void) {
      250:   87:        this->m_guardedPortMutex.lock();
      250:   88:    }
        -:   89:
        -:   90:    // unlock mutex for guarded ports
      250:   91:    void PolyDbComponentBase::unLock(void) {
      250:   92:        this->m_guardedPortMutex.unLock();
      250:   93:    }
        -:   94:// private methods
        -:   95:
        -:   96:    // call for incoming port getValue
      125:   97:    void PolyDbComponentBase::m_p_getValue_in(Fw::PassiveComponentBase* callComp, NATIVE_INT_TYPE portNum, U32 entry, MeasurementStatus &status, Fw::Time &time, Fw::PolyType &val) {
      125:   98:        FW_ASSERT(callComp);
      125:   99:        PolyDbComponentBase* compPtr = (PolyDbComponentBase*)callComp;
      125:  100:        compPtr->getValue_handlerBase(portNum, entry, status, time, val);
      125:  101:    }
        -:  102:
      125:  103:    void PolyDbComponentBase::getValue_handlerBase(NATIVE_INT_TYPE portNum, U32 entry, MeasurementStatus &status, Fw::Time &time, Fw::PolyType &val) {
        -:  104:
        -:  105:        // make sure port number is valid
      125:  106:        FW_ASSERT(portNum < this->getNum_getValue_InputPorts());
        -:  107:
        -:  108:		// Lock guard mutex before calling
      125:  109:		this->lock();
        -:  110:        // Down call to pure virtual handler method implemented in Impl class
      125:  111:        this->getValue_handler(portNum, entry, status, time, val);
        -:  112:
        -:  113:		// Unlock guard mutex
      125:  114:		this->unLock();
      125:  115:    }
        -:  116:
        -:  117:    // call for incoming port setValue
      125:  118:    void PolyDbComponentBase::m_p_setValue_in(Fw::PassiveComponentBase* callComp, NATIVE_INT_TYPE portNum, U32 entry, MeasurementStatus &status, Fw::Time &time, Fw::PolyType &val) {
      125:  119:        FW_ASSERT(callComp);
      125:  120:        PolyDbComponentBase* compPtr = (PolyDbComponentBase*)callComp;
      125:  121:        compPtr->setValue_handlerBase(portNum, entry, status, time, val);
      125:  122:    }
        -:  123:
      125:  124:    void PolyDbComponentBase::setValue_handlerBase(NATIVE_INT_TYPE portNum, U32 entry, MeasurementStatus &status, Fw::Time &time, Fw::PolyType &val) {
        -:  125:
        -:  126:        // make sure port number is valid
      125:  127:        FW_ASSERT(portNum < this->getNum_setValue_InputPorts());
        -:  128:
        -:  129:		// Lock guard mutex before calling
      125:  130:		this->lock();
        -:  131:        // Down call to pure virtual handler method implemented in Impl class
      125:  132:        this->setValue_handler(portNum, entry, status, time, val);
        -:  133:
        -:  134:		// Unlock guard mutex
      125:  135:		this->unLock();
      125:  136:    }
        -:  137:
        -:  138:}
        -:  139:
