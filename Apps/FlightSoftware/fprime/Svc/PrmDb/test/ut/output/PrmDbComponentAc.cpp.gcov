        -:    0:Source:/home/tcanham/source/isf/Svc/PrmDb/PrmDbComponentAc.cpp
        -:    0:Programs:13
        -:    1:// ====================================================================== 
        -:    2:// \title  PrmDbComponentAc.hpp
        -:    3:// \author Auto-generated
        -:    4:// \brief  cpp file for PrmDb component base class
        -:    5://
        -:    6:// \copyright
        -:    7:// Copyright 2009-2015, by the California Institute of Technology.
        -:    8:// ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9:// acknowledged.
        -:   11:// 
        -:   18:// ====================================================================== 
        -:   19:
        -:   20:#include <stdio.h>
        -:   21:#include <Fw/Cfg/Config.hpp>
        -:   22:#include <Svc/PrmDb/PrmDbComponentAc.hpp>
        -:   23:#include <Fw/Types/Assert.hpp>
        -:   24:#if FW_ENABLE_TEXT_LOGGING
        -:   25:#include <Fw/Types/EightyCharString.hpp>
        -:   26:#endif
        -:   27:
        -:   28:
        -:   29:namespace Svc {
        -:   30:
        -:   31:  // ----------------------------------------------------------------------
        -:   32:  // Anonymous namespace to prevent name collisions
        -:   33:  // ----------------------------------------------------------------------
        -:   34:
        -:   35:  namespace {
        -:   36:
        -:   37:    typedef enum {
        -:   38:      PRMDB_COMPONENT_EXIT = Fw::ActiveComponentBase::ACTIVE_COMPONENT_EXIT,
        -:   39:      SETPRM_PRMSET,
        -:   40:      CMD_PRM_SAVE_FILE
        -:   41:    } MsgTypeEnum;
        -:   42:
        -:   43:    // Get the max size by doing a union of the input port serialization sizes.
        -:   44:
        -:   45:    typedef union {
        -:   46:      BYTE port1[Fw::InputPrmSetPort::SERIALIZED_SIZE];
        -:   47:      BYTE cmdPort[Fw::InputCmdPort::SERIALIZED_SIZE];
        -:   48:    } BuffUnion;
        -:   49:
        -:   50:    // Define a message buffer class large enough to handle all the
        -:   51:    // asynchronous inputs to the component
        -:   52:
     2448:   53:    class ComponentIpcSerializableBuffer : 
        -:   54:      public Fw::SerializeBufferBase
        -:   55:    {
        -:   56:
        -:   57:      public:
        -:   58:
        -:   59:        enum {
        -:   60:          // Max. message size = size of data + message id + port
        -:   61:          SERIALIZATION_SIZE =
        -:   62:            sizeof(BuffUnion) +
        -:   63:            sizeof(NATIVE_INT_TYPE) +
        -:   64:            sizeof(NATIVE_INT_TYPE)
        -:   65:        };
        -:   66:
     4404:   67:        NATIVE_UINT_TYPE getBuffCapacity(void) const {
     4404:   68:          return sizeof(m_buff);
        -:   69:        }
        -:   70:
    26292:   71:        U8* getBuffAddr(void) {
    26292:   72:          return m_buff;
        -:   73:        }
        -:   74:
      612:   75:        const U8* getBuffAddr(void) const {
      612:   76:          return m_buff;
        -:   77:        }
        -:   78:
        -:   79:      private:
        -:   80:        // Should be the max of all the input ports serialized sizes...
        -:   81:        U8 m_buff[SERIALIZATION_SIZE];
        -:   82:
        -:   83:    };
        -:   84:
        -:   85:  }
        -:   86:
        -:   87:  // ----------------------------------------------------------------------
        -:   88:  // Getters for numbers of input ports
        -:   89:  // ----------------------------------------------------------------------
        -:   90:
       72:   91:  Fw::InputPrmGetPort *PrmDbComponentBase ::
        -:   92:    get_getPrm_InputPort(NATIVE_INT_TYPE portNum)
        -:   93:  {
       72:   94:    FW_ASSERT(portNum < this->getNum_getPrm_InputPorts());
       72:   95:    return &this->m_getPrm_InputPort[portNum];
        -:   96:  }
        -:   97:
       72:   98:  Fw::InputPrmSetPort *PrmDbComponentBase ::
        -:   99:    get_setPrm_InputPort(NATIVE_INT_TYPE portNum)
        -:  100:  {
       72:  101:    FW_ASSERT(portNum < this->getNum_setPrm_InputPorts());
       72:  102:    return &this->m_setPrm_InputPort[portNum];
        -:  103:  }
        -:  104:
       72:  105:  Fw::InputCmdPort *PrmDbComponentBase ::
        -:  106:    get_CmdDisp_InputPort(NATIVE_INT_TYPE portNum)
        -:  107:  {
       72:  108:    FW_ASSERT(portNum < this->getNum_CmdDisp_InputPorts());
       72:  109:    return &this->m_CmdDisp_InputPort[portNum];
        -:  110:  }
        -:  111:
        -:  112:  // ----------------------------------------------------------------------
        -:  113:  // Typed connectors for output ports
        -:  114:  // ----------------------------------------------------------------------
        -:  115:
       72:  116:  void PrmDbComponentBase ::
        -:  117:    set_CmdStatus_OutputPort(
        -:  118:        NATIVE_INT_TYPE portNum,
        -:  119:        Fw::InputCmdResponsePort* port
        -:  120:    )
        -:  121:  {
       72:  122:    FW_ASSERT(portNum < this->getNum_CmdStatus_OutputPorts());
       72:  123:    this->m_CmdStatus_OutputPort[portNum].addCallPort(port);
       72:  124:  }
        -:  125:
    #####:  126:  void PrmDbComponentBase ::
        -:  127:    set_CmdReg_OutputPort(
        -:  128:        NATIVE_INT_TYPE portNum,
        -:  129:        Fw::InputCmdRegPort* port
        -:  130:    )
        -:  131:  {
    #####:  132:    FW_ASSERT(portNum < this->getNum_CmdReg_OutputPorts());
    #####:  133:    this->m_CmdReg_OutputPort[portNum].addCallPort(port);
    #####:  134:  }
        -:  135:
       72:  136:  void PrmDbComponentBase ::
        -:  137:    set_Time_OutputPort(
        -:  138:        NATIVE_INT_TYPE portNum,
        -:  139:        Fw::InputTimePort* port
        -:  140:    )
        -:  141:  {
       72:  142:    FW_ASSERT(portNum < this->getNum_Time_OutputPorts());
       72:  143:    this->m_Time_OutputPort[portNum].addCallPort(port);
       72:  144:  }
        -:  145:
       72:  146:  void PrmDbComponentBase ::
        -:  147:    set_Log_OutputPort(
        -:  148:        NATIVE_INT_TYPE portNum,
        -:  149:        Fw::InputLogPort* port
        -:  150:    )
        -:  151:  {
       72:  152:    FW_ASSERT(portNum < this->getNum_Log_OutputPorts());
       72:  153:    this->m_Log_OutputPort[portNum].addCallPort(port);
       72:  154:  }
        -:  155:
        -:  156:#if FW_ENABLE_TEXT_LOGGING == 1
       72:  157:  void PrmDbComponentBase ::
        -:  158:    set_LogText_OutputPort(
        -:  159:        NATIVE_INT_TYPE portNum,
        -:  160:        Fw::InputLogTextPort* port
        -:  161:    )
        -:  162:  {
       72:  163:    FW_ASSERT(portNum < this->getNum_LogText_OutputPorts());
       72:  164:    this->m_LogText_OutputPort[portNum].addCallPort(port);
       72:  165:  }
        -:  166:#endif
        -:  167:
        -:  168:  // ----------------------------------------------------------------------
        -:  169:  // Serialization connectors for output ports
        -:  170:  // ----------------------------------------------------------------------
        -:  171:
        -:  172:#if FW_PORT_SERIALIZATION
        -:  173:
    #####:  174:  void PrmDbComponentBase ::
        -:  175:    set_CmdStatus_OutputPort(
        -:  176:        NATIVE_INT_TYPE portNum,
        -:  177:        Fw::InputSerializePort *port
        -:  178:    )
        -:  179:  {
    #####:  180:    FW_ASSERT(portNum < this->getNum_CmdStatus_OutputPorts());
    #####:  181:    return this->m_CmdStatus_OutputPort[portNum].registerSerialPort(port);
        -:  182:  }
        -:  183:
    #####:  184:  void PrmDbComponentBase ::
        -:  185:    set_CmdReg_OutputPort(
        -:  186:        NATIVE_INT_TYPE portNum,
        -:  187:        Fw::InputSerializePort *port
        -:  188:    )
        -:  189:  {
    #####:  190:    FW_ASSERT(portNum < this->getNum_CmdReg_OutputPorts());
    #####:  191:    return this->m_CmdReg_OutputPort[portNum].registerSerialPort(port);
        -:  192:  }
        -:  193:
    #####:  194:  void PrmDbComponentBase ::
        -:  195:    set_Time_OutputPort(
        -:  196:        NATIVE_INT_TYPE portNum,
        -:  197:        Fw::InputSerializePort *port
        -:  198:    )
        -:  199:  {
    #####:  200:    FW_ASSERT(portNum < this->getNum_Time_OutputPorts());
    #####:  201:    return this->m_Time_OutputPort[portNum].registerSerialPort(port);
        -:  202:  }
        -:  203:
    #####:  204:  void PrmDbComponentBase ::
        -:  205:    set_Log_OutputPort(
        -:  206:        NATIVE_INT_TYPE portNum,
        -:  207:        Fw::InputSerializePort *port
        -:  208:    )
        -:  209:  {
    #####:  210:    FW_ASSERT(portNum < this->getNum_Log_OutputPorts());
    #####:  211:    return this->m_Log_OutputPort[portNum].registerSerialPort(port);
        -:  212:  }
        -:  213:
        -:  214:#if FW_ENABLE_TEXT_LOGGING == 1
    #####:  215:  void PrmDbComponentBase ::
        -:  216:    set_LogText_OutputPort(
        -:  217:        NATIVE_INT_TYPE portNum,
        -:  218:        Fw::InputSerializePort *port
        -:  219:    )
        -:  220:  {
    #####:  221:    FW_ASSERT(portNum < this->getNum_LogText_OutputPorts());
    #####:  222:    return this->m_LogText_OutputPort[portNum].registerSerialPort(port);
        -:  223:  }
        -:  224:#endif
        -:  225:
        -:  226:#endif
        -:  227:
        -:  228:  // ----------------------------------------------------------------------
        -:  229:  // Command registration
        -:  230:  // ----------------------------------------------------------------------
        -:  231:
    #####:  232:  void PrmDbComponentBase ::
        -:  233:    regCommands(void)
        -:  234:  {
    #####:  235:    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());
    #####:  236:    this->m_CmdReg_OutputPort[0].invoke(OPCODE_PRM_SAVE_FILE);
    #####:  237:  }
        -:  238:
        -:  239:  // ----------------------------------------------------------------------
        -:  240:  // Component construction, initialization, and destruction
        -:  241:  // ----------------------------------------------------------------------
        -:  242:
       72:  243:  PrmDbComponentBase ::
        -:  244:#if FW_OBJECT_NAMES == 1
        -:  245:    PrmDbComponentBase(const char* compName) :
       72:  246:      Fw::ActiveComponentBase(compName)
        -:  247:#else
        -:  248:    PrmDbComponentBase() :
        -:  249:      Fw::ActiveComponentBase()
        -:  250:#endif
        -:  251:  {
        -:  252:
       72:  253:  }
        -:  254:
       72:  255:  void PrmDbComponentBase ::
        -:  256:    init(
        -:  257:        NATIVE_INT_TYPE queueDepth,
        -:  258:        NATIVE_INT_TYPE instance
        -:  259:    )
        -:  260:  {
        -:  261:
        -:  262:    // Initialize base class
       72:  263:    Fw::ActiveComponentBase::init(instance);
        -:  264:
        -:  265:    // Connect input port getPrm
      288:  266:    for (
       72:  267:        NATIVE_INT_TYPE port = 0;
      144:  268:        port < this->getNum_getPrm_InputPorts();
        -:  269:        port++
        -:  270:    ) {
        -:  271:
       72:  272:      this->m_getPrm_InputPort[port].init();
        -:  273:      this->m_getPrm_InputPort[port].addCallComp(
        -:  274:          this,
        -:  275:          m_p_getPrm_in
       72:  276:      );
       72:  277:      this->m_getPrm_InputPort[port].setPortNum(port);
        -:  278:
        -:  279:#if FW_OBJECT_NAMES == 1
        -:  280:      char portName[80];
        -:  281:      (void) snprintf(
        -:  282:          portName,
        -:  283:          sizeof(portName),
        -:  284:          "%s_getPrm_InputPort[%d]",
        -:  285:          this->m_objName,
        -:  286:          port
       72:  287:      );
       72:  288:      this->m_getPrm_InputPort[port].setObjName(portName);
        -:  289:#endif
        -:  290:
        -:  291:    }
        -:  292:
        -:  293:    // Connect input port setPrm
      288:  294:    for (
       72:  295:        NATIVE_INT_TYPE port = 0;
      144:  296:        port < this->getNum_setPrm_InputPorts();
        -:  297:        port++
        -:  298:    ) {
        -:  299:
       72:  300:      this->m_setPrm_InputPort[port].init();
        -:  301:      this->m_setPrm_InputPort[port].addCallComp(
        -:  302:          this,
        -:  303:          m_p_setPrm_in
       72:  304:      );
       72:  305:      this->m_setPrm_InputPort[port].setPortNum(port);
        -:  306:
        -:  307:#if FW_OBJECT_NAMES == 1
        -:  308:      char portName[80];
        -:  309:      (void) snprintf(
        -:  310:          portName,
        -:  311:          sizeof(portName),
        -:  312:          "%s_setPrm_InputPort[%d]",
        -:  313:          this->m_objName,
        -:  314:          port
       72:  315:      );
       72:  316:      this->m_setPrm_InputPort[port].setObjName(portName);
        -:  317:#endif
        -:  318:
        -:  319:    }
        -:  320:
        -:  321:    // Connect input port CmdDisp
      288:  322:    for (
       72:  323:        NATIVE_INT_TYPE port = 0;
      144:  324:        port < this->getNum_CmdDisp_InputPorts();
        -:  325:        port++
        -:  326:    ) {
        -:  327:
       72:  328:      this->m_CmdDisp_InputPort[port].init();
        -:  329:      this->m_CmdDisp_InputPort[port].addCallComp(
        -:  330:          this,
        -:  331:          m_p_CmdDisp_in
       72:  332:      );
       72:  333:      this->m_CmdDisp_InputPort[port].setPortNum(port);
        -:  334:
        -:  335:#if FW_OBJECT_NAMES == 1
        -:  336:      char portName[80];
        -:  337:      (void) snprintf(
        -:  338:          portName,
        -:  339:          sizeof(portName),
        -:  340:          "%s_CmdDisp_InputPort[%d]",
        -:  341:          this->m_objName,
        -:  342:          port
       72:  343:      );
       72:  344:      this->m_CmdDisp_InputPort[port].setObjName(portName);
        -:  345:#endif
        -:  346:
        -:  347:    }
        -:  348:
        -:  349:    // Initialize output port CmdStatus
      288:  350:    for (
       72:  351:        NATIVE_INT_TYPE port = 0;
      144:  352:        port < this->getNum_CmdStatus_OutputPorts();
        -:  353:        port++
        -:  354:    ) {
       72:  355:      this->m_CmdStatus_OutputPort[port].init();
        -:  356:
        -:  357:#if FW_OBJECT_NAMES == 1
        -:  358:      char portName[80];
        -:  359:      (void) snprintf(
        -:  360:          portName,
        -:  361:          sizeof(portName),
        -:  362:          "%s_CmdStatus_OutputPort[%d]",
        -:  363:          this->m_objName,
        -:  364:          port
       72:  365:      );
       72:  366:      this->m_CmdStatus_OutputPort[port].setObjName(portName);
        -:  367:#endif
        -:  368:
        -:  369:    }
        -:  370:
        -:  371:    // Initialize output port CmdReg
      288:  372:    for (
       72:  373:        NATIVE_INT_TYPE port = 0;
      144:  374:        port < this->getNum_CmdReg_OutputPorts();
        -:  375:        port++
        -:  376:    ) {
       72:  377:      this->m_CmdReg_OutputPort[port].init();
        -:  378:
        -:  379:#if FW_OBJECT_NAMES == 1
        -:  380:      char portName[80];
        -:  381:      (void) snprintf(
        -:  382:          portName,
        -:  383:          sizeof(portName),
        -:  384:          "%s_CmdReg_OutputPort[%d]",
        -:  385:          this->m_objName,
        -:  386:          port
       72:  387:      );
       72:  388:      this->m_CmdReg_OutputPort[port].setObjName(portName);
        -:  389:#endif
        -:  390:
        -:  391:    }
        -:  392:
        -:  393:    // Initialize output port Time
      288:  394:    for (
       72:  395:        NATIVE_INT_TYPE port = 0;
      144:  396:        port < this->getNum_Time_OutputPorts();
        -:  397:        port++
        -:  398:    ) {
       72:  399:      this->m_Time_OutputPort[port].init();
        -:  400:
        -:  401:#if FW_OBJECT_NAMES == 1
        -:  402:      char portName[80];
        -:  403:      (void) snprintf(
        -:  404:          portName,
        -:  405:          sizeof(portName),
        -:  406:          "%s_Time_OutputPort[%d]",
        -:  407:          this->m_objName,
        -:  408:          port
       72:  409:      );
       72:  410:      this->m_Time_OutputPort[port].setObjName(portName);
        -:  411:#endif
        -:  412:
        -:  413:    }
        -:  414:
        -:  415:    // Initialize output port Log
      288:  416:    for (
       72:  417:        NATIVE_INT_TYPE port = 0;
      144:  418:        port < this->getNum_Log_OutputPorts();
        -:  419:        port++
        -:  420:    ) {
       72:  421:      this->m_Log_OutputPort[port].init();
        -:  422:
        -:  423:#if FW_OBJECT_NAMES == 1
        -:  424:      char portName[80];
        -:  425:      (void) snprintf(
        -:  426:          portName,
        -:  427:          sizeof(portName),
        -:  428:          "%s_Log_OutputPort[%d]",
        -:  429:          this->m_objName,
        -:  430:          port
       72:  431:      );
       72:  432:      this->m_Log_OutputPort[port].setObjName(portName);
        -:  433:#endif
        -:  434:
        -:  435:    }
        -:  436:
        -:  437:    // Initialize output port LogText
        -:  438:#if FW_ENABLE_TEXT_LOGGING == 1
      288:  439:    for (
       72:  440:        NATIVE_INT_TYPE port = 0;
      144:  441:        port < this->getNum_LogText_OutputPorts();
        -:  442:        port++
        -:  443:    ) {
       72:  444:      this->m_LogText_OutputPort[port].init();
        -:  445:
        -:  446:#if FW_OBJECT_NAMES == 1
        -:  447:      char portName[80];
        -:  448:      (void) snprintf(
        -:  449:          portName,
        -:  450:          sizeof(portName),
        -:  451:          "%s_LogText_OutputPort[%d]",
        -:  452:          this->m_objName,
        -:  453:          port
       72:  454:      );
       72:  455:      this->m_LogText_OutputPort[port].setObjName(portName);
        -:  456:#endif
        -:  457:
        -:  458:    }
        -:  459:#endif
        -:  460:
        -:  461:    Os::Queue::QueueStatus qStat =
        -:  462:    this->createQueue(
        -:  463:        queueDepth,
        -:  464:        ComponentIpcSerializableBuffer::SERIALIZATION_SIZE
       72:  465:    );
       72:  466:    FW_ASSERT(
        -:  467:        Os::Queue::QUEUE_OK == qStat,
        -:  468:        static_cast<NATIVE_INT_TYPE>(qStat)
      144:  469:    );
        -:  470:
       72:  471:  }
        -:  472:
       72:  473:  PrmDbComponentBase::
       72:  474:    ~PrmDbComponentBase() {
        -:  475:
       72:  476:  }
        -:  477:
        -:  478:  // ----------------------------------------------------------------------
        -:  479:  // Invocation functions for output ports
        -:  480:  // ----------------------------------------------------------------------
        -:  481:
        -:  482:  // ----------------------------------------------------------------------
        -:  483:  // Getters for numbers of ports
        -:  484:  // ----------------------------------------------------------------------
        -:  485:
      372:  486:  NATIVE_INT_TYPE PrmDbComponentBase ::
        -:  487:    getNum_getPrm_InputPorts(void)
        -:  488:  {
      372:  489:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  490:        this->m_getPrm_InputPort
        -:  491:    );
        -:  492:  }
        -:  493:
      708:  494:  NATIVE_INT_TYPE PrmDbComponentBase ::
        -:  495:    getNum_setPrm_InputPorts(void)
        -:  496:  {
      708:  497:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  498:        this->m_setPrm_InputPort
        -:  499:    );
        -:  500:  }
        -:  501:
      216:  502:  NATIVE_INT_TYPE PrmDbComponentBase ::
        -:  503:    getNum_CmdDisp_InputPorts(void)
        -:  504:  {
      216:  505:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  506:        this->m_CmdDisp_InputPort
        -:  507:    );
        -:  508:  }
        -:  509:
      216:  510:  NATIVE_INT_TYPE PrmDbComponentBase ::
        -:  511:    getNum_CmdStatus_OutputPorts(void)
        -:  512:  {
      216:  513:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  514:        this->m_CmdStatus_OutputPort
        -:  515:    );
        -:  516:  }
        -:  517:
      144:  518:  NATIVE_INT_TYPE PrmDbComponentBase ::
        -:  519:    getNum_CmdReg_OutputPorts(void)
        -:  520:  {
      144:  521:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  522:        this->m_CmdReg_OutputPort
        -:  523:    );
        -:  524:  }
        -:  525:
      216:  526:  NATIVE_INT_TYPE PrmDbComponentBase ::
        -:  527:    getNum_Time_OutputPorts(void)
        -:  528:  {
      216:  529:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  530:        this->m_Time_OutputPort
        -:  531:    );
        -:  532:  }
        -:  533:
      216:  534:  NATIVE_INT_TYPE PrmDbComponentBase ::
        -:  535:    getNum_Log_OutputPorts(void)
        -:  536:  {
      216:  537:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  538:        this->m_Log_OutputPort
        -:  539:    );
        -:  540:  }
        -:  541:
        -:  542:#if FW_ENABLE_TEXT_LOGGING == 1
      216:  543:  NATIVE_INT_TYPE PrmDbComponentBase ::
        -:  544:    getNum_LogText_OutputPorts(void)
        -:  545:  {
      216:  546:    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        -:  547:        this->m_LogText_OutputPort
        -:  548:    );
        -:  549:  }
        -:  550:#endif
        -:  551:
        -:  552:  // ----------------------------------------------------------------------
        -:  553:  // Port connection status queries
        -:  554:  // ----------------------------------------------------------------------
        -:  555:
    #####:  556:  bool PrmDbComponentBase ::
        -:  557:    isConnected_CmdStatus_OutputPort(NATIVE_INT_TYPE portNum)
        -:  558:  {
    #####:  559:     FW_ASSERT(
        -:  560:        portNum < this->getNum_CmdStatus_OutputPorts(),
        -:  561:        portNum
    #####:  562:     );
    #####:  563:     return this->m_CmdStatus_OutputPort[portNum].isConnected();
        -:  564:  }
        -:  565:
    #####:  566:  bool PrmDbComponentBase ::
        -:  567:    isConnected_CmdReg_OutputPort(NATIVE_INT_TYPE portNum)
        -:  568:  {
    #####:  569:     FW_ASSERT(
        -:  570:        portNum < this->getNum_CmdReg_OutputPorts(),
        -:  571:        portNum
    #####:  572:     );
    #####:  573:     return this->m_CmdReg_OutputPort[portNum].isConnected();
        -:  574:  }
        -:  575:
    #####:  576:  bool PrmDbComponentBase ::
        -:  577:    isConnected_Time_OutputPort(NATIVE_INT_TYPE portNum)
        -:  578:  {
    #####:  579:     FW_ASSERT(
        -:  580:        portNum < this->getNum_Time_OutputPorts(),
        -:  581:        portNum
    #####:  582:     );
    #####:  583:     return this->m_Time_OutputPort[portNum].isConnected();
        -:  584:  }
        -:  585:
    #####:  586:  bool PrmDbComponentBase ::
        -:  587:    isConnected_Log_OutputPort(NATIVE_INT_TYPE portNum)
        -:  588:  {
    #####:  589:     FW_ASSERT(
        -:  590:        portNum < this->getNum_Log_OutputPorts(),
        -:  591:        portNum
    #####:  592:     );
    #####:  593:     return this->m_Log_OutputPort[portNum].isConnected();
        -:  594:  }
        -:  595:
        -:  596:#if FW_ENABLE_TEXT_LOGGING == 1
    #####:  597:  bool PrmDbComponentBase ::
        -:  598:    isConnected_LogText_OutputPort(NATIVE_INT_TYPE portNum)
        -:  599:  {
    #####:  600:     FW_ASSERT(
        -:  601:        portNum < this->getNum_LogText_OutputPorts(),
        -:  602:        portNum
    #####:  603:     );
    #####:  604:     return this->m_LogText_OutputPort[portNum].isConnected();
        -:  605:  }
        -:  606:#endif
        -:  607:
        -:  608:  // ----------------------------------------------------------------------
        -:  609:  // Calls for messages received on typed input ports
        -:  610:  // ----------------------------------------------------------------------
        -:  611:
      120:  612:  void PrmDbComponentBase ::
        -:  613:    m_p_CmdDisp_in(
        -:  614:        Fw::PassiveComponentBase* callComp,
        -:  615:        NATIVE_INT_TYPE portNum,
        -:  616:        FwOpcodeType opCode,
        -:  617:        U32 cmdSeq,
        -:  618:        Fw::CmdArgBuffer &args
        -:  619:    )
        -:  620:  {
        -:  621:
        -:  622:    // Select base class function based on opcode
      120:  623:    FW_ASSERT(callComp);
        -:  624:    PrmDbComponentBase* compPtr =
      120:  625:      (PrmDbComponentBase*) callComp;
        -:  626:
      120:  627:    switch (opCode) {
        -:  628:
        -:  629:      case OPCODE_PRM_SAVE_FILE:
        -:  630:        compPtr->PRM_SAVE_FILE_cmdHandlerBase(
        -:  631:            opCode,
        -:  632:            cmdSeq,
        -:  633:            args
      120:  634:        );
      120:  635:        break;
        -:  636:        
        -:  637:      default: {
        -:  638:        compPtr->cmdResponse_out(
        -:  639:            opCode,cmdSeq,
        -:  640:            Fw::COMMAND_INVALID_OPCODE
    #####:  641:        );
    #####:  642:        break;
        -:  643:      }
        -:  644:
        -:  645:    }
        -:  646:
      120:  647:  }
        -:  648:
      120:  649:  void PrmDbComponentBase ::
        -:  650:    cmdResponse_out(
        -:  651:        FwOpcodeType opCode,
        -:  652:        U32 cmdSeq,
        -:  653:        Fw::CommandResponse response
        -:  654:    )
        -:  655:  {
      120:  656:    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
      120:  657:    this->m_CmdStatus_OutputPort[0].invoke(opCode,cmdSeq,response);
      120:  658:  }
        -:  659:
        -:  660:  // ----------------------------------------------------------------------
        -:  661:  // Base class command functions
        -:  662:  // ----------------------------------------------------------------------
        -:  663:
      120:  664:  void PrmDbComponentBase ::
        -:  665:    PRM_SAVE_FILE_cmdHandlerBase(
        -:  666:        FwOpcodeType opCode,
        -:  667:        U32 cmdSeq,
        -:  668:        Fw::CmdArgBuffer &args
        -:  669:    )
        -:  670:  {
        -:  671:
        -:  672:    // Call pre-message hook
      120:  673:    this->PRM_SAVE_FILE_preMsgHook(opCode,cmdSeq);
        -:  674:
        -:  675:    // Defer deserializing arguments to the message dispatcher
        -:  676:    // to avoid deserializing and reserializing just for IPC
      120:  677:    ComponentIpcSerializableBuffer msg;
        -:  678:    Fw::SerializeStatus _status;
        -:  679:
        -:  680:    // Serialize for IPC
      120:  681:    _status = msg.serialize((NATIVE_INT_TYPE)CMD_PRM_SAVE_FILE);
      120:  682:    FW_ASSERT (
        -:  683:        _status == Fw::FW_SERIALIZE_OK,
        -:  684:        static_cast<NATIVE_INT_TYPE>(_status)
      240:  685:        );
        -:  686:
        -:  687:    // Fake port number to make message dequeue work
      120:  688:    NATIVE_INT_TYPE port = 0;
      120:  689:    _status = msg.serialize(port);
      120:  690:    FW_ASSERT (
        -:  691:        _status == Fw::FW_SERIALIZE_OK,
        -:  692:        static_cast<NATIVE_INT_TYPE>(_status)
      240:  693:    );
        -:  694:
      120:  695:    _status = msg.serialize(opCode);
      120:  696:    FW_ASSERT (
        -:  697:        _status == Fw::FW_SERIALIZE_OK,
        -:  698:        static_cast<NATIVE_INT_TYPE>(_status)
      240:  699:    );
        -:  700:
      120:  701:    _status = msg.serialize(cmdSeq);
      120:  702:    FW_ASSERT (
        -:  703:        _status == Fw::FW_SERIALIZE_OK,
        -:  704:        static_cast<NATIVE_INT_TYPE>(_status)
      240:  705:    );
        -:  706:
      120:  707:    _status = msg.serialize(args);
      120:  708:    FW_ASSERT (
        -:  709:        _status == Fw::FW_SERIALIZE_OK,
        -:  710:        static_cast<NATIVE_INT_TYPE>(_status)
      240:  711:    );
        -:  712:
      120:  713:    Os::Queue::QueueStatus qStatus = this->m_queue.send(msg,0);
        -:  714:
      120:  715:    FW_ASSERT(
        -:  716:        qStatus == Os::Queue::QUEUE_OK,
        -:  717:        static_cast<NATIVE_INT_TYPE>(qStatus)
      360:  718:    );
        -:  719:
      120:  720:  }
        -:  721:
      120:  722:  void PrmDbComponentBase::
        -:  723:    PRM_SAVE_FILE_preMsgHook(
        -:  724:        FwOpcodeType opCode,
        -:  725:        U32 cmdSeq
        -:  726:    )
        -:  727:  {
        -:  728:    // Defaults to no-op; can be overridden
      120:  729:  }
        -:  730:
        -:  731:  // ----------------------------------------------------------------------
        -:  732:  // Time
        -:  733:  // ----------------------------------------------------------------------
        -:  734:
    #####:  735:  Fw::Time PrmDbComponentBase ::
        -:  736:    getTime(void) 
        -:  737:  {
    #####:  738:    if (this->m_Time_OutputPort[0].isConnected()) {
    #####:  739:      return this->m_Time_OutputPort[0].invoke();
        -:  740:    } else {
    #####:  741:      return Fw::Time(TB_NONE,0,0);
        -:  742:    }
        -:  743:  }
        -:  744:
        -:  745:  // ----------------------------------------------------------------------
        -:  746:  // Event handling functions
        -:  747:  // ----------------------------------------------------------------------
        -:  748:
       12:  749:  void PrmDbComponentBase ::
        -:  750:    log_WARNING_LO_PrmIdNotFound(
        -:  751:        U32 Id
        -:  752:    )
        -:  753:  {
        -:  754:
        -:  755:    // Get the time
       12:  756:    Fw::Time _logTime;
       12:  757:    if (this->m_Time_OutputPort[0].isConnected()) {
       12:  758:      _logTime = this->m_Time_OutputPort[0].invoke();
        -:  759:    }
        -:  760:    
       12:  761:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -:  762:    
       12:  763:    _id = EVENTID_PRMIDNOTFOUND;
        -:  764:
        -:  765:    // Emit the event on the log port
       12:  766:    if (this->m_Log_OutputPort[0].isConnected()) {
        -:  767:
       12:  768:      Fw::LogBuffer _logBuff;
        -:  769:      Fw::SerializeStatus _status;
        -:  770:
        -:  771:#if FW_AMPCS_COMPATIBLE
        -:  772:      // Serialize the number of arguments
        -:  773:      _status = _logBuff.serialize(static_cast<U8>(1));
        -:  774:      FW_ASSERT(
        -:  775:          _status == Fw::FW_SERIALIZE_OK,
        -:  776:          static_cast<NATIVE_INT_TYPE>(_status)
        -:  777:      );
        -:  778:#endif
        -:  779:
        -:  780:#if FW_AMPCS_COMPATIBLE
        -:  781:      // Serialize the argument size
        -:  782:      _status = _logBuff.serialize(
        -:  783:          static_cast<U8>(sizeof(Id))
        -:  784:      );
        -:  785:      FW_ASSERT(
        -:  786:          _status == Fw::FW_SERIALIZE_OK,
        -:  787:          static_cast<NATIVE_INT_TYPE>(_status)
        -:  788:      );
        -:  789:#endif
        -:  790:
       12:  791:      _status = _logBuff.serialize(Id);
       12:  792:      FW_ASSERT(
        -:  793:          _status == Fw::FW_SERIALIZE_OK,
        -:  794:          static_cast<NATIVE_INT_TYPE>(_status)
       24:  795:      );
        -:  796:
        -:  797:
        -:  798:      this->m_Log_OutputPort[0].invoke(
        -:  799:          _id,
        -:  800:          _logTime,Fw::LOG_WARNING_LO,
        -:  801:          _logBuff
       12:  802:      );
        -:  803:
        -:  804:    }
        -:  805:
        -:  806:    // Emit the event on the text log port
        -:  807:#if FW_ENABLE_TEXT_LOGGING
       12:  808:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -:  809:
        -:  810:#if FW_OBJECT_NAMES == 1
        -:  811:      const char* _formatString =
       12:  812:        "(%s) %s: Parameter ID 0x%08X not found";
        -:  813:#else
        -:  814:      const char* _formatString =
        -:  815:        "%s: Parameter ID 0x%08X not found";
        -:  816:#endif
        -:  817:
        -:  818:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -:  819:
        -:  820:      (void) snprintf(
        -:  821:          _textBuffer,
        -:  822:          FW_LOG_TEXT_BUFFER_SIZE,
        -:  823:          _formatString,
        -:  824:#if FW_OBJECT_NAMES == 1
        -:  825:          this->m_objName,
        -:  826:#endif
        -:  827:          "PrmIdNotFound "
        -:  828:        , Id
       12:  829:      );
        -:  830:
        -:  831:      // Null terminate
       12:  832:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
       12:  833:      Fw::TextLogString _logString = _textBuffer;
        -:  834:      this->m_LogText_OutputPort[0].invoke(
        -:  835:          _id,
        -:  836:          _logTime,Fw::TEXT_LOG_WARNING_LO,
        -:  837:          _logString
       12:  838:      );
        -:  839:
       12:  840:    }
        -:  841:#endif
        -:  842:
       12:  843:  }
        -:  844:
       60:  845:  void PrmDbComponentBase ::
        -:  846:    log_ACTIVITY_HI_PrmIdUpdated(
        -:  847:        U32 Id
        -:  848:    )
        -:  849:  {
        -:  850:
        -:  851:    // Get the time
       60:  852:    Fw::Time _logTime;
       60:  853:    if (this->m_Time_OutputPort[0].isConnected()) {
       60:  854:      _logTime = this->m_Time_OutputPort[0].invoke();
        -:  855:    }
        -:  856:    
       60:  857:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -:  858:    
       60:  859:    _id = EVENTID_PRMIDUPDATED;
        -:  860:
        -:  861:    // Emit the event on the log port
       60:  862:    if (this->m_Log_OutputPort[0].isConnected()) {
        -:  863:
       60:  864:      Fw::LogBuffer _logBuff;
        -:  865:      Fw::SerializeStatus _status;
        -:  866:
        -:  867:#if FW_AMPCS_COMPATIBLE
        -:  868:      // Serialize the number of arguments
        -:  869:      _status = _logBuff.serialize(static_cast<U8>(1));
        -:  870:      FW_ASSERT(
        -:  871:          _status == Fw::FW_SERIALIZE_OK,
        -:  872:          static_cast<NATIVE_INT_TYPE>(_status)
        -:  873:      );
        -:  874:#endif
        -:  875:
        -:  876:#if FW_AMPCS_COMPATIBLE
        -:  877:      // Serialize the argument size
        -:  878:      _status = _logBuff.serialize(
        -:  879:          static_cast<U8>(sizeof(Id))
        -:  880:      );
        -:  881:      FW_ASSERT(
        -:  882:          _status == Fw::FW_SERIALIZE_OK,
        -:  883:          static_cast<NATIVE_INT_TYPE>(_status)
        -:  884:      );
        -:  885:#endif
        -:  886:
       60:  887:      _status = _logBuff.serialize(Id);
       60:  888:      FW_ASSERT(
        -:  889:          _status == Fw::FW_SERIALIZE_OK,
        -:  890:          static_cast<NATIVE_INT_TYPE>(_status)
      120:  891:      );
        -:  892:
        -:  893:
        -:  894:      this->m_Log_OutputPort[0].invoke(
        -:  895:          _id,
        -:  896:          _logTime,Fw::LOG_ACTIVITY_HI,
        -:  897:          _logBuff
       60:  898:      );
        -:  899:
        -:  900:    }
        -:  901:
        -:  902:    // Emit the event on the text log port
        -:  903:#if FW_ENABLE_TEXT_LOGGING
       60:  904:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -:  905:
        -:  906:#if FW_OBJECT_NAMES == 1
        -:  907:      const char* _formatString =
       60:  908:        "(%s) %s: Parameter ID 0x%08X updated";
        -:  909:#else
        -:  910:      const char* _formatString =
        -:  911:        "%s: Parameter ID 0x%08X updated";
        -:  912:#endif
        -:  913:
        -:  914:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -:  915:
        -:  916:      (void) snprintf(
        -:  917:          _textBuffer,
        -:  918:          FW_LOG_TEXT_BUFFER_SIZE,
        -:  919:          _formatString,
        -:  920:#if FW_OBJECT_NAMES == 1
        -:  921:          this->m_objName,
        -:  922:#endif
        -:  923:          "PrmIdUpdated "
        -:  924:        , Id
       60:  925:      );
        -:  926:
        -:  927:      // Null terminate
       60:  928:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
       60:  929:      Fw::TextLogString _logString = _textBuffer;
        -:  930:      this->m_LogText_OutputPort[0].invoke(
        -:  931:          _id,
        -:  932:          _logTime,Fw::TEXT_LOG_ACTIVITY_HI,
        -:  933:          _logString
       60:  934:      );
        -:  935:
       60:  936:    }
        -:  937:#endif
        -:  938:
       60:  939:  }
        -:  940:
       12:  941:  void PrmDbComponentBase ::
        -:  942:    log_FATAL_PrmDbFull(
        -:  943:        U32 Id
        -:  944:    )
        -:  945:  {
        -:  946:
        -:  947:    // Get the time
       12:  948:    Fw::Time _logTime;
       12:  949:    if (this->m_Time_OutputPort[0].isConnected()) {
       12:  950:      _logTime = this->m_Time_OutputPort[0].invoke();
        -:  951:    }
        -:  952:    
       12:  953:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -:  954:    
       12:  955:    _id = EVENTID_PRMDBFULL;
        -:  956:
        -:  957:    // Emit the event on the log port
       12:  958:    if (this->m_Log_OutputPort[0].isConnected()) {
        -:  959:
       12:  960:      Fw::LogBuffer _logBuff;
        -:  961:      Fw::SerializeStatus _status;
        -:  962:
        -:  963:#if FW_AMPCS_COMPATIBLE
        -:  964:      // Serialize the number of arguments
        -:  965:      _status = _logBuff.serialize(static_cast<U8>(1));
        -:  966:      FW_ASSERT(
        -:  967:          _status == Fw::FW_SERIALIZE_OK,
        -:  968:          static_cast<NATIVE_INT_TYPE>(_status)
        -:  969:      );
        -:  970:#endif
        -:  971:
        -:  972:#if FW_AMPCS_COMPATIBLE
        -:  973:      // Serialize the argument size
        -:  974:      _status = _logBuff.serialize(
        -:  975:          static_cast<U8>(sizeof(Id))
        -:  976:      );
        -:  977:      FW_ASSERT(
        -:  978:          _status == Fw::FW_SERIALIZE_OK,
        -:  979:          static_cast<NATIVE_INT_TYPE>(_status)
        -:  980:      );
        -:  981:#endif
        -:  982:
       12:  983:      _status = _logBuff.serialize(Id);
       12:  984:      FW_ASSERT(
        -:  985:          _status == Fw::FW_SERIALIZE_OK,
        -:  986:          static_cast<NATIVE_INT_TYPE>(_status)
       24:  987:      );
        -:  988:
        -:  989:
        -:  990:      this->m_Log_OutputPort[0].invoke(
        -:  991:          _id,
        -:  992:          _logTime,Fw::LOG_FATAL,
        -:  993:          _logBuff
       12:  994:      );
        -:  995:
        -:  996:    }
        -:  997:
        -:  998:    // Emit the event on the text log port
        -:  999:#if FW_ENABLE_TEXT_LOGGING
       12: 1000:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1001:
        -: 1002:#if FW_OBJECT_NAMES == 1
        -: 1003:      const char* _formatString =
       12: 1004:        "(%s) %s: Parameter DB full when adding ID 0x%08X";
        -: 1005:#else
        -: 1006:      const char* _formatString =
        -: 1007:        "%s: Parameter DB full when adding ID 0x%08X";
        -: 1008:#endif
        -: 1009:
        -: 1010:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1011:
        -: 1012:      (void) snprintf(
        -: 1013:          _textBuffer,
        -: 1014:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1015:          _formatString,
        -: 1016:#if FW_OBJECT_NAMES == 1
        -: 1017:          this->m_objName,
        -: 1018:#endif
        -: 1019:          "PrmDbFull "
        -: 1020:        , Id
       12: 1021:      );
        -: 1022:
        -: 1023:      // Null terminate
       12: 1024:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
       12: 1025:      Fw::TextLogString _logString = _textBuffer;
        -: 1026:      this->m_LogText_OutputPort[0].invoke(
        -: 1027:          _id,
        -: 1028:          _logTime,Fw::TEXT_LOG_FATAL,
        -: 1029:          _logString
       12: 1030:      );
        -: 1031:
       12: 1032:    }
        -: 1033:#endif
        -: 1034:
       12: 1035:  }
        -: 1036:
      420: 1037:  void PrmDbComponentBase ::
        -: 1038:    log_ACTIVITY_HI_PrmIdAdded(
        -: 1039:        U32 Id
        -: 1040:    )
        -: 1041:  {
        -: 1042:
        -: 1043:    // Get the time
      420: 1044:    Fw::Time _logTime;
      420: 1045:    if (this->m_Time_OutputPort[0].isConnected()) {
      420: 1046:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1047:    }
        -: 1048:    
      420: 1049:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1050:    
      420: 1051:    _id = EVENTID_PRMIDADDED;
        -: 1052:
        -: 1053:    // Emit the event on the log port
      420: 1054:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1055:
      420: 1056:      Fw::LogBuffer _logBuff;
        -: 1057:      Fw::SerializeStatus _status;
        -: 1058:
        -: 1059:#if FW_AMPCS_COMPATIBLE
        -: 1060:      // Serialize the number of arguments
        -: 1061:      _status = _logBuff.serialize(static_cast<U8>(1));
        -: 1062:      FW_ASSERT(
        -: 1063:          _status == Fw::FW_SERIALIZE_OK,
        -: 1064:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1065:      );
        -: 1066:#endif
        -: 1067:
        -: 1068:#if FW_AMPCS_COMPATIBLE
        -: 1069:      // Serialize the argument size
        -: 1070:      _status = _logBuff.serialize(
        -: 1071:          static_cast<U8>(sizeof(Id))
        -: 1072:      );
        -: 1073:      FW_ASSERT(
        -: 1074:          _status == Fw::FW_SERIALIZE_OK,
        -: 1075:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1076:      );
        -: 1077:#endif
        -: 1078:
      420: 1079:      _status = _logBuff.serialize(Id);
      420: 1080:      FW_ASSERT(
        -: 1081:          _status == Fw::FW_SERIALIZE_OK,
        -: 1082:          static_cast<NATIVE_INT_TYPE>(_status)
      840: 1083:      );
        -: 1084:
        -: 1085:
        -: 1086:      this->m_Log_OutputPort[0].invoke(
        -: 1087:          _id,
        -: 1088:          _logTime,Fw::LOG_ACTIVITY_HI,
        -: 1089:          _logBuff
      420: 1090:      );
        -: 1091:
        -: 1092:    }
        -: 1093:
        -: 1094:    // Emit the event on the text log port
        -: 1095:#if FW_ENABLE_TEXT_LOGGING
      420: 1096:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1097:
        -: 1098:#if FW_OBJECT_NAMES == 1
        -: 1099:      const char* _formatString =
      420: 1100:        "(%s) %s: Parameter ID 0x%08X added";
        -: 1101:#else
        -: 1102:      const char* _formatString =
        -: 1103:        "%s: Parameter ID 0x%08X added";
        -: 1104:#endif
        -: 1105:
        -: 1106:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1107:
        -: 1108:      (void) snprintf(
        -: 1109:          _textBuffer,
        -: 1110:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1111:          _formatString,
        -: 1112:#if FW_OBJECT_NAMES == 1
        -: 1113:          this->m_objName,
        -: 1114:#endif
        -: 1115:          "PrmIdAdded "
        -: 1116:        , Id
      420: 1117:      );
        -: 1118:
        -: 1119:      // Null terminate
      420: 1120:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      420: 1121:      Fw::TextLogString _logString = _textBuffer;
        -: 1122:      this->m_LogText_OutputPort[0].invoke(
        -: 1123:          _id,
        -: 1124:          _logTime,Fw::TEXT_LOG_ACTIVITY_HI,
        -: 1125:          _logString
      420: 1126:      );
        -: 1127:
      420: 1128:    }
        -: 1129:#endif
        -: 1130:
      420: 1131:  }
        -: 1132:
      108: 1133:  void PrmDbComponentBase ::
        -: 1134:    log_WARNING_HI_PrmFileWriteError(
        -: 1135:        LogWriteError stage, I32 record, I32 error
        -: 1136:    )
        -: 1137:  {
        -: 1138:
        -: 1139:    // Get the time
      108: 1140:    Fw::Time _logTime;
      108: 1141:    if (this->m_Time_OutputPort[0].isConnected()) {
      108: 1142:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1143:    }
        -: 1144:    
      108: 1145:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1146:    
      108: 1147:    _id = EVENTID_PRMFILEWRITEERROR;
        -: 1148:
        -: 1149:    // Emit the event on the log port
      108: 1150:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1151:
      108: 1152:      Fw::LogBuffer _logBuff;
        -: 1153:      Fw::SerializeStatus _status;
        -: 1154:
        -: 1155:#if FW_AMPCS_COMPATIBLE
        -: 1156:      // Serialize the number of arguments
        -: 1157:      _status = _logBuff.serialize(static_cast<U8>(3));
        -: 1158:      FW_ASSERT(
        -: 1159:          _status == Fw::FW_SERIALIZE_OK,
        -: 1160:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1161:      );
        -: 1162:#endif
        -: 1163:
        -: 1164:#if FW_AMPCS_COMPATIBLE
        -: 1165:      // Serialize the argument size
        -: 1166:      _status = _logBuff.serialize(static_cast<U8>(sizeof(FwEnumStoreType)));
        -: 1167:      FW_ASSERT(
        -: 1168:          _status == Fw::FW_SERIALIZE_OK,
        -: 1169:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1170:      );
        -: 1171:#endif
        -: 1172:
        -: 1173:      _status = _logBuff.serialize(
        -: 1174:          static_cast<FwEnumStoreType>(stage)
      108: 1175:      );
      108: 1176:      FW_ASSERT(
        -: 1177:          _status == Fw::FW_SERIALIZE_OK,
        -: 1178:          static_cast<NATIVE_INT_TYPE>(_status)
      216: 1179:      );
        -: 1180:
        -: 1181:#if FW_AMPCS_COMPATIBLE
        -: 1182:      // Serialize the argument size
        -: 1183:      _status = _logBuff.serialize(
        -: 1184:          static_cast<U8>(sizeof(record))
        -: 1185:      );
        -: 1186:      FW_ASSERT(
        -: 1187:          _status == Fw::FW_SERIALIZE_OK,
        -: 1188:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1189:      );
        -: 1190:#endif
        -: 1191:
      108: 1192:      _status = _logBuff.serialize(record);
      108: 1193:      FW_ASSERT(
        -: 1194:          _status == Fw::FW_SERIALIZE_OK,
        -: 1195:          static_cast<NATIVE_INT_TYPE>(_status)
      216: 1196:      );
        -: 1197:
        -: 1198:#if FW_AMPCS_COMPATIBLE
        -: 1199:      // Serialize the argument size
        -: 1200:      _status = _logBuff.serialize(
        -: 1201:          static_cast<U8>(sizeof(error))
        -: 1202:      );
        -: 1203:      FW_ASSERT(
        -: 1204:          _status == Fw::FW_SERIALIZE_OK,
        -: 1205:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1206:      );
        -: 1207:#endif
        -: 1208:
      108: 1209:      _status = _logBuff.serialize(error);
      108: 1210:      FW_ASSERT(
        -: 1211:          _status == Fw::FW_SERIALIZE_OK,
        -: 1212:          static_cast<NATIVE_INT_TYPE>(_status)
      216: 1213:      );
        -: 1214:
        -: 1215:
        -: 1216:      this->m_Log_OutputPort[0].invoke(
        -: 1217:          _id,
        -: 1218:          _logTime,Fw::LOG_WARNING_HI,
        -: 1219:          _logBuff
      108: 1220:      );
        -: 1221:
        -: 1222:    }
        -: 1223:
        -: 1224:    // Emit the event on the text log port
        -: 1225:#if FW_ENABLE_TEXT_LOGGING
      108: 1226:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1227:
        -: 1228:#if FW_OBJECT_NAMES == 1
        -: 1229:      const char* _formatString =
      108: 1230:        "(%s) %s: Parameter write failed in stage %d with error %d";
        -: 1231:#else
        -: 1232:      const char* _formatString =
        -: 1233:        "%s: Parameter write failed in stage %d with error %d";
        -: 1234:#endif
        -: 1235:
        -: 1236:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1237:
        -: 1238:      (void) snprintf(
        -: 1239:          _textBuffer,
        -: 1240:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1241:          _formatString,
        -: 1242:#if FW_OBJECT_NAMES == 1
        -: 1243:          this->m_objName,
        -: 1244:#endif
        -: 1245:          "PrmFileWriteError "
        -: 1246:        , stage
        -: 1247:        , record
        -: 1248:        , error
      108: 1249:      );
        -: 1250:
        -: 1251:      // Null terminate
      108: 1252:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      108: 1253:      Fw::TextLogString _logString = _textBuffer;
        -: 1254:      this->m_LogText_OutputPort[0].invoke(
        -: 1255:          _id,
        -: 1256:          _logTime,Fw::TEXT_LOG_WARNING_HI,
        -: 1257:          _logString
      108: 1258:      );
        -: 1259:
      108: 1260:    }
        -: 1261:#endif
        -: 1262:
      108: 1263:  }
        -: 1264:
       12: 1265:  void PrmDbComponentBase ::
        -: 1266:    log_ACTIVITY_HI_PrmFileSaveComplete(
        -: 1267:        U32 records
        -: 1268:    )
        -: 1269:  {
        -: 1270:
        -: 1271:    // Get the time
       12: 1272:    Fw::Time _logTime;
       12: 1273:    if (this->m_Time_OutputPort[0].isConnected()) {
       12: 1274:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1275:    }
        -: 1276:    
       12: 1277:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1278:    
       12: 1279:    _id = EVENTID_PRMFILESAVECOMPLETE;
        -: 1280:
        -: 1281:    // Emit the event on the log port
       12: 1282:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1283:
       12: 1284:      Fw::LogBuffer _logBuff;
        -: 1285:      Fw::SerializeStatus _status;
        -: 1286:
        -: 1287:#if FW_AMPCS_COMPATIBLE
        -: 1288:      // Serialize the number of arguments
        -: 1289:      _status = _logBuff.serialize(static_cast<U8>(1));
        -: 1290:      FW_ASSERT(
        -: 1291:          _status == Fw::FW_SERIALIZE_OK,
        -: 1292:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1293:      );
        -: 1294:#endif
        -: 1295:
        -: 1296:#if FW_AMPCS_COMPATIBLE
        -: 1297:      // Serialize the argument size
        -: 1298:      _status = _logBuff.serialize(
        -: 1299:          static_cast<U8>(sizeof(records))
        -: 1300:      );
        -: 1301:      FW_ASSERT(
        -: 1302:          _status == Fw::FW_SERIALIZE_OK,
        -: 1303:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1304:      );
        -: 1305:#endif
        -: 1306:
       12: 1307:      _status = _logBuff.serialize(records);
       12: 1308:      FW_ASSERT(
        -: 1309:          _status == Fw::FW_SERIALIZE_OK,
        -: 1310:          static_cast<NATIVE_INT_TYPE>(_status)
       24: 1311:      );
        -: 1312:
        -: 1313:
        -: 1314:      this->m_Log_OutputPort[0].invoke(
        -: 1315:          _id,
        -: 1316:          _logTime,Fw::LOG_ACTIVITY_HI,
        -: 1317:          _logBuff
       12: 1318:      );
        -: 1319:
        -: 1320:    }
        -: 1321:
        -: 1322:    // Emit the event on the text log port
        -: 1323:#if FW_ENABLE_TEXT_LOGGING
       12: 1324:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1325:
        -: 1326:#if FW_OBJECT_NAMES == 1
        -: 1327:      const char* _formatString =
       12: 1328:        "(%s) %s: Parameter file save completed. Wrote %d records.";
        -: 1329:#else
        -: 1330:      const char* _formatString =
        -: 1331:        "%s: Parameter file save completed. Wrote %d records.";
        -: 1332:#endif
        -: 1333:
        -: 1334:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1335:
        -: 1336:      (void) snprintf(
        -: 1337:          _textBuffer,
        -: 1338:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1339:          _formatString,
        -: 1340:#if FW_OBJECT_NAMES == 1
        -: 1341:          this->m_objName,
        -: 1342:#endif
        -: 1343:          "PrmFileSaveComplete "
        -: 1344:        , records
       12: 1345:      );
        -: 1346:
        -: 1347:      // Null terminate
       12: 1348:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
       12: 1349:      Fw::TextLogString _logString = _textBuffer;
        -: 1350:      this->m_LogText_OutputPort[0].invoke(
        -: 1351:          _id,
        -: 1352:          _logTime,Fw::TEXT_LOG_ACTIVITY_HI,
        -: 1353:          _logString
       12: 1354:      );
        -: 1355:
       12: 1356:    }
        -: 1357:#endif
        -: 1358:
       12: 1359:  }
        -: 1360:
      132: 1361:  void PrmDbComponentBase ::
        -: 1362:    log_WARNING_HI_PrmFileReadError(
        -: 1363:        LogReadError stage, I32 record, I32 error
        -: 1364:    )
        -: 1365:  {
        -: 1366:
        -: 1367:    // Get the time
      132: 1368:    Fw::Time _logTime;
      132: 1369:    if (this->m_Time_OutputPort[0].isConnected()) {
      132: 1370:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1371:    }
        -: 1372:    
      132: 1373:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1374:    
      132: 1375:    _id = EVENTID_PRMFILEREADERROR;
        -: 1376:
        -: 1377:    // Emit the event on the log port
      132: 1378:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1379:
      132: 1380:      Fw::LogBuffer _logBuff;
        -: 1381:      Fw::SerializeStatus _status;
        -: 1382:
        -: 1383:#if FW_AMPCS_COMPATIBLE
        -: 1384:      // Serialize the number of arguments
        -: 1385:      _status = _logBuff.serialize(static_cast<U8>(3));
        -: 1386:      FW_ASSERT(
        -: 1387:          _status == Fw::FW_SERIALIZE_OK,
        -: 1388:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1389:      );
        -: 1390:#endif
        -: 1391:
        -: 1392:#if FW_AMPCS_COMPATIBLE
        -: 1393:      // Serialize the argument size
        -: 1394:      _status = _logBuff.serialize(static_cast<U8>(sizeof(FwEnumStoreType)));
        -: 1395:      FW_ASSERT(
        -: 1396:          _status == Fw::FW_SERIALIZE_OK,
        -: 1397:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1398:      );
        -: 1399:#endif
        -: 1400:
        -: 1401:      _status = _logBuff.serialize(
        -: 1402:          static_cast<FwEnumStoreType>(stage)
      132: 1403:      );
      132: 1404:      FW_ASSERT(
        -: 1405:          _status == Fw::FW_SERIALIZE_OK,
        -: 1406:          static_cast<NATIVE_INT_TYPE>(_status)
      264: 1407:      );
        -: 1408:
        -: 1409:#if FW_AMPCS_COMPATIBLE
        -: 1410:      // Serialize the argument size
        -: 1411:      _status = _logBuff.serialize(
        -: 1412:          static_cast<U8>(sizeof(record))
        -: 1413:      );
        -: 1414:      FW_ASSERT(
        -: 1415:          _status == Fw::FW_SERIALIZE_OK,
        -: 1416:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1417:      );
        -: 1418:#endif
        -: 1419:
      132: 1420:      _status = _logBuff.serialize(record);
      132: 1421:      FW_ASSERT(
        -: 1422:          _status == Fw::FW_SERIALIZE_OK,
        -: 1423:          static_cast<NATIVE_INT_TYPE>(_status)
      264: 1424:      );
        -: 1425:
        -: 1426:#if FW_AMPCS_COMPATIBLE
        -: 1427:      // Serialize the argument size
        -: 1428:      _status = _logBuff.serialize(
        -: 1429:          static_cast<U8>(sizeof(error))
        -: 1430:      );
        -: 1431:      FW_ASSERT(
        -: 1432:          _status == Fw::FW_SERIALIZE_OK,
        -: 1433:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1434:      );
        -: 1435:#endif
        -: 1436:
      132: 1437:      _status = _logBuff.serialize(error);
      132: 1438:      FW_ASSERT(
        -: 1439:          _status == Fw::FW_SERIALIZE_OK,
        -: 1440:          static_cast<NATIVE_INT_TYPE>(_status)
      264: 1441:      );
        -: 1442:
        -: 1443:
        -: 1444:      this->m_Log_OutputPort[0].invoke(
        -: 1445:          _id,
        -: 1446:          _logTime,Fw::LOG_WARNING_HI,
        -: 1447:          _logBuff
      132: 1448:      );
        -: 1449:
        -: 1450:    }
        -: 1451:
        -: 1452:    // Emit the event on the text log port
        -: 1453:#if FW_ENABLE_TEXT_LOGGING
      132: 1454:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1455:
        -: 1456:#if FW_OBJECT_NAMES == 1
        -: 1457:      const char* _formatString =
      132: 1458:        "(%s) %s: Parameter file read failed in stage %d with error %d";
        -: 1459:#else
        -: 1460:      const char* _formatString =
        -: 1461:        "%s: Parameter file read failed in stage %d with error %d";
        -: 1462:#endif
        -: 1463:
        -: 1464:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1465:
        -: 1466:      (void) snprintf(
        -: 1467:          _textBuffer,
        -: 1468:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1469:          _formatString,
        -: 1470:#if FW_OBJECT_NAMES == 1
        -: 1471:          this->m_objName,
        -: 1472:#endif
        -: 1473:          "PrmFileReadError "
        -: 1474:        , stage
        -: 1475:        , record
        -: 1476:        , error
      132: 1477:      );
        -: 1478:
        -: 1479:      // Null terminate
      132: 1480:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      132: 1481:      Fw::TextLogString _logString = _textBuffer;
        -: 1482:      this->m_LogText_OutputPort[0].invoke(
        -: 1483:          _id,
        -: 1484:          _logTime,Fw::TEXT_LOG_WARNING_HI,
        -: 1485:          _logString
      132: 1486:      );
        -: 1487:
      132: 1488:    }
        -: 1489:#endif
        -: 1490:
      132: 1491:  }
        -: 1492:
       12: 1493:  void PrmDbComponentBase ::
        -: 1494:    log_ACTIVITY_HI_PrmFileLoadComplete(
        -: 1495:        U32 records
        -: 1496:    )
        -: 1497:  {
        -: 1498:
        -: 1499:    // Get the time
       12: 1500:    Fw::Time _logTime;
       12: 1501:    if (this->m_Time_OutputPort[0].isConnected()) {
       12: 1502:      _logTime = this->m_Time_OutputPort[0].invoke();
        -: 1503:    }
        -: 1504:    
       12: 1505:    FwEventIdType _id = static_cast<FwEventIdType>(0);
        -: 1506:    
       12: 1507:    _id = EVENTID_PRMFILELOADCOMPLETE;
        -: 1508:
        -: 1509:    // Emit the event on the log port
       12: 1510:    if (this->m_Log_OutputPort[0].isConnected()) {
        -: 1511:
       12: 1512:      Fw::LogBuffer _logBuff;
        -: 1513:      Fw::SerializeStatus _status;
        -: 1514:
        -: 1515:#if FW_AMPCS_COMPATIBLE
        -: 1516:      // Serialize the number of arguments
        -: 1517:      _status = _logBuff.serialize(static_cast<U8>(1));
        -: 1518:      FW_ASSERT(
        -: 1519:          _status == Fw::FW_SERIALIZE_OK,
        -: 1520:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1521:      );
        -: 1522:#endif
        -: 1523:
        -: 1524:#if FW_AMPCS_COMPATIBLE
        -: 1525:      // Serialize the argument size
        -: 1526:      _status = _logBuff.serialize(
        -: 1527:          static_cast<U8>(sizeof(records))
        -: 1528:      );
        -: 1529:      FW_ASSERT(
        -: 1530:          _status == Fw::FW_SERIALIZE_OK,
        -: 1531:          static_cast<NATIVE_INT_TYPE>(_status)
        -: 1532:      );
        -: 1533:#endif
        -: 1534:
       12: 1535:      _status = _logBuff.serialize(records);
       12: 1536:      FW_ASSERT(
        -: 1537:          _status == Fw::FW_SERIALIZE_OK,
        -: 1538:          static_cast<NATIVE_INT_TYPE>(_status)
       24: 1539:      );
        -: 1540:
        -: 1541:
        -: 1542:      this->m_Log_OutputPort[0].invoke(
        -: 1543:          _id,
        -: 1544:          _logTime,Fw::LOG_ACTIVITY_HI,
        -: 1545:          _logBuff
       12: 1546:      );
        -: 1547:
        -: 1548:    }
        -: 1549:
        -: 1550:    // Emit the event on the text log port
        -: 1551:#if FW_ENABLE_TEXT_LOGGING
       12: 1552:    if (this->m_LogText_OutputPort[0].isConnected()) {
        -: 1553:
        -: 1554:#if FW_OBJECT_NAMES == 1
        -: 1555:      const char* _formatString =
       12: 1556:        "(%s) %s: Parameter file load completed. Read %d records.";
        -: 1557:#else
        -: 1558:      const char* _formatString =
        -: 1559:        "%s: Parameter file load completed. Read %d records.";
        -: 1560:#endif
        -: 1561:
        -: 1562:      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];
        -: 1563:
        -: 1564:      (void) snprintf(
        -: 1565:          _textBuffer,
        -: 1566:          FW_LOG_TEXT_BUFFER_SIZE,
        -: 1567:          _formatString,
        -: 1568:#if FW_OBJECT_NAMES == 1
        -: 1569:          this->m_objName,
        -: 1570:#endif
        -: 1571:          "PrmFileLoadComplete "
        -: 1572:        , records
       12: 1573:      );
        -: 1574:
        -: 1575:      // Null terminate
       12: 1576:      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
       12: 1577:      Fw::TextLogString _logString = _textBuffer;
        -: 1578:      this->m_LogText_OutputPort[0].invoke(
        -: 1579:          _id,
        -: 1580:          _logTime,Fw::TEXT_LOG_ACTIVITY_HI,
        -: 1581:          _logString
       12: 1582:      );
        -: 1583:
       12: 1584:    }
        -: 1585:#endif
        -: 1586:
       12: 1587:  }
        -: 1588:
        -: 1589:  // ----------------------------------------------------------------------
        -: 1590:  // Mutex functions for guarded ports
        -: 1591:  // ----------------------------------------------------------------------
        -: 1592:
      756: 1593:  void PrmDbComponentBase ::
        -: 1594:    lock(void)
        -: 1595:  {
      756: 1596:    this->m_guardedPortMutex.lock();
      756: 1597:  }
        -: 1598:
      756: 1599:  void PrmDbComponentBase ::
        -: 1600:    unLock(void)
        -: 1601:  {
      756: 1602:    this->m_guardedPortMutex.unLock();
      756: 1603:  }
        -: 1604:
        -: 1605:  // ----------------------------------------------------------------------
        -: 1606:  // Calls for messages received on typed input ports
        -: 1607:  // ----------------------------------------------------------------------
        -: 1608:
      156: 1609:  Fw::ParamValid PrmDbComponentBase ::
        -: 1610:    m_p_getPrm_in(
        -: 1611:        Fw::PassiveComponentBase* callComp,
        -: 1612:        NATIVE_INT_TYPE portNum,
        -: 1613:        FwPrmIdType id, Fw::ParamBuffer &val
        -: 1614:    )
        -: 1615:  {
      156: 1616:    FW_ASSERT(callComp);
        -: 1617:    PrmDbComponentBase* compPtr =
      156: 1618:      (PrmDbComponentBase*) callComp;
      156: 1619:    return compPtr->getPrm_handlerBase(portNum, id, val);
        -: 1620:  }
        -: 1621:
      492: 1622:  void PrmDbComponentBase ::
        -: 1623:    m_p_setPrm_in(
        -: 1624:        Fw::PassiveComponentBase* callComp,
        -: 1625:        NATIVE_INT_TYPE portNum,
        -: 1626:        FwPrmIdType id, Fw::ParamBuffer &val
        -: 1627:    )
        -: 1628:  {
      492: 1629:    FW_ASSERT(callComp);
        -: 1630:    PrmDbComponentBase* compPtr =
      492: 1631:      (PrmDbComponentBase*) callComp;
      492: 1632:    compPtr->setPrm_handlerBase(portNum, id, val);
      492: 1633:  }
        -: 1634:
        -: 1635:  // ----------------------------------------------------------------------
        -: 1636:  // Port handler base-class functions for typed input ports
        -: 1637:  // ----------------------------------------------------------------------
        -: 1638:
      156: 1639:  Fw::ParamValid PrmDbComponentBase ::
        -: 1640:    getPrm_handlerBase(
        -: 1641:        NATIVE_INT_TYPE portNum,
        -: 1642:        FwPrmIdType id, Fw::ParamBuffer &val
        -: 1643:    )
        -: 1644:  {
        -: 1645:
        -: 1646:    // Make sure port number is valid
      156: 1647:    FW_ASSERT(portNum < this->getNum_getPrm_InputPorts());
        -: 1648:    Fw::ParamValid  retVal;
        -: 1649:
        -: 1650:    // Lock guard mutex before calling
      156: 1651:    this->lock();
        -: 1652:
        -: 1653:    // Down call to pure virtual handler method implemented in Impl class
      156: 1654:    retVal = this->getPrm_handler(portNum, id, val);
        -: 1655:
        -: 1656:    // Unlock guard mutex
      156: 1657:    this->unLock();
        -: 1658:
      156: 1659:    return retVal;
        -: 1660:
        -: 1661:  }
        -: 1662:
      492: 1663:  void PrmDbComponentBase ::
        -: 1664:    setPrm_handlerBase(
        -: 1665:        NATIVE_INT_TYPE portNum,
        -: 1666:        FwPrmIdType id, Fw::ParamBuffer &val
        -: 1667:    )
        -: 1668:  {
        -: 1669:
        -: 1670:    // Make sure port number is valid
      492: 1671:    FW_ASSERT(portNum < this->getNum_setPrm_InputPorts());
        -: 1672:
        -: 1673:    // Call pre-message hook
        -: 1674:    setPrm_preMsgHook(
        -: 1675:        portNum,
        -: 1676:        id, val
      492: 1677:    );
        -: 1678:
      492: 1679:    ComponentIpcSerializableBuffer msg;
        -: 1680:    Fw::SerializeStatus _status;
        -: 1681:
        -: 1682:    _status = msg.serialize(
        -: 1683:        static_cast<NATIVE_INT_TYPE>(SETPRM_PRMSET)
      492: 1684:    );
      492: 1685:    FW_ASSERT (
        -: 1686:        _status == Fw::FW_SERIALIZE_OK,
        -: 1687:        static_cast<NATIVE_INT_TYPE>(_status)
      984: 1688:    );
        -: 1689:
      492: 1690:    _status = msg.serialize(portNum);
      492: 1691:    FW_ASSERT (
        -: 1692:        _status == Fw::FW_SERIALIZE_OK,
        -: 1693:        static_cast<NATIVE_INT_TYPE>(_status)
      984: 1694:    );
        -: 1695:
        -: 1696:    // Serialize argument id
      492: 1697:    _status = msg.serialize(id);
      492: 1698:    FW_ASSERT(
        -: 1699:        _status == Fw::FW_SERIALIZE_OK,
        -: 1700:        static_cast<NATIVE_INT_TYPE>(_status)
      984: 1701:    );
        -: 1702:
        -: 1703:    // Serialize argument val
      492: 1704:    _status = msg.serialize(val);
      492: 1705:    FW_ASSERT(
        -: 1706:        _status == Fw::FW_SERIALIZE_OK,
        -: 1707:        static_cast<NATIVE_INT_TYPE>(_status)
      984: 1708:    );
        -: 1709:
        -: 1710:    Os::Queue::QueueStatus qStatus =
      492: 1711:      this->m_queue.send(msg, 0);
      492: 1712:    FW_ASSERT(
        -: 1713:        qStatus == Os::Queue::QUEUE_OK,
        -: 1714:        static_cast<NATIVE_INT_TYPE>(qStatus)
     1476: 1715:    );
      492: 1716:  }
        -: 1717:
        -: 1718:  // ----------------------------------------------------------------------
        -: 1719:  // Pre-message hooks for async input ports
        -: 1720:  // ----------------------------------------------------------------------
        -: 1721:
      492: 1722:  void PrmDbComponentBase ::
        -: 1723:    setPrm_preMsgHook(
        -: 1724:        NATIVE_INT_TYPE portNum,
        -: 1725:        FwPrmIdType id, Fw::ParamBuffer &val
        -: 1726:    )
        -: 1727:  {
        -: 1728:    // Default: no-op
      492: 1729:  }
        -: 1730:
        -: 1731:  // ----------------------------------------------------------------------
        -: 1732:  // Message dispatch method for active and queued components. Called
        -: 1733:  // by active component thread or implementation code for queued components
        -: 1734:  // ----------------------------------------------------------------------
        -: 1735:
      612: 1736:  Fw::QueuedComponentBase::MsgDispatchStatus PrmDbComponentBase ::
        -: 1737:    doDispatch(void)
        -: 1738:  {
        -: 1739:
      612: 1740:    ComponentIpcSerializableBuffer msg;
        -: 1741:    NATIVE_INT_TYPE priority;
        -: 1742:
      612: 1743:    Os::Queue::QueueStatus msgStatus = this->m_queue.receive(msg,priority);
      612: 1744:    FW_ASSERT(
        -: 1745:        msgStatus == Os::Queue::QUEUE_OK,
        -: 1746:        static_cast<NATIVE_INT_TYPE>(msgStatus)
     1224: 1747:    );
        -: 1748:
        -: 1749:    // Reset to beginning of buffer
      612: 1750:    msg.resetDeser();
        -: 1751:
        -: 1752:    NATIVE_INT_TYPE desMsg;
      612: 1753:    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
      612: 1754:    FW_ASSERT(
        -: 1755:        deserStatus == Fw::FW_SERIALIZE_OK,
        -: 1756:        static_cast<NATIVE_INT_TYPE>(deserStatus)
     1224: 1757:    );
        -: 1758:
      612: 1759:    MsgTypeEnum msgType = static_cast<MsgTypeEnum>(desMsg);
        -: 1760:
      612: 1761:    if (msgType == PRMDB_COMPONENT_EXIT) {
    #####: 1762:      return MSG_DISPATCH_EXIT;
        -: 1763:    }
        -: 1764:
        -: 1765:    NATIVE_INT_TYPE portNum;
      612: 1766:    deserStatus = msg.deserialize(portNum);
      612: 1767:    FW_ASSERT(
        -: 1768:        deserStatus == Fw::FW_SERIALIZE_OK,
        -: 1769:        static_cast<NATIVE_INT_TYPE>(deserStatus)
     1224: 1770:    );
        -: 1771:
      612: 1772:    switch (msgType) {
        -: 1773:
        -: 1774:      // Handle async input port setPrm
        -: 1775:      case SETPRM_PRMSET: {
        -: 1776:
        -: 1777:        // Deserialize argument id
        -: 1778:        FwPrmIdType id;
      492: 1779:        deserStatus = msg.deserialize(id);
      492: 1780:        FW_ASSERT(
        -: 1781:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 1782:            static_cast<NATIVE_INT_TYPE>(deserStatus)
      984: 1783:        );
        -: 1784:
        -: 1785:        // Deserialize argument val
      492: 1786:        Fw::ParamBuffer val;
      492: 1787:        deserStatus = msg.deserialize(val);
      492: 1788:        FW_ASSERT(
        -: 1789:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 1790:            static_cast<NATIVE_INT_TYPE>(deserStatus)
      984: 1791:        );
        -: 1792:
        -: 1793:        // Call handler function
        -: 1794:        this->setPrm_handler(
        -: 1795:            portNum,
        -: 1796:            id, val
      492: 1797:        );
        -: 1798:
      492: 1799:        break;
        -: 1800:
        -: 1801:      }
        -: 1802:
        -: 1803:      // Handle command PRM_SAVE_FILE
        -: 1804:      case CMD_PRM_SAVE_FILE: {
        -: 1805:        // Deserialize opcode
        -: 1806:        FwOpcodeType opCode;
      120: 1807:        deserStatus = msg.deserialize(opCode);
      120: 1808:        FW_ASSERT (
        -: 1809:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 1810:            static_cast<NATIVE_INT_TYPE>(deserStatus)
      240: 1811:        );
        -: 1812:
        -: 1813:        // Deserialize command sequence
        -: 1814:        U32 cmdSeq;
      120: 1815:        deserStatus = msg.deserialize(cmdSeq);
      120: 1816:        FW_ASSERT (
        -: 1817:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 1818:            static_cast<NATIVE_INT_TYPE>(deserStatus)
      240: 1819:        );
        -: 1820:
        -: 1821:        // Deserialize command argument buffer
      120: 1822:        Fw::CmdArgBuffer args;
      120: 1823:        deserStatus = msg.deserialize(args);
      120: 1824:        FW_ASSERT (
        -: 1825:            deserStatus == Fw::FW_SERIALIZE_OK,
        -: 1826:            static_cast<NATIVE_INT_TYPE>(deserStatus)
      240: 1827:        );
        -: 1828:
        -: 1829:        // Reset buffer
      120: 1830:        args.resetDeser();
        -: 1831:
        -: 1832:        // Make sure there was no data left over.
        -: 1833:        // That means the argument buffer size was incorrect.
      120: 1834:        if (args.getBuffLeft() != 0) {
    #####: 1835:          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
    #####: 1836:            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_FORMAT_ERROR);
        -: 1837:          }
        -: 1838:          // Don't crash the task if bad arguments were passed from the ground
    #####: 1839:          break;
        -: 1840:        }
        -: 1841:
        -: 1842:        // Call handler function
      120: 1843:        this->PRM_SAVE_FILE_cmdHandler(opCode, cmdSeq);
        -: 1844:
      120: 1845:        break;
        -: 1846:
        -: 1847:      }
        -: 1848:
        -: 1849:      default:
    #####: 1850:        return MSG_DISPATCH_ERROR;
        -: 1851:
        -: 1852:    }
        -: 1853:
      612: 1854:    return MSG_DISPATCH_OK;
        -: 1855:
        -: 1856:  }
        -: 1857:
        -: 1858:}
        -: 1859:
