        -:    0:Source:/home/tcanham/source/isf/Svc/RateGroupDriver/RateGroupDriverComponentAc.cpp
        -:    0:Programs:4
        -:    1:#include <stdio.h>
        -:    2:#include <Fw/Cfg/Config.hpp>
        -:    3:#include <Svc/RateGroupDriver/RateGroupDriverComponentAc.hpp>
        -:    4:#include <Fw/Types/Assert.hpp>
        -:    5:
        -:    6:#if FW_ENABLE_TEXT_LOGGING
        -:    7:#include <Fw/Types/EightyCharString.hpp>
        -:    8:#endif
        -:    9:// Namespace code
        -:   10:namespace Svc {
        -:   11:
        -:   12:// public methods
        -:   13:
        2:   14:    Svc::InputCyclePort *RateGroupDriverComponentBase::get_CycleIn_InputPort(NATIVE_INT_TYPE portNum) {
        2:   15:        FW_ASSERT(portNum < this->getNum_CycleIn_InputPorts());
        2:   16:        return &this->m_CycleIn_InputPort[portNum];
        -:   17:    }
        6:   18:    void RateGroupDriverComponentBase::set_CycleOut_OutputPort(NATIVE_INT_TYPE portNum, Svc::InputCyclePort* port) {
        6:   19:        FW_ASSERT(portNum < this->getNum_CycleOut_OutputPorts());        
        6:   20:        this->m_CycleOut_OutputPort[portNum].addCallPort(port);
        6:   21:    }
        -:   22:
        -:   23:#if FW_PORT_SERIALIZATION
        -:   24:
    #####:   25:    void RateGroupDriverComponentBase::set_CycleOut_OutputPort(NATIVE_INT_TYPE portNum, Fw::InputSerializePort *port) {
    #####:   26:        FW_ASSERT(portNum < this->getNum_CycleOut_OutputPorts());
    #####:   27:        return this->m_CycleOut_OutputPort[portNum].registerSerialPort(port);
        -:   28:    }
        -:   29:#endif
        -:   30:
        -:   31:   
        -:   32:
        -:   33:// protected methods
        -:   34:#if FW_OBJECT_NAMES == 1
        2:   35:    RateGroupDriverComponentBase::RateGroupDriverComponentBase(const char* compName) : Fw::PassiveComponentBase(compName) {
        -:   36:#else
        -:   37:    RateGroupDriverComponentBase::RateGroupDriverComponentBase() : Fw::PassiveComponentBase() {
        -:   38:#endif
        2:   39:}
        -:   40:
        -:   41:
        2:   42:    void RateGroupDriverComponentBase::init(NATIVE_INT_TYPE instance) {
        -:   43:
        -:   44:
        -:   45:	    // initialize base class
        2:   46:		Fw::PassiveComponentBase::init(instance);
        -:   47:        // Input ports attached to component here with external component interfaces
        4:   48:        for (NATIVE_INT_TYPE port = 0; port < this->getNum_CycleIn_InputPorts(); port++) {
        2:   49:            this->m_CycleIn_InputPort[port].init();
        -:   50:           
        2:   51:            this->m_CycleIn_InputPort[port].addCallComp(this, m_p_CycleIn_in);
        -:   52:           
        2:   53:            this->m_CycleIn_InputPort[port].setPortNum(port);
        -:   54:#if FW_OBJECT_NAMES == 1     
        -:   55:            char portName[80];
        2:   56:            (void)snprintf(portName, sizeof(portName), "%s_CycleIn_InputPort[%d]", this->m_objName, port);
        2:   57:            this->m_CycleIn_InputPort[port].setObjName(portName);
        -:   58:#endif
        -:   59:        }
        -:   60:
        -:   61:        // Set output ports
        8:   62:        for (NATIVE_INT_TYPE port = 0; port < this->getNum_CycleOut_OutputPorts(); port++) {
        6:   63:            this->m_CycleOut_OutputPort[port].init();
        -:   64:#if FW_OBJECT_NAMES == 1     
        -:   65:            char portName[80];
        6:   66:            (void)snprintf(portName, sizeof(portName), "%s_CycleOut_OutputPort[%d]", this->m_objName, port);
        6:   67:            this->m_CycleOut_OutputPort[port].setObjName(portName);
        -:   68:#endif      
        -:   69:        }
        -:   70:                
        -:   71:
        -:   72:
        2:   73:	}
        -:   74:
        2:   75:	RateGroupDriverComponentBase::~RateGroupDriverComponentBase() {
        2:   76:	}
        -:   77:
        -:   78:    // Up-calls, calls for output ports
        -:   79:
      220:   80:    void RateGroupDriverComponentBase::CycleOut_out(NATIVE_INT_TYPE portNum, Svc::TimerVal cycle_start) {
      220:   81:        FW_ASSERT(portNum < this->getNum_CycleOut_OutputPorts());
      220:   82:        m_CycleOut_OutputPort[portNum].invoke(cycle_start);
      220:   83:    }
      126:   84:    NATIVE_INT_TYPE RateGroupDriverComponentBase::getNum_CycleIn_InputPorts(void) {
      126:   85:        return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(this->m_CycleIn_InputPort);
        -:   86:    }
      596:   87:    NATIVE_INT_TYPE RateGroupDriverComponentBase::getNum_CycleOut_OutputPorts(void) {
      596:   88:        return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(this->m_CycleOut_OutputPort);
        -:   89:    }
      360:   90:    bool RateGroupDriverComponentBase::isConnected_CycleOut_OutputPort(NATIVE_INT_TYPE portNum) {
      360:   91:         FW_ASSERT(portNum < this->getNum_CycleOut_OutputPorts(),portNum);
      360:   92:         return this->m_CycleOut_OutputPort[portNum].isConnected();
        -:   93:    }
        -:   94:
        -:   95:// private methods
        -:   96:
        -:   97:    // call for incoming port CycleIn
      120:   98:    void RateGroupDriverComponentBase::m_p_CycleIn_in(Fw::PassiveComponentBase* callComp, NATIVE_INT_TYPE portNum, Svc::TimerVal cycle_start) {
      120:   99:        FW_ASSERT(callComp);
      120:  100:        RateGroupDriverComponentBase* compPtr = (RateGroupDriverComponentBase*)callComp;
      120:  101:        compPtr->CycleIn_handlerBase(portNum, cycle_start);
      120:  102:    }
        -:  103:
      120:  104:    void RateGroupDriverComponentBase::CycleIn_handlerBase(NATIVE_INT_TYPE portNum, Svc::TimerVal cycle_start) {
        -:  105:
        -:  106:        // make sure port number is valid
      120:  107:        FW_ASSERT(portNum < this->getNum_CycleIn_InputPorts());
        -:  108:        // Down call to pure virtual handler method implemented in Impl class
      120:  109:        this->CycleIn_handler(portNum, cycle_start);
      120:  110:    }
        -:  111:
        -:  112:
        -:  113:}
        -:  114:
