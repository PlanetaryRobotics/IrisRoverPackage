        -:    0:Source:/home/tcanham/source/isf/Svc/RateGroupDriver/RateGroupDriverImpl.cpp
        -:    0:Programs:4
        -:    1:#include <Svc/RateGroupDriver/RateGroupDriverImpl.hpp>
        -:    2:#include <Fw/Types/BasicTypes.hpp>
        -:    3:#include <cstring>
        -:    4:#include <Fw/Types/Assert.hpp>
        -:    5:#include <stdio.h>
        -:    6:
        -:    7:namespace Svc {
        -:    8:
        -:    9:#if FW_OBJECT_NAMES == 1    
        2:   10:    RateGroupDriverImpl::RateGroupDriverImpl(const char* compName, I32 dividers[], I32 numDividers) :
        -:   11:        RateGroupDriverComponentBase(compName),
        -:   12:#else
        -:   13:    RateGroupDriverImpl::RateGroupDriverImpl(I32 dividers[], I32 numDividers) :
        -:   14:#endif
        2:   15:    m_ticks(0),m_rollover(1)
        -:   16:    {
        -:   17:
        -:   18:        // double check arguments
        2:   19:        FW_ASSERT(dividers);
        4:   20:        FW_ASSERT(numDividers <= static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_dividers)),
        -:   21:                numDividers,
        4:   22:                static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_dividers)));
        -:   23:        // verify port/table size matches
        4:   24:        FW_ASSERT(FW_NUM_ARRAY_ELEMENTS(this->m_dividers) == this->getNum_CycleOut_OutputPorts(),
        -:   25:                static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_dividers)),
        4:   26:                this->getNum_CycleOut_OutputPorts());
        -:   27:        // clear table
        2:   28:        ::memset(this->m_dividers,0,sizeof(this->m_dividers));
        8:   29:        for (NATIVE_INT_TYPE entry = 0; entry < numDividers; entry++) {
        6:   30:            this->m_dividers[entry] = dividers[entry];
        -:   31:            // rollover value should be product of all dividers to make sure integer rollover doesn't jump cycles
        -:   32:            // only use non-zero dividers
        6:   33:            if (dividers[entry] != 0) {
        6:   34:                this->m_rollover *= dividers[entry];
        -:   35:            }
        -:   36:        }
        -:   37:
        2:   38:    }
        -:   39:
        2:   40:    RateGroupDriverImpl::~RateGroupDriverImpl(void) {
        -:   41:
        2:   42:    }
        -:   43:    
        2:   44:    void RateGroupDriverImpl::init(void) {
        2:   45:        RateGroupDriverComponentBase::init();
        2:   46:    }
        -:   47:
      120:   48:    void RateGroupDriverImpl::CycleIn_handler(NATIVE_INT_TYPE portNum, Svc::TimerVal cycle_start) {
        -:   49:
        -:   50:        // Loop through each divider. For a given port, the port will be called when the divider value
        -:   51:        // divides evenly into the number of ticks. For example, if the divider value for a port is 4,
        -:   52:        // it would be called every fourth invocation of the CycleIn port.
      480:   53:        for (NATIVE_INT_TYPE entry = 0; entry < static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_dividers)); entry++) {
      360:   54:            if (this->m_dividers[entry] != 0) {
      360:   55:                if (this->isConnected_CycleOut_OutputPort(entry)) {
      360:   56:                    if ((this->m_ticks % this->m_dividers[entry]) == 0) {
      220:   57:                        this->CycleOut_out(entry,cycle_start);
        -:   58:                    }
        -:   59:                }
        -:   60:            }
        -:   61:        }
        -:   62:        
        -:   63:        // rollover the tick value when the tick count reaches the rollover value
        -:   64:        // the rollover value is the product of all the dividers. See comment in constructor.
      120:   65:        this->m_ticks = (this->m_ticks + 1) % this->m_rollover;
        -:   66:
      120:   67:    }
        -:   68:
        -:   69:}
