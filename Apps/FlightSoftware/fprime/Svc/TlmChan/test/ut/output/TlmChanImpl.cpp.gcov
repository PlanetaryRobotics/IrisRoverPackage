        -:    0:Source:/home/tim/source/isf/Svc/TlmChan/TlmChanImpl.cpp
        -:    0:Programs:5
        -:    1:/**
        -:    2: * \file
        -:    3: * \author T. Canham
        -:    4: * \brief Implementation file for channelized telemetry storage component
        -:    5: *
        -:    6: * \copyright
        -:    7: * Copyright 2009-2015, by the California Institute of Technology.
        -:    8: * ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9: * acknowledged.
        -:   11: * <br /><br />
        -:   18: */
        -:   19:#include <Svc/TlmChan/TlmChanImpl.hpp>
        -:   20:#include <cstring>
        -:   21:#include <Fw/Types/BasicTypes.hpp>
        -:   22:#include <Fw/Types/Assert.hpp>
        -:   23:#include <Fw/Com/ComBuffer.hpp>
        -:   24:
        -:   25:#include <stdio.h>
        -:   26:
        -:   27:namespace Svc {
        -:   28:
        -:   29:#if FW_OBJECT_NAMES == 1
        4:   30:    TlmChanImpl::TlmChanImpl(const char* name) : TlmChanComponentBase(name)
        -:   31:#else
        -:   32:    TlmChanImpl::TlmChanImpl()
        -:   33:#endif
        -:   34:    {
        -:   35:        // clear data
        4:   36:        this->m_activeBuffer = 0;
        -:   37:        // clear slot pointers
       64:   38:        for (NATIVE_UINT_TYPE entry = 0; entry < TLMCHAN_NUM_TLM_HASH_SLOTS; entry++) {
       60:   39:            this->m_tlmEntries[0].slots[entry] = 0;
       60:   40:            this->m_tlmEntries[1].slots[entry] = 0;
        -:   41:        }
        -:   42:        // clear buckets
      204:   43:        for (NATIVE_UINT_TYPE entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
      200:   44:            this->m_tlmEntries[0].buckets[entry].used = false;
      200:   45:            this->m_tlmEntries[0].buckets[entry].bucketNo = entry;
      200:   46:            this->m_tlmEntries[0].buckets[entry].next = 0;
      200:   47:            this->m_tlmEntries[0].buckets[entry].id = 0;
      200:   48:            this->m_tlmEntries[1].buckets[entry].used = false;
      200:   49:            this->m_tlmEntries[1].buckets[entry].bucketNo = entry;
      200:   50:            this->m_tlmEntries[1].buckets[entry].next = 0;
      200:   51:            this->m_tlmEntries[1].buckets[entry].id = 0;
        -:   52:        }
        -:   53:        // clear free index
        4:   54:        this->m_tlmEntries[0].free = 0;
        4:   55:        this->m_tlmEntries[1].free = 0;
        -:   56:
        -:   57:
        4:   58:    }
        -:   59:
        4:   60:    TlmChanImpl::~TlmChanImpl() {
        4:   61:    }
        -:   62:
        4:   63:    void TlmChanImpl::init(NATIVE_INT_TYPE queueDepth) {
        4:   64:        TlmChanComponentBase::init(queueDepth);
        4:   65:    }
        -:   66:
      149:   67:    NATIVE_UINT_TYPE TlmChanImpl::doHash(FwChanIdType id) {
      149:   68:        return (id % TLMCHAN_HASH_MOD_VALUE)%TLMCHAN_NUM_TLM_HASH_SLOTS;
        -:   69:    }
        -:   70:
        -:   71:}
