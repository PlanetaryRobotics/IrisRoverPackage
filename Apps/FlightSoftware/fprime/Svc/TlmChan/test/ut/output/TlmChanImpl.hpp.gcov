        -:    0:Source:/home/tim/source/isf/Svc/TlmChan/TlmChanImpl.hpp
        -:    0:Programs:5
        -:    1:/**
        -:    2: * \file
        -:    3: * \author T. Canham
        -:    4: * \brief Component that stores telemetry channel values
        -:    5: *
        -:    6: * \copyright
        -:    7: * Copyright 2009-2015, by the California Institute of Technology.
        -:    8: * ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9: * acknowledged.
        -:   11: * <br /><br />
        -:   18: */
        -:   19:
        -:   20:#ifndef TELEMCHANIMPL_HPP_
        -:   21:#define TELEMCHANIMPL_HPP_
        -:   22:
        -:   23:#include <Svc/TlmChan/TlmChanComponentAc.hpp>
        -:   24:#include <Svc/TlmChan/TlmChanImplCfg.hpp>
        -:   25:#include <Os/Mutex.hpp>
        -:   26:#include <Fw/Tlm/TlmPacket.hpp>
        -:   27:
        -:   28:namespace Svc {
        -:   29:
        -:   30:    class TlmChanImpl: public TlmChanComponentBase {
        -:   31:        public:
        -:   32:            friend class TlmChanImplTester;
        -:   33:    #if FW_OBJECT_NAMES == 1
        -:   34:            TlmChanImpl(const char* compName);
        -:   35:    #else
        -:   36:            TlmChanImpl();
        -:   37:    #endif
        -:   38:            virtual ~TlmChanImpl();
        -:   39:            void init(NATIVE_INT_TYPE queueDepth);
        -:   40:        PROTECTED:
        -:   41:
        -:   42:            // can be overridden for alternate algorithms
        -:   43:            virtual NATIVE_UINT_TYPE doHash(FwChanIdType id);
        -:   44:
        -:   45:        PRIVATE:
        -:   46:
        -:   47:            // Port functions
        -:   48:            void TlmRecv_handler(NATIVE_INT_TYPE portNum, FwChanIdType id, Fw::Time &timeTag, Fw::TlmBuffer &val);
        -:   49:            void TlmGet_handler(NATIVE_INT_TYPE portNum, FwChanIdType id, Fw::Time &timeTag, Fw::TlmBuffer &val);
        -:   50:            void Run_handler(NATIVE_INT_TYPE portNum, NATIVE_UINT_TYPE context);
        -:   51:
      800:   52:            typedef struct tlmEntry {
        -:   53:                FwChanIdType id; //!< telemetry id stored in slot
        -:   54:                bool updated; //!< set whenever a value has been written. Used to skip if writing out values for downlinking
        -:   55:                Fw::Time lastUpdate; //!< last updated time
        -:   56:                Fw::TlmBuffer buffer; //!< buffer to store serialized telemetry
        -:   57:                tlmEntry* next; //!< pointer to next bucket in table
        -:   58:                bool used; //!< if entry has been used
        -:   59:                NATIVE_UINT_TYPE bucketNo; //!< for testing
        -:   60:            } TlmEntry;
        -:   61:
       16:   62:            struct TlmSet {
        -:   63:                TlmEntry* slots[TLMCHAN_NUM_TLM_HASH_SLOTS]; //!< set of hash slots in hash table
        -:   64:                TlmEntry buckets[TLMCHAN_HASH_BUCKETS]; //!< set of buckets used in hash table
        -:   65:                NATIVE_INT_TYPE free; //!< next free bucket
        -:   66:            } m_tlmEntries[2];
        -:   67:
        -:   68:            U32 m_activeBuffer; // !< which buffer is active for storing telemetry
        -:   69:
        -:   70:            // work variables
        -:   71:            Fw::ComBuffer m_comBuffer;
        -:   72:            Fw::TlmPacket m_tlmPacket;
        -:   73:
        -:   74:    };
        -:   75:
        -:   76:}
        -:   77:
        -:   78:#endif /* TELEMCHANIMPL_HPP_ */
