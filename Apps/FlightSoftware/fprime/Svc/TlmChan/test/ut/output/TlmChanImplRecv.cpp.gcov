        -:    0:Source:/home/tim/source/isf/Svc/TlmChan/TlmChanImplRecv.cpp
        -:    0:Programs:5
        -:    1:/*
        -:    2: * TelemChanImpl.cpp
        -:    3: *
        -:    4: *  Created on: Mar 28, 2014
        -:    5: *      Author: tcanham
        -:    6: */
        -:    7:
        -:    8:#include <Svc/TlmChan/TlmChanImpl.hpp>
        -:    9:#include <cstring>
        -:   10:#include <Fw/Types/BasicTypes.hpp>
        -:   11:#include <Fw/Types/Assert.hpp>
        -:   12:
        -:   13:#include <stdio.h>
        -:   14:
        -:   15:namespace Svc {
        -:   16:
       74:   17:    void TlmChanImpl::TlmRecv_handler(NATIVE_INT_TYPE portNum, FwChanIdType id, Fw::Time &timeTag, Fw::TlmBuffer &val) {
        -:   18:
        -:   19:        // Compute index for entry
        -:   20:
       74:   21:        NATIVE_UINT_TYPE index = this->doHash(id);
       74:   22:        TlmEntry* entryToUse = 0;
       74:   23:        TlmEntry* prevEntry = 0;
        -:   24:
        -:   25:        // Search to see if channel has already been stored or a bucket needs to be added
       74:   26:        if (this->m_tlmEntries[this->m_activeBuffer].slots[index]) {
       42:   27:            entryToUse = this->m_tlmEntries[this->m_activeBuffer].slots[index];
      108:   28:            for (NATIVE_UINT_TYPE bucket = 0; bucket < TLMCHAN_HASH_BUCKETS; bucket++) {
      108:   29:                if (entryToUse) {
       67:   30:                    if (entryToUse->id == id) { // found the matching entry
        1:   31:                        break;
        -:   32:                    } else { // try next entry
       66:   33:                        prevEntry = entryToUse;
       66:   34:                        entryToUse = entryToUse->next;
        -:   35:                    }
        -:   36:                } else {
        -:   37:                    // Make sure that we haven't run out of buckets
       41:   38:                    FW_ASSERT(this->m_tlmEntries[this->m_activeBuffer].free < TLMCHAN_HASH_BUCKETS);
        -:   39:                    // add new bucket from free list
       41:   40:                    entryToUse = &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
       41:   41:                    prevEntry->next = entryToUse;
        -:   42:                    // clear next pointer
       41:   43:                    entryToUse->next = 0;
       41:   44:                    break;
        -:   45:                }
        -:   46:            }
        -:   47:        } else {
        -:   48:            // Make sure that we haven't run out of buckets
       32:   49:            FW_ASSERT(this->m_tlmEntries[this->m_activeBuffer].free < TLMCHAN_HASH_BUCKETS);
        -:   50:            // create new entry at slot head
       32:   51:            this->m_tlmEntries[this->m_activeBuffer].slots[index] = &this->m_tlmEntries[this->m_activeBuffer].buckets[this->m_tlmEntries[this->m_activeBuffer].free++];
       32:   52:            entryToUse = this->m_tlmEntries[this->m_activeBuffer].slots[index];
       32:   53:            entryToUse->next = 0;
        -:   54:        }
        -:   55:
        -:   56:        // copy into entry
       74:   57:        FW_ASSERT(entryToUse);
       74:   58:        entryToUse->used = true;
       74:   59:        entryToUse->id = id;
       74:   60:        entryToUse->updated = true;
       74:   61:        entryToUse->lastUpdate = timeTag;
       74:   62:        entryToUse->buffer = val;
        -:   63:
       74:   64:    }
        -:   65:}
