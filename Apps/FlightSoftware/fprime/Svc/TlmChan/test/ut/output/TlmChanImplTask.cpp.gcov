        -:    0:Source:/home/tim/source/isf/Svc/TlmChan/TlmChanImplTask.cpp
        -:    0:Programs:5
        -:    1:/**
        -:    2: * \file
        -:    3: * \author T. Canham
        -:    4: * \brief Implementation for telemetry channel component thread.
        -:    5: *
        -:    6: * \copyright
        -:    7: * Copyright 2009-2015, by the California Institute of Technology.
        -:    8: * ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9: * acknowledged.
        -:   11: * <br /><br />
        -:   18: */
        -:   19:
        -:   20:#include <Svc/TlmChan/TlmChanImpl.hpp>
        -:   21:#include <cstring>
        -:   22:#include <Fw/Types/BasicTypes.hpp>
        -:   23:#include <Fw/Types/Assert.hpp>
        -:   24:#include <Fw/Tlm/TlmPacket.hpp>
        -:   25:#include <Fw/Com/ComBuffer.hpp>
        -:   26:
        -:   27:#include <stdio.h>
        -:   28:
        -:   29:namespace Svc {
        -:   30:
        3:   31:    void TlmChanImpl::Run_handler(NATIVE_INT_TYPE portNum, NATIVE_UINT_TYPE context) {
        -:   32:        // Only write packets if connected
        3:   33:        if (not this->isConnected_PktSend_OutputPort(0)) {
        3:   34:            return;
        -:   35:        }
        -:   36:
        -:   37:        // lock mutex long enough to modify active telemetry buffer
        -:   38:        // so the data can be read without worrying about updates
        3:   39:        this->lock();
        3:   40:        this->m_activeBuffer = 1 - this->m_activeBuffer;
        -:   41:        // set activeBuffer to not updated
      153:   42:        for (U32 entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
      150:   43:            this->m_tlmEntries[this->m_activeBuffer].buckets[entry].updated = false;
        -:   44:        }
        3:   45:        this->unLock();
        -:   46:
        -:   47:        // go through each entry and send a packet if it has been updated
        -:   48:
      153:   49:        for (U32 entry = 0; entry < TLMCHAN_HASH_BUCKETS; entry++) {
      150:   50:            TlmEntry* p_entry = &this->m_tlmEntries[1-this->m_activeBuffer].buckets[entry];
      150:   51:            if ((p_entry->updated) && (p_entry->used)) {
       23:   52:                this->m_tlmPacket.setId(p_entry->id);
       23:   53:                this->m_tlmPacket.setTimeTag(p_entry->lastUpdate);
       23:   54:                this->m_tlmPacket.setTlmBuffer(p_entry->buffer);
       23:   55:                this->m_comBuffer.resetSer();
       23:   56:                Fw::SerializeStatus stat = this->m_tlmPacket.serialize(this->m_comBuffer);
       23:   57:                FW_ASSERT(Fw::FW_SERIALIZE_OK == stat,static_cast<NATIVE_INT_TYPE>(stat));
       23:   58:                p_entry->updated = false;
       23:   59:                this->PktSend_out(0,this->m_comBuffer,0);
        -:   60:            }
        -:   61:        }
        -:   62:    }
        -:   63:
        -:   64:}
