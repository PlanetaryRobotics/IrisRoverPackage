#!/usr/bin/perl

##############################################################################
### extract_symbols.perl
###
### Extract symbol names and types, report defined and undefined symbols
### using optional reference files.
###
### Really helpful for VxWorks builds, where you don't find out what's missing
### until you load the file on the target machine.
###
### Written Mark.Maimone@jpl.nasa.gov 16 August 2000
### Updated April - July 2002 to use reference files
### Minor tweaks in early 2005 to display hex addresses and update the command
### line parser.

### 1 April 2008 Updated to generalize input formats; now any file can
### be text symbols, cached nm output, or a binary file on which nm runs.

### 
# Extracts the list of unique undefined or global symbols from the output of
# your "nm"-style tool.  Optionally compares this list against symbols
# defined in other files.

use strict;

my($script) = $0;	# full path to this script
my($bn) = $0;		# Basename of this script
my($show_help) = 0;	# Display HELP message instead of processing files?
my($show_all) = 0;	# Display ALL symbols or just differences?
my($show_addrs) = 0;	# Show ADDRESSES of symbols too
my($choice);		# Select symbol type; $UNDEF, $GLOBAL, $DEFINED,
			#    $LOCAL
my(@refs);		# Filenames of input files
my(%st);		# Symbol table of globally defined symbols
my($nm) = "nm";		# name of the "nm"-like symbol extraction tool
my($verbose) = 0;	# write diagnostic info?
my(%addrs);

my($DEFINED) = "defined";
my($UNDEF) = "undefined";
my($GLOBAL) = "global";
my($LOCAL) = "local";

$bn =~ s:^.*/::;

print "ENV PATH is $ENV{'PATH'}\n"
    if $verbose;

##############################################################################
# Parse command line arguments
##############################################################################

while ($#ARGV >= 0) {
  if ($ARGV[0] =~ /^-h/i) {
    $show_help = 1;
    last;
  } elsif (!defined $choice && $ARGV[0] =~ /^u/i && ! -r $ARGV[0]) {
    $choice = $UNDEF;
  } elsif (!defined $choice && $ARGV[0] =~ /^g/i && ! -r $ARGV[0]) {
    $choice = $GLOBAL;
  } elsif (!defined $choice && $ARGV[0] =~ /^d/i && ! -r $ARGV[0]) {
    $choice = $DEFINED;
  } elsif (!defined $choice && $ARGV[0] =~ /^l/i && ! -r $ARGV[0]) {
    $choice = $LOCAL;
  } elsif ($#ARGV > 0 && $ARGV[0] =~ /^-n/i) {
    $nm = $ARGV[1];
    shift @ARGV;
  } elsif ($ARGV[0] =~ /^-a/i) {
    $show_addrs = 1;
  } elsif ($ARGV[0] =~ /^-v/i && $#ARGV && $ARGV[1] =~ /^\d+$/) {
    $verbose = $ARGV[1];
    shift @ARGV;
  } elsif ($ARGV[0] =~ /^-v/i) {
    $verbose = 1;
  } elsif (!defined $choice) {
    print STDERR "$0: Please specify DEFINED, UNDEF, GLOBAL or LOCAL symbols first\n";
    exit 1;
  } else {
    push @refs, $ARGV[0];
  }

  shift @ARGV;
}
    
##############################################################################
# Write a HELP message when needed
##############################################################################


if ($show_help || !defined $choice) {
  print STDERR <<"END";
$bn: Extract symbols from binary files

  This filter will summarize the symbol table of a binary file.  You
may ask for a list of UNDEFINED, DEFINED, GLOBAL, or LOCAL symbols
contained within a binary file.  You may optionally provide additional
REFERENCE files, whose DEFINED symbols will be removed from the list of
matched symbols found in the first binary file.  This is very handy for
VxWorks builds, as you can eliminate "undefined" references to
Operating System functions in your binary file.

  This script will extract symbols from the files you name using the
output of NM, the standard unix tool for dumping symbol table
information (or whatever nm tool is named on the command line).  This
script also supports reading two types of ASCII files; a list of
symbols (one per line), and cached output of the NM tool.  

  NM-style rows are expected to have one of two formats.  Either
"|"-separated entries with "GLOBAL" and "UNDEF" markers, or a
fixed-width space-separated format with 8 byte address or blanks,
followed by a one-byte tag (e.g., "u" for undef), and then the name of
the symbol.

  The first argument on the command line must be either UNDEF, GLOBAL,
DEFINED or LOCAL, indicating the type of summary you want to see.
Optional additional arguments name reference files; symbols matching
your specification found in the first file (or stdin) that are *not*
in the reference files will be listed on the output.  The exit status
is the number of symbols matching (or not matching) those found in the
reference file.

  The optional reference files may be raw objects or binary files, in
which case NM is automatically run on them.  Or it may be a text file
holding the cached, sorted global symbols extracted by this script
from the appropriate binary file (e.g., the vxWorks kernel).  This
script will treat any file whose first 100 lines contain more than 100
non-ascii characters as a binary file.

SWITCHES:
    -h,-help		Show this HELP message
    d,defined		Process DEFINED   symbols
    g,global		Process GLOBAL    symbols
    l,local		Process LOCAL     symbols
    u,undefined		Process UNDEFINED symbols
    -n,-nm tool		Set NM tool name
    -a,-addr		Show hex ADDRESSES on output
    -v,-verbose \#	Set VERBOSITY level [0-10]


USAGE:
	$bn ( u.* | l.* | g.* | d.* ) [ reference-file ... ]

    List all undefined symbols
	$bn undef  bin/r6kVx5.3/GridTest.so
    List all global symbols
	$bn global /proj/mer/vxWorks
    List only globally DEFINED symbols
	$bn defined lib/r6kVx5.3/libnav.a
    Compare undefined against global list:
	$bn u  bin/r6kVx5.3/GridTest.so ~/vxworks.globals
END
  exit 0;
}

##############################################################################
# If we're feeding in a file into STDIN, make it the first file in the list.
# That will be treated as the file of interest.
##############################################################################

if (! -t STDIN) {
  unshift @refs, "-";
}

##############################################################################
# Show all symbols, unless reference files were given, in which case
# show only the difference
##############################################################################

if (scalar(@refs) < 2) {
  $show_all = 1;
} else {
  $show_all = 0;
}

##############################################################################
# $refs[0] is the file you're mainly interested in (may be "-" for stdin).
# The others, if there are any, are reference files like the whole vxworks 
# operating system so that you don't complain about missing symbols
# that the operating system defines.
##############################################################################

my($f);
my($this_choice) = $choice;
my(@names);


for $f (0..$#refs) {
  my(@symbols) = extract_useful_symbols_from ($refs[$f], $this_choice);
  my($sym);
  my($count) = 0;

  if (scalar(@symbols) == 1 &&
      !defined $symbols[0]) {
    undef @symbols;
  }

  if (scalar(@symbols)) {

### First file is special, put its symbols into @names

    if (scalar(@names) == 0) {
      @names = @symbols;
      $count = scalar(@names);
    } else {

### All other files are for reference only, store their symbols in %st

      for $sym (@symbols) {
	chomp($sym);
	$st{$sym} = 1;
	$count++;
      }
    }
    $this_choice = $DEFINED;	# Want to store DEFINED symbols from ref files,
				# i.e. all but the first one.

  }

  print STDERR "Read $count useful symbols from $refs[$f]\n"
      if ($verbose);

}



##############################################################################
# Now the hash %st contains the names of all globally-defined symbols read
# from the reference files, and @names is the list of symbols we care about.
##############################################################################

##############################################################################
# Set a string indicating the type of the output
##############################################################################


my($sym);
my($last);
my($exitcode) = 0;

for $sym (sort @names) {
  if ($sym eq $last) {
    next;
  }
  my($addr) = $show_addrs ? sprintf "0x%08x  ", $addrs{$sym} : "";
  $last = $sym;
  if ($show_all) {
    print "$addr$sym\n";
  } elsif (!defined $st{$sym}) {
    print STDERR "*** $addr$choice: $sym\n";
    $exitcode++;
  }
}
##############################################################################
# Returns 0 on success, or number of interesting symbols on failure
##############################################################################

exit ($exitcode);


sub extract_useful_symbols_from {
  my($file, $choice) = @_;
  my(@symbols);

  print "== About to extract useful $choice symbols from \"$file\"\n"
      if $verbose;

### We have to make multiple passes through the file.  So if it's
### stdin, log it into a file.

  if ($file eq "-") {
    $file = "/tmp/#extract_symbols_$$";
    system ("cat > $file");
  }

  if (!open (FILE, $file)) {
    print STDERR "*** Failed to open \"$file\" for reading\n";
    exit 1;
  }
  my(@contents) = <FILE>;
  close FILE;
  my($non_ascii_count) = count_up_to_100_non_ascii (@contents);
  my($looks_like_ascii) = `file $file` =~ /ascii/i;


  if (scalar (@contents) < 1) {
    print "\"$file\" is empty, skipping it\n"
	if $verbose || $file !~ /^\/tmp\//;
    return undef;
  }

  printf " == \"$file\" non-ascii chars in first 100 lines = $non_ascii_count, \"file\" says %s\n",
  $looks_like_ascii ? "ASCII" : "non-ASCII"
      if $verbose;

### Determine the general type of each input file: ASCII or BINARY

  if ($non_ascii_count < 100 ||
      $looks_like_ascii) {

    if (scalar (@contents) < 1) {
      print "\"$file\" is empty, skipping it\n";
      return undef;
    }

### Assume it's a TEXT BASED FILE; either nm output or a list of
### symbols.  Guess which type by counting the mean and stddev of the
### number of items on each line.

    my($sum,$sumsq);
    my($max_line) = scalar(@contents);

    $max_line = 100
	if $max_line > 100;
    map {
      my($cols) = scalar(split(/ /, $contents[$_]));

      print "\"$_\" has $cols cols\n"
	  if $verbose > 4;
      $sum += $cols;
      $sumsq += $cols ** 2;
    } 0..$max_line;

    my($mean) = $sum / $max_line;
    my($variance) = $sumsq / $max_line - $mean ** 2;

    printf "There are at least %d lines, column sums %g, squared sum %g (cols/line mean $mean variance $variance)\n",
	scalar(@contents), $sum, $sumsq
	if $verbose;

    if ($mean < 1.3 &&
	$variance < 2) {

### Guessing it's a PLAIN TEXT LIST OF SYMBOLS      

      print " == \"$file\" looks like a PLAIN TEXT LIST OF SYMBOLS"
	  if $verbose;

      push @symbols, @contents;

      printf " == Extracted %d plain text symbols from \"$file\"\n",
      scalar(@symbols)
	  if $verbose;
    } else {

### Guessing it's a LOGGED COPY OF NM OUTPUT

      print " == \"$file\" looks like a LOGGED COPY OF NM-STYLE OUTPUT\n"
	  if $verbose;

      map {
	my($sym) = parse_gnm_line ($_, $choice);

	if (defined $sym) {
	  push @symbols, $sym;
	}
      } @contents;

      printf " == Extracted %d symbols from nm log inside \"$file\"\n",
      scalar(@symbols)
	  if $verbose;
    }
  } else {

### Assume it's a BINARY FILE that must be parsed by NM.

    print " == \"$file\" looks like a BINARY FILE we must run NM on\n"
	if $verbose;

    die "Cannot open $nm pipe for $f\n"
      unless open (REFS, "$nm $file|");

##############################################################################
# Process the raw output from NM run on this file
##############################################################################

    my($line);

    while ($line = <REFS>) {
      my($sym);

      $sym = parse_gnm_line ($line, $choice);
      if (defined $sym) {
	push @symbols, $sym;
      }
    }

    close REFS;

    printf " == Extracted %d symbols from nm output of \"$file\"\n",
    scalar(@symbols)
	if $verbose;
  }

  return @symbols;
}


### Return the number of non-ascii bytes in ALL the input parameters.
### If the number of inputs (nominally "lines") is more than 100, just
### stop at 100.

sub count_up_to_100_non_ascii {
  my($b) = \@_;
  my($i,$result);

  $result = 0;

#    print STDERR "COUNT NONASCII: $#{$b} lines\n";

  for ($i = 0; $i <= $#{$b} && $result < 100; $i++) {
    my(@c) = unpack "C*", $ {$b}[$i];
    my($j);
#        print  $ {$b}[$i];
    for $j (@c) {
      if ($j != 9 && $j != 10 && $j != 13 && ($j < 32 || $j > 127)) {
	#		print STDERR "$j ";
	$result++;
      }
    }
  }

#    print STDERR "RESULT: $result\n";
  return $result;
}



##############################################################################
### Parse one line of text from an "nm"-style tool.  Allow for one of
### two formats: either "|"-separated columns, or basic BSD-style
### (optional address, one-character tag, symbol name, separated by
### spaces)
##############################################################################

sub parse_gnm_line {
  my($line, $choice) = @_;
  my($result);

  chomp ($line);

  $result = undef;

# Data lines use "|" as a separator, so look for that
  if ($line =~ /\|/) {
    my(@a) = split /[| \t]+/, $line;

# Skip over certain compiler-specific symbols
    if ($a[$#a] =~ /_(save|rest)[gf]pr_/) {
      next;
    }

    my($addr) = $a[1];

# Remember all non-filenames tagged as "UNDEF" or "GLOB" depending on
# user choice
    if (($a[$#a-4] !~ /FILE/) &&
	(($choice eq $UNDEF && $a[$#a-1] =~ /UNDEF/) ||
	 ($choice eq $GLOBAL && $a[$#a-3] =~ /GLOB/)  ||
	 ($choice eq $LOCAL && $a[$#a-3] =~ /LOC/)  ||
	 ($choice eq $DEFINED && $a[$#a-3] =~ /GLOB/ && $a[$#a-1] !~ /UNDEF/))) {
      $result = $a[$#a];
      $addrs{$result} = $addr;
    }
  } else {
### BSD-style output

# If there's no "|" separator, see if the format matches any other typical
# nm-type output

    my($addr) = substr ($line, 0, 8);
    my(@a) = split (" ", $line);
    my($symbol) = $a[$#a];

# Some symbols have some kind of numeric suffix, so get rid of that here

    $symbol =~ s/\.[0-9]+$//;

# Some symbols have a @@GLIBC_2 suffix, so get rid of it

    $symbol =~ s/\@\@GLIBC_2//;

    print "Address: $addr  Penultimate $#a: \"$a[$#a-1]\"\n"
	if $verbose > 6;
    if (($#a == 2 && ($addr =~ /^[0-9a-fA-F]+$/)) ||
	($#a == 1 && $addr =~ /^\s+$/)) {

# Looks like "nm" on linux; see the nm man page for flag interpretation

      if (($choice eq $UNDEF && $a[$#a-1] =~ /^[u]$/i) ||
	  ($choice eq $GLOBAL && $a[$#a-1] =~ /^[abdgrstvw]$/i) ||
	  ($choice eq $LOCAL && $a[$#a-1] =~ /^[dg]$/i) ||
	  ($choice eq $DEFINED && $a[$#a-1] =~ /^[abdgrst]$/i)) {
	$result = $symbol;
	$addrs{$result} = $addr;
	print " == Logging $choice $symbol at $addr\n"
	    if $verbose > 4;
### FIXME what are C and N?
      } elsif ($a[$#a-1] =~ /^[abcdgnrstuvw]$/i) {
	print " == Skipping non-$choice \"$line\"\n"
	    if $verbose > 8;
      } else {
	print " ** Failed to parse \"$line\"\n"
	    if ($verbose);
      }
    }
  }

  return $result;
}
