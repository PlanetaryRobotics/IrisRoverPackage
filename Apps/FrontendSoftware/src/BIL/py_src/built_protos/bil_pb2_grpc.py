# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import bil_pb2 as bil__pb2
from . import db_pb2 as db__pb2


class BilStub(object):
    """Backend Interface Layer Service Definition:
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/iris_bil.Bil/Ping',
                request_serializer=bil__pb2.PingMessage.SerializeToString,
                response_deserializer=bil__pb2.PingMessage.FromString,
                )
        self.SendCommand = channel.unary_unary(
                '/iris_bil.Bil/SendCommand',
                request_serializer=db__pb2.Command.SerializeToString,
                response_deserializer=bil__pb2.InternalCommandAck.FromString,
                )
        self.RequestStoredData = channel.unary_unary(
                '/iris_bil.Bil/RequestStoredData',
                request_serializer=bil__pb2.BilDataRequest.SerializeToString,
                response_deserializer=bil__pb2.BilDataRequestResponse.FromString,
                )
        self.StreamNewData = channel.unary_stream(
                '/iris_bil.Bil/StreamNewData',
                request_serializer=bil__pb2.BilDataRequest.SerializeToString,
                response_deserializer=bil__pb2.BilDataRequestResponse.FromString,
                )


class BilServicer(object):
    """Backend Interface Layer Service Definition:
    """

    def Ping(self, request, context):
        """Aliveness Ping (for debugging):
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCommand(self, request, context):
        """Tells the BIL to push the given command to the database:
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestStoredData(self, request, context):
        """Generic one-time request for stored data
        (generic because any received data goes straight into an event emitter):
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamNewData(self, request, context):
        """Stream all new data that matches the given request:
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BilServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=bil__pb2.PingMessage.FromString,
                    response_serializer=bil__pb2.PingMessage.SerializeToString,
            ),
            'SendCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCommand,
                    request_deserializer=db__pb2.Command.FromString,
                    response_serializer=bil__pb2.InternalCommandAck.SerializeToString,
            ),
            'RequestStoredData': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestStoredData,
                    request_deserializer=bil__pb2.BilDataRequest.FromString,
                    response_serializer=bil__pb2.BilDataRequestResponse.SerializeToString,
            ),
            'StreamNewData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamNewData,
                    request_deserializer=bil__pb2.BilDataRequest.FromString,
                    response_serializer=bil__pb2.BilDataRequestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iris_bil.Bil', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bil(object):
    """Backend Interface Layer Service Definition:
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iris_bil.Bil/Ping',
            bil__pb2.PingMessage.SerializeToString,
            bil__pb2.PingMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iris_bil.Bil/SendCommand',
            db__pb2.Command.SerializeToString,
            bil__pb2.InternalCommandAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestStoredData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iris_bil.Bil/RequestStoredData',
            bil__pb2.BilDataRequest.SerializeToString,
            bil__pb2.BilDataRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamNewData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iris_bil.Bil/StreamNewData',
            bil__pb2.BilDataRequest.SerializeToString,
            bil__pb2.BilDataRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
